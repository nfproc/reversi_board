// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module overlay_control_overlay_control_Pipeline_VITIS_LOOP_30_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_TVALID,
        dst_TREADY,
        p_4,
        axis_dest_V,
        axis_id_V,
        axis_last_V,
        axis_user_V,
        axis_strb_V,
        axis_keep_V,
        o8_V,
        axis_data_V,
        over_address0,
        over_ce0,
        over_q0,
        dst_TDATA,
        dst_TVALID,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST,
        cmp56,
        src_TDATA,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        axis_dest_V_6_out,
        axis_dest_V_6_out_ap_vld,
        axis_id_V_6_out,
        axis_id_V_6_out_ap_vld,
        axis_last_V_6_out,
        axis_last_V_6_out_ap_vld,
        axis_user_V_6_out,
        axis_user_V_6_out_ap_vld,
        axis_strb_V_6_out,
        axis_strb_V_6_out_ap_vld,
        axis_keep_V_6_out,
        axis_keep_V_6_out_ap_vld,
        o8_V_2_out,
        o8_V_2_out_ap_vld,
        axis_data_V_8_out,
        axis_data_V_8_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   src_TVALID;
input   dst_TREADY;
input  [31:0] p_4;
input  [0:0] axis_dest_V;
input  [0:0] axis_id_V;
input  [0:0] axis_last_V;
input  [0:0] axis_user_V;
input  [2:0] axis_strb_V;
input  [2:0] axis_keep_V;
input  [7:0] o8_V;
input  [23:0] axis_data_V;
output  [16:0] over_address0;
output   over_ce0;
input  [7:0] over_q0;
output  [23:0] dst_TDATA;
output   dst_TVALID;
output  [2:0] dst_TKEEP;
output  [2:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;
input  [0:0] cmp56;
input  [23:0] src_TDATA;
output   src_TREADY;
input  [2:0] src_TKEEP;
input  [2:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [0:0] axis_dest_V_6_out;
output   axis_dest_V_6_out_ap_vld;
output  [0:0] axis_id_V_6_out;
output   axis_id_V_6_out_ap_vld;
output  [0:0] axis_last_V_6_out;
output   axis_last_V_6_out_ap_vld;
output  [0:0] axis_user_V_6_out;
output   axis_user_V_6_out_ap_vld;
output  [2:0] axis_strb_V_6_out;
output   axis_strb_V_6_out_ap_vld;
output  [2:0] axis_keep_V_6_out;
output   axis_keep_V_6_out_ap_vld;
output  [7:0] o8_V_2_out;
output   o8_V_2_out_ap_vld;
output  [23:0] axis_data_V_8_out;
output   axis_data_V_8_out_ap_vld;

reg ap_idle;
reg over_ce0;
reg dst_TVALID;
reg src_TREADY;
reg axis_dest_V_6_out_ap_vld;
reg axis_id_V_6_out_ap_vld;
reg axis_last_V_6_out_ap_vld;
reg axis_user_V_6_out_ap_vld;
reg axis_strb_V_6_out_ap_vld;
reg axis_keep_V_6_out_ap_vld;
reg o8_V_2_out_ap_vld;
reg axis_data_V_8_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln30_fu_422_p2;
wire   [0:0] or_ln52_fu_503_p2;
reg    ap_predicate_op73_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dst_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    src_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln30_reg_815;
reg   [2:0] p_029_load_reg_819;
reg   [2:0] p_029_load_reg_819_pp0_iter2_reg;
reg   [2:0] tmp_1_load_1_reg_824;
reg   [2:0] tmp_1_load_1_reg_824_pp0_iter2_reg;
reg   [0:0] tmp_2_load_1_reg_829;
reg   [0:0] tmp_2_load_1_reg_829_pp0_iter2_reg;
reg   [0:0] tmp_3_load_1_reg_834;
reg   [0:0] tmp_3_load_1_reg_834_pp0_iter2_reg;
reg   [0:0] tmp_4_load_1_reg_839;
reg   [0:0] tmp_4_load_1_reg_839_pp0_iter2_reg;
reg   [0:0] tmp_5_load_1_reg_844;
reg   [0:0] tmp_5_load_1_reg_844_pp0_iter2_reg;
wire   [0:0] icmp_ln31_fu_458_p2;
reg   [0:0] icmp_ln31_reg_849;
reg   [0:0] icmp_ln31_reg_849_pp0_iter2_reg;
reg   [0:0] or_ln52_reg_859;
reg   [0:0] or_ln52_reg_859_pp0_iter2_reg;
reg   [23:0] tmp_16_reg_863;
reg   [23:0] tmp_16_reg_863_pp0_iter2_reg;
reg   [7:0] o8_V_2_reg_868;
wire   [63:0] zext_ln33_fu_464_p1;
reg   [23:0] p_Val2_s_fu_148;
wire   [23:0] axis_data_V_4_fu_669_p3;
wire    ap_loop_init;
reg   [7:0] o8_V_1_fu_152;
wire   [7:0] o8_V_3_fu_587_p3;
reg   [31:0] p_fu_156;
wire   [31:0] p_2_fu_481_p3;
reg   [10:0] x_fu_160;
wire   [10:0] x_2_fu_428_p2;
reg   [31:0] xrem_fu_164;
wire   [31:0] xrem_2_fu_489_p3;
reg   [2:0] tmp_fu_168;
reg   [2:0] tmp_1_fu_172;
reg   [0:0] tmp_2_fu_176;
reg   [0:0] tmp_3_fu_180;
reg   [0:0] tmp_4_fu_184;
reg   [0:0] tmp_5_fu_188;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] p_1_fu_469_p2;
wire   [31:0] xrem_1_fu_475_p2;
wire   [0:0] icmp_ln52_fu_497_p2;
wire   [1:0] trunc_ln_fu_601_p4;
wire   [4:0] tmp_8_fu_635_p4;
wire   [2:0] trunc_ln225_1_fu_611_p4;
wire   [1:0] trunc_ln225_2_fu_621_p4;
wire   [1:0] trunc_ln225_fu_631_p1;
wire   [0:0] tmp_6_fu_593_p3;
wire   [23:0] p_Result_s_fu_645_p11;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_512;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

overlay_control_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            o8_V_1_fu_152 <= o8_V;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            o8_V_1_fu_152 <= o8_V_3_fu_587_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_Val2_s_fu_148 <= axis_data_V;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (or_ln52_reg_859_pp0_iter2_reg == 1'd1))) begin
            p_Val2_s_fu_148 <= tmp_16_reg_863_pp0_iter2_reg;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (or_ln52_reg_859_pp0_iter2_reg == 1'd0))) begin
            p_Val2_s_fu_148 <= axis_data_V_4_fu_669_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_fu_156 <= p_4;
        end else if (((icmp_ln30_fu_422_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_fu_156 <= p_2_fu_481_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_1_fu_172 <= axis_strb_V;
        end else if ((1'b1 == ap_condition_512)) begin
            tmp_1_fu_172 <= src_TSTRB;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_2_fu_176 <= axis_user_V;
        end else if ((1'b1 == ap_condition_512)) begin
            tmp_2_fu_176 <= src_TUSER;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_3_fu_180 <= axis_last_V;
        end else if ((1'b1 == ap_condition_512)) begin
            tmp_3_fu_180 <= src_TLAST;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_4_fu_184 <= axis_id_V;
        end else if ((1'b1 == ap_condition_512)) begin
            tmp_4_fu_184 <= src_TID;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_5_fu_188 <= axis_dest_V;
        end else if ((1'b1 == ap_condition_512)) begin
            tmp_5_fu_188 <= src_TDEST;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_fu_168 <= axis_keep_V;
        end else if ((1'b1 == ap_condition_512)) begin
            tmp_fu_168 <= src_TKEEP;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_160 <= 11'd0;
        end else if (((icmp_ln30_fu_422_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_160 <= x_2_fu_428_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            xrem_fu_164 <= 32'd0;
        end else if (((icmp_ln30_fu_422_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            xrem_fu_164 <= xrem_2_fu_489_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln30_reg_815 <= icmp_ln30_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln31_reg_849 <= icmp_ln31_fu_458_p2;
        or_ln52_reg_859 <= or_ln52_fu_503_p2;
        p_029_load_reg_819 <= tmp_fu_168;
        tmp_1_load_1_reg_824 <= tmp_1_fu_172;
        tmp_2_load_1_reg_829 <= tmp_2_fu_176;
        tmp_3_load_1_reg_834 <= tmp_3_fu_180;
        tmp_4_load_1_reg_839 <= tmp_4_fu_184;
        tmp_5_load_1_reg_844 <= tmp_5_fu_188;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln31_reg_849_pp0_iter2_reg <= icmp_ln31_reg_849;
        o8_V_2_reg_868 <= over_q0;
        or_ln52_reg_859_pp0_iter2_reg <= or_ln52_reg_859;
        p_029_load_reg_819_pp0_iter2_reg <= p_029_load_reg_819;
        tmp_16_reg_863_pp0_iter2_reg <= tmp_16_reg_863;
        tmp_1_load_1_reg_824_pp0_iter2_reg <= tmp_1_load_1_reg_824;
        tmp_2_load_1_reg_829_pp0_iter2_reg <= tmp_2_load_1_reg_829;
        tmp_3_load_1_reg_834_pp0_iter2_reg <= tmp_3_load_1_reg_834;
        tmp_4_load_1_reg_839_pp0_iter2_reg <= tmp_4_load_1_reg_839;
        tmp_5_load_1_reg_844_pp0_iter2_reg <= tmp_5_load_1_reg_844;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln52_fu_503_p2 == 1'd1) & (icmp_ln30_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_16_reg_863 <= src_TDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln30_fu_422_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        axis_data_V_8_out_ap_vld = 1'b1;
    end else begin
        axis_data_V_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        axis_dest_V_6_out_ap_vld = 1'b1;
    end else begin
        axis_dest_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        axis_id_V_6_out_ap_vld = 1'b1;
    end else begin
        axis_id_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        axis_keep_V_6_out_ap_vld = 1'b1;
    end else begin
        axis_keep_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        axis_last_V_6_out_ap_vld = 1'b1;
    end else begin
        axis_last_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        axis_strb_V_6_out_ap_vld = 1'b1;
    end else begin
        axis_strb_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        axis_user_V_6_out_ap_vld = 1'b1;
    end else begin
        axis_user_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_TDATA_blk_n = dst_TREADY;
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_TVALID = 1'b1;
    end else begin
        dst_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_815 == 1'd1))) begin
        o8_V_2_out_ap_vld = 1'b1;
    end else begin
        o8_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        over_ce0 = 1'b1;
    end else begin
        over_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TDATA_blk_n = src_TVALID;
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TREADY = 1'b1;
    end else begin
        src_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op73_read_state2 == 1'b1) & (src_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op73_read_state2 == 1'b1) & (src_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op73_read_state2 == 1'b1) & (src_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op73_read_state2 == 1'b1) & (src_TVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (dst_TREADY == 1'b0);
end

always @ (*) begin
    ap_condition_512 = ((or_ln52_fu_503_p2 == 1'd1) & (icmp_ln30_fu_422_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op73_read_state2 = ((or_ln52_fu_503_p2 == 1'd1) & (icmp_ln30_fu_422_p2 == 1'd0));
end

assign axis_data_V_4_fu_669_p3 = ((tmp_6_fu_593_p3[0:0] == 1'b1) ? p_Result_s_fu_645_p11 : p_Val2_s_fu_148);

assign axis_data_V_8_out = p_Val2_s_fu_148;

assign axis_dest_V_6_out = tmp_5_fu_188;

assign axis_id_V_6_out = tmp_4_fu_184;

assign axis_keep_V_6_out = tmp_fu_168;

assign axis_last_V_6_out = tmp_3_fu_180;

assign axis_strb_V_6_out = tmp_1_fu_172;

assign axis_user_V_6_out = tmp_2_fu_176;

assign dst_TDATA = ((tmp_6_fu_593_p3[0:0] == 1'b1) ? p_Result_s_fu_645_p11 : p_Val2_s_fu_148);

assign dst_TDEST = tmp_5_load_1_reg_844_pp0_iter2_reg;

assign dst_TID = tmp_4_load_1_reg_839_pp0_iter2_reg;

assign dst_TKEEP = p_029_load_reg_819_pp0_iter2_reg;

assign dst_TLAST = tmp_3_load_1_reg_834_pp0_iter2_reg;

assign dst_TSTRB = tmp_1_load_1_reg_824_pp0_iter2_reg;

assign dst_TUSER = tmp_2_load_1_reg_829_pp0_iter2_reg;

assign icmp_ln30_fu_422_p2 = ((x_fu_160 == 11'd1920) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_458_p2 = ((xrem_fu_164 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_497_p2 = ((x_fu_160 != 11'd1919) ? 1'b1 : 1'b0);

assign o8_V_2_out = o8_V_1_fu_152;

assign o8_V_3_fu_587_p3 = ((icmp_ln31_reg_849_pp0_iter2_reg[0:0] == 1'b1) ? o8_V_2_reg_868 : o8_V_1_fu_152);

assign or_ln52_fu_503_p2 = (icmp_ln52_fu_497_p2 | cmp56);

assign over_address0 = zext_ln33_fu_464_p1;

assign p_1_fu_469_p2 = (p_fu_156 + 32'd1);

assign p_2_fu_481_p3 = ((icmp_ln31_fu_458_p2[0:0] == 1'b1) ? p_1_fu_469_p2 : p_fu_156);

assign p_Result_s_fu_645_p11 = {{{{{{{{{{trunc_ln_fu_601_p4}, {trunc_ln_fu_601_p4}}, {trunc_ln_fu_601_p4}}, {tmp_8_fu_635_p4}}, {trunc_ln225_1_fu_611_p4}}, {trunc_ln225_2_fu_621_p4}}, {trunc_ln225_fu_631_p1}}, {trunc_ln225_fu_631_p1}}, {trunc_ln225_fu_631_p1}}, {trunc_ln225_fu_631_p1}};

assign tmp_6_fu_593_p3 = o8_V_3_fu_587_p3[32'd7];

assign tmp_8_fu_635_p4 = {{o8_V_3_fu_587_p3[6:2]}};

assign trunc_ln225_1_fu_611_p4 = {{o8_V_3_fu_587_p3[4:2]}};

assign trunc_ln225_2_fu_621_p4 = {{o8_V_3_fu_587_p3[4:3]}};

assign trunc_ln225_fu_631_p1 = o8_V_3_fu_587_p3[1:0];

assign trunc_ln_fu_601_p4 = {{o8_V_3_fu_587_p3[6:5]}};

assign x_2_fu_428_p2 = (x_fu_160 + 11'd1);

assign xrem_1_fu_475_p2 = ($signed(xrem_fu_164) + $signed(32'd4294967295));

assign xrem_2_fu_489_p3 = ((icmp_ln31_fu_458_p2[0:0] == 1'b1) ? 32'd3 : xrem_1_fu_475_p2);

assign zext_ln33_fu_464_p1 = p_fu_156;

endmodule //overlay_control_overlay_control_Pipeline_VITIS_LOOP_30_3
