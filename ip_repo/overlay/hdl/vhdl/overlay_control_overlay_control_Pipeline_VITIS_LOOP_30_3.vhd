-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity overlay_control_overlay_control_Pipeline_VITIS_LOOP_30_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_TVALID : IN STD_LOGIC;
    dst_TREADY : IN STD_LOGIC;
    p_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_dest_V : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_id_V : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_user_V : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_strb_V : IN STD_LOGIC_VECTOR (2 downto 0);
    axis_keep_V : IN STD_LOGIC_VECTOR (2 downto 0);
    o8_V : IN STD_LOGIC_VECTOR (7 downto 0);
    axis_data_V : IN STD_LOGIC_VECTOR (23 downto 0);
    over_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    over_ce0 : OUT STD_LOGIC;
    over_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    dst_TVALID : OUT STD_LOGIC;
    dst_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    cmp56 : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_dest_V_6_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_dest_V_6_out_ap_vld : OUT STD_LOGIC;
    axis_id_V_6_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_id_V_6_out_ap_vld : OUT STD_LOGIC;
    axis_last_V_6_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_last_V_6_out_ap_vld : OUT STD_LOGIC;
    axis_user_V_6_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    axis_user_V_6_out_ap_vld : OUT STD_LOGIC;
    axis_strb_V_6_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    axis_strb_V_6_out_ap_vld : OUT STD_LOGIC;
    axis_keep_V_6_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    axis_keep_V_6_out_ap_vld : OUT STD_LOGIC;
    o8_V_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    o8_V_2_out_ap_vld : OUT STD_LOGIC;
    axis_data_V_8_out : OUT STD_LOGIC_VECTOR (23 downto 0);
    axis_data_V_8_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of overlay_control_overlay_control_Pipeline_VITIS_LOOP_30_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_77F : STD_LOGIC_VECTOR (10 downto 0) := "11101111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln30_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op73_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dst_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln30_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_029_load_reg_819 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_029_load_reg_819_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_load_1_reg_824 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_load_1_reg_824_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_load_1_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_load_1_reg_829_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_load_1_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_load_1_reg_834_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_load_1_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_load_1_reg_839_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_load_1_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_load_1_reg_844_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_849_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_reg_859 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_reg_859_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_863 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_reg_863_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal o8_V_2_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln33_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_148 : STD_LOGIC_VECTOR (23 downto 0);
    signal axis_data_V_4_fu_669_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal o8_V_1_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal o8_V_3_fu_587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_2_fu_481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_160 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_2_fu_428_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xrem_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal xrem_2_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_168 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_176 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_180 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_184 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_188 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_1_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xrem_1_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln52_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_601_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_635_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln225_1_fu_611_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln225_2_fu_621_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln225_fu_631_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_593_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_645_p11 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_512 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component overlay_control_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component overlay_control_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    o8_V_1_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    o8_V_1_fu_152 <= o8_V;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    o8_V_1_fu_152 <= o8_V_3_fu_587_p3;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_Val2_s_fu_148 <= axis_data_V;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (or_ln52_reg_859_pp0_iter2_reg = ap_const_lv1_1))) then 
                    p_Val2_s_fu_148 <= tmp_16_reg_863_pp0_iter2_reg;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (or_ln52_reg_859_pp0_iter2_reg = ap_const_lv1_0))) then 
                    p_Val2_s_fu_148 <= axis_data_V_4_fu_669_p3;
                end if;
            end if; 
        end if;
    end process;

    p_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_fu_156 <= p_4;
                elsif (((icmp_ln30_fu_422_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_fu_156 <= p_2_fu_481_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp_1_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_1_fu_172 <= axis_strb_V;
                elsif ((ap_const_boolean_1 = ap_condition_512)) then 
                    tmp_1_fu_172 <= src_TSTRB;
                end if;
            end if; 
        end if;
    end process;

    tmp_2_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_2_fu_176 <= axis_user_V;
                elsif ((ap_const_boolean_1 = ap_condition_512)) then 
                    tmp_2_fu_176 <= src_TUSER;
                end if;
            end if; 
        end if;
    end process;

    tmp_3_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_3_fu_180 <= axis_last_V;
                elsif ((ap_const_boolean_1 = ap_condition_512)) then 
                    tmp_3_fu_180 <= src_TLAST;
                end if;
            end if; 
        end if;
    end process;

    tmp_4_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_4_fu_184 <= axis_id_V;
                elsif ((ap_const_boolean_1 = ap_condition_512)) then 
                    tmp_4_fu_184 <= src_TID;
                end if;
            end if; 
        end if;
    end process;

    tmp_5_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_5_fu_188 <= axis_dest_V;
                elsif ((ap_const_boolean_1 = ap_condition_512)) then 
                    tmp_5_fu_188 <= src_TDEST;
                end if;
            end if; 
        end if;
    end process;

    tmp_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tmp_fu_168 <= axis_keep_V;
                elsif ((ap_const_boolean_1 = ap_condition_512)) then 
                    tmp_fu_168 <= src_TKEEP;
                end if;
            end if; 
        end if;
    end process;

    x_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_160 <= ap_const_lv11_0;
                elsif (((icmp_ln30_fu_422_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_160 <= x_2_fu_428_p2;
                end if;
            end if; 
        end if;
    end process;

    xrem_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    xrem_fu_164 <= ap_const_lv32_0;
                elsif (((icmp_ln30_fu_422_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    xrem_fu_164 <= xrem_2_fu_489_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln30_reg_815 <= icmp_ln30_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln31_reg_849 <= icmp_ln31_fu_458_p2;
                or_ln52_reg_859 <= or_ln52_fu_503_p2;
                p_029_load_reg_819 <= tmp_fu_168;
                tmp_1_load_1_reg_824 <= tmp_1_fu_172;
                tmp_2_load_1_reg_829 <= tmp_2_fu_176;
                tmp_3_load_1_reg_834 <= tmp_3_fu_180;
                tmp_4_load_1_reg_839 <= tmp_4_fu_184;
                tmp_5_load_1_reg_844 <= tmp_5_fu_188;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln31_reg_849_pp0_iter2_reg <= icmp_ln31_reg_849;
                o8_V_2_reg_868 <= over_q0;
                or_ln52_reg_859_pp0_iter2_reg <= or_ln52_reg_859;
                p_029_load_reg_819_pp0_iter2_reg <= p_029_load_reg_819;
                tmp_16_reg_863_pp0_iter2_reg <= tmp_16_reg_863;
                tmp_1_load_1_reg_824_pp0_iter2_reg <= tmp_1_load_1_reg_824;
                tmp_2_load_1_reg_829_pp0_iter2_reg <= tmp_2_load_1_reg_829;
                tmp_3_load_1_reg_834_pp0_iter2_reg <= tmp_3_load_1_reg_834;
                tmp_4_load_1_reg_839_pp0_iter2_reg <= tmp_4_load_1_reg_839;
                tmp_5_load_1_reg_844_pp0_iter2_reg <= tmp_5_load_1_reg_844;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln52_fu_503_p2 = ap_const_lv1_1) and (icmp_ln30_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_16_reg_863 <= src_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, src_TVALID, ap_predicate_op73_read_state2, dst_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op73_read_state2 = ap_const_boolean_1) and (src_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, src_TVALID, ap_predicate_op73_read_state2, dst_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op73_read_state2 = ap_const_boolean_1) and (src_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, src_TVALID, ap_predicate_op73_read_state2, dst_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op73_read_state2 = ap_const_boolean_1) and (src_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(src_TVALID, ap_predicate_op73_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op73_read_state2 = ap_const_boolean_1) and (src_TVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(dst_TREADY)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (dst_TREADY = ap_const_logic_0);
    end process;


    ap_condition_512_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln30_fu_422_p2, or_ln52_fu_503_p2)
    begin
                ap_condition_512 <= ((or_ln52_fu_503_p2 = ap_const_lv1_1) and (icmp_ln30_fu_422_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln30_fu_422_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln30_fu_422_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op73_read_state2_assign_proc : process(icmp_ln30_fu_422_p2, or_ln52_fu_503_p2)
    begin
                ap_predicate_op73_read_state2 <= ((or_ln52_fu_503_p2 = ap_const_lv1_1) and (icmp_ln30_fu_422_p2 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    axis_data_V_4_fu_669_p3 <= 
        p_Result_s_fu_645_p11 when (tmp_6_fu_593_p3(0) = '1') else 
        p_Val2_s_fu_148;
    axis_data_V_8_out <= p_Val2_s_fu_148;

    axis_data_V_8_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            axis_data_V_8_out_ap_vld <= ap_const_logic_1;
        else 
            axis_data_V_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    axis_dest_V_6_out <= tmp_5_fu_188;

    axis_dest_V_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            axis_dest_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            axis_dest_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    axis_id_V_6_out <= tmp_4_fu_184;

    axis_id_V_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            axis_id_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            axis_id_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    axis_keep_V_6_out <= tmp_fu_168;

    axis_keep_V_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            axis_keep_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            axis_keep_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    axis_last_V_6_out <= tmp_3_fu_180;

    axis_last_V_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            axis_last_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            axis_last_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    axis_strb_V_6_out <= tmp_1_fu_172;

    axis_strb_V_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            axis_strb_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            axis_strb_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    axis_user_V_6_out <= tmp_2_fu_176;

    axis_user_V_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            axis_user_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            axis_user_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dst_TDATA <= 
        p_Result_s_fu_645_p11 when (tmp_6_fu_593_p3(0) = '1') else 
        p_Val2_s_fu_148;

    dst_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, dst_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_TDATA_blk_n <= dst_TREADY;
        else 
            dst_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_TDEST <= tmp_5_load_1_reg_844_pp0_iter2_reg;
    dst_TID <= tmp_4_load_1_reg_839_pp0_iter2_reg;
    dst_TKEEP <= p_029_load_reg_819_pp0_iter2_reg;
    dst_TLAST <= tmp_3_load_1_reg_834_pp0_iter2_reg;
    dst_TSTRB <= tmp_1_load_1_reg_824_pp0_iter2_reg;
    dst_TUSER <= tmp_2_load_1_reg_829_pp0_iter2_reg;

    dst_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_TVALID <= ap_const_logic_1;
        else 
            dst_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln30_fu_422_p2 <= "1" when (x_fu_160 = ap_const_lv11_780) else "0";
    icmp_ln31_fu_458_p2 <= "1" when (xrem_fu_164 = ap_const_lv32_0) else "0";
    icmp_ln52_fu_497_p2 <= "0" when (x_fu_160 = ap_const_lv11_77F) else "1";
    o8_V_2_out <= o8_V_1_fu_152;

    o8_V_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln30_reg_815)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_815 = ap_const_lv1_1))) then 
            o8_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            o8_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    o8_V_3_fu_587_p3 <= 
        o8_V_2_reg_868 when (icmp_ln31_reg_849_pp0_iter2_reg(0) = '1') else 
        o8_V_1_fu_152;
    or_ln52_fu_503_p2 <= (icmp_ln52_fu_497_p2 or cmp56);
    over_address0 <= zext_ln33_fu_464_p1(17 - 1 downto 0);

    over_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            over_ce0 <= ap_const_logic_1;
        else 
            over_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_469_p2 <= std_logic_vector(unsigned(p_fu_156) + unsigned(ap_const_lv32_1));
    p_2_fu_481_p3 <= 
        p_1_fu_469_p2 when (icmp_ln31_fu_458_p2(0) = '1') else 
        p_fu_156;
    p_Result_s_fu_645_p11 <= (((((((((trunc_ln_fu_601_p4 & trunc_ln_fu_601_p4) & trunc_ln_fu_601_p4) & tmp_8_fu_635_p4) & trunc_ln225_1_fu_611_p4) & trunc_ln225_2_fu_621_p4) & trunc_ln225_fu_631_p1) & trunc_ln225_fu_631_p1) & trunc_ln225_fu_631_p1) & trunc_ln225_fu_631_p1);

    src_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, src_TVALID, ap_predicate_op73_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op73_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_TDATA_blk_n <= src_TVALID;
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op73_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op73_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_TREADY <= ap_const_logic_1;
        else 
            src_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_fu_593_p3 <= o8_V_3_fu_587_p3(7 downto 7);
    tmp_8_fu_635_p4 <= o8_V_3_fu_587_p3(6 downto 2);
    trunc_ln225_1_fu_611_p4 <= o8_V_3_fu_587_p3(4 downto 2);
    trunc_ln225_2_fu_621_p4 <= o8_V_3_fu_587_p3(4 downto 3);
    trunc_ln225_fu_631_p1 <= o8_V_3_fu_587_p3(2 - 1 downto 0);
    trunc_ln_fu_601_p4 <= o8_V_3_fu_587_p3(6 downto 5);
    x_2_fu_428_p2 <= std_logic_vector(unsigned(x_fu_160) + unsigned(ap_const_lv11_1));
    xrem_1_fu_475_p2 <= std_logic_vector(unsigned(xrem_fu_164) + unsigned(ap_const_lv32_FFFFFFFF));
    xrem_2_fu_489_p3 <= 
        ap_const_lv32_3 when (icmp_ln31_fu_458_p2(0) = '1') else 
        xrem_1_fu_475_p2;
    zext_ln33_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_fu_156),64));
end behav;
