// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_Axi2AxiStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        p_read,
        ldata1_din,
        ldata1_full_n,
        ldata1_write,
        p_read1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [63:0] m_axi_data_AWADDR;
output  [0:0] m_axi_data_AWID;
output  [31:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [0:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [31:0] m_axi_data_WDATA;
output  [3:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [0:0] m_axi_data_WID;
output  [0:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [63:0] m_axi_data_ARADDR;
output  [0:0] m_axi_data_ARID;
output  [31:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [0:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [31:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [0:0] m_axi_data_RID;
input  [0:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [0:0] m_axi_data_BID;
input  [0:0] m_axi_data_BUSER;
input  [63:0] p_read;
output  [31:0] ldata1_din;
input   ldata1_full_n;
output   ldata1_write;
input  [20:0] p_read1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_data_ARVALID;
reg[63:0] m_axi_data_ARADDR;
reg[0:0] m_axi_data_ARID;
reg[31:0] m_axi_data_ARLEN;
reg[2:0] m_axi_data_ARSIZE;
reg[1:0] m_axi_data_ARBURST;
reg[1:0] m_axi_data_ARLOCK;
reg[3:0] m_axi_data_ARCACHE;
reg[2:0] m_axi_data_ARPROT;
reg[3:0] m_axi_data_ARQOS;
reg[3:0] m_axi_data_ARREGION;
reg[0:0] m_axi_data_ARUSER;
reg m_axi_data_RREADY;
reg ldata1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln1057_reg_109;
wire   [0:0] icmp_ln1057_fu_72_p2;
wire  signed [61:0] trunc_ln_fu_78_p4;
reg   [61:0] trunc_ln_reg_113;
wire   [31:0] zext_ln952_fu_99_p1;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_done;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_idle;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_ready;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWVALID;
wire   [63:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWADDR;
wire   [0:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWID;
wire   [31:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLEN;
wire   [2:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWSIZE;
wire   [1:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWBURST;
wire   [1:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLOCK;
wire   [3:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWCACHE;
wire   [2:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWPROT;
wire   [3:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWQOS;
wire   [3:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWREGION;
wire   [0:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWUSER;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WVALID;
wire   [31:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WDATA;
wire   [3:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WSTRB;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WLAST;
wire   [0:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WID;
wire   [0:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WUSER;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARVALID;
wire   [63:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARADDR;
wire   [0:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARID;
wire   [31:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLEN;
wire   [2:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARSIZE;
wire   [1:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARBURST;
wire   [1:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLOCK;
wire   [3:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARCACHE;
wire   [2:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARPROT;
wire   [3:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARQOS;
wire   [3:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARREGION;
wire   [0:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARUSER;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_RREADY;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_BREADY;
wire   [31:0] grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_din;
wire    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_write;
reg    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire  signed [63:0] sext_ln952_fu_88_p1;
reg    ap_block_state2_io;
reg    ap_block_state1;
reg    ap_block_state10_on_subcall_done;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg = 1'b0;
end

reversi_accel_Axi2AxiStream_Pipeline_MMIterInLoop1 grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start),
    .ap_done(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_done),
    .ap_idle(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_idle),
    .ap_ready(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_ready),
    .m_axi_data_AWVALID(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWVALID),
    .m_axi_data_AWREADY(1'b0),
    .m_axi_data_AWADDR(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWADDR),
    .m_axi_data_AWID(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWID),
    .m_axi_data_AWLEN(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLEN),
    .m_axi_data_AWSIZE(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWSIZE),
    .m_axi_data_AWBURST(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWBURST),
    .m_axi_data_AWLOCK(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLOCK),
    .m_axi_data_AWCACHE(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWCACHE),
    .m_axi_data_AWPROT(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWPROT),
    .m_axi_data_AWQOS(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWQOS),
    .m_axi_data_AWREGION(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWREGION),
    .m_axi_data_AWUSER(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWUSER),
    .m_axi_data_WVALID(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WVALID),
    .m_axi_data_WREADY(1'b0),
    .m_axi_data_WDATA(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WDATA),
    .m_axi_data_WSTRB(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WSTRB),
    .m_axi_data_WLAST(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WLAST),
    .m_axi_data_WID(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WID),
    .m_axi_data_WUSER(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WUSER),
    .m_axi_data_ARVALID(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARVALID),
    .m_axi_data_ARREADY(m_axi_data_ARREADY),
    .m_axi_data_ARADDR(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARADDR),
    .m_axi_data_ARID(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARID),
    .m_axi_data_ARLEN(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLEN),
    .m_axi_data_ARSIZE(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARSIZE),
    .m_axi_data_ARBURST(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARBURST),
    .m_axi_data_ARLOCK(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLOCK),
    .m_axi_data_ARCACHE(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARCACHE),
    .m_axi_data_ARPROT(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARPROT),
    .m_axi_data_ARQOS(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARQOS),
    .m_axi_data_ARREGION(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARREGION),
    .m_axi_data_ARUSER(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARUSER),
    .m_axi_data_RVALID(m_axi_data_RVALID),
    .m_axi_data_RREADY(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_RREADY),
    .m_axi_data_RDATA(m_axi_data_RDATA),
    .m_axi_data_RLAST(m_axi_data_RLAST),
    .m_axi_data_RID(m_axi_data_RID),
    .m_axi_data_RUSER(m_axi_data_RUSER),
    .m_axi_data_RRESP(m_axi_data_RRESP),
    .m_axi_data_BVALID(1'b0),
    .m_axi_data_BREADY(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_BREADY),
    .m_axi_data_BRESP(2'd0),
    .m_axi_data_BID(1'd0),
    .m_axi_data_BUSER(1'd0),
    .ldata1_din(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_din),
    .ldata1_full_n(ldata1_full_n),
    .ldata1_write(grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_write),
    .sext_ln952(trunc_ln_reg_113),
    .p_read1(p_read1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg <= 1'b1;
        end else if ((grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_ready == 1'b1)) begin
            grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln1057_reg_109 <= icmp_ln1057_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1057_reg_109 == 1'd0))) begin
        trunc_ln_reg_113 <= {{p_read[63:2]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10_on_subcall_done)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_io)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1057_reg_109 == 1'd0))) begin
        data_blk_n_AR = m_axi_data_ARREADY;
    end else begin
        data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0))) begin
        ldata1_write = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_write;
    end else begin
        ldata1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln1057_reg_109 == 1'd0))) begin
        m_axi_data_ARADDR = sext_ln952_fu_88_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARADDR = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARADDR;
    end else begin
        m_axi_data_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARBURST = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARBURST;
    end else begin
        m_axi_data_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARCACHE = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARCACHE;
    end else begin
        m_axi_data_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARID = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARID;
    end else begin
        m_axi_data_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln1057_reg_109 == 1'd0))) begin
        m_axi_data_ARLEN = zext_ln952_fu_99_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARLEN = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLEN;
    end else begin
        m_axi_data_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARLOCK = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLOCK;
    end else begin
        m_axi_data_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARPROT = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARPROT;
    end else begin
        m_axi_data_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARQOS = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARQOS;
    end else begin
        m_axi_data_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARREGION = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARREGION;
    end else begin
        m_axi_data_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARSIZE = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARSIZE;
    end else begin
        m_axi_data_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARUSER = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARUSER;
    end else begin
        m_axi_data_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln1057_reg_109 == 1'd0))) begin
        m_axi_data_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_ARVALID = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARVALID;
    end else begin
        m_axi_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln1057_reg_109 == 1'd0)))) begin
        m_axi_data_RREADY = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_RREADY;
    end else begin
        m_axi_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln1057_reg_109 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln1057_reg_109 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_on_subcall_done = ((grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_done == 1'b0) & (icmp_ln1057_reg_109 == 1'd0));
end

always @ (*) begin
    ap_block_state2_io = ((m_axi_data_ARREADY == 1'b0) & (icmp_ln1057_reg_109 == 1'd0));
end

assign grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg;

assign icmp_ln1057_fu_72_p2 = ((p_read1 == 21'd0) ? 1'b1 : 1'b0);

assign ldata1_din = grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_din;

assign m_axi_data_AWADDR = 64'd0;

assign m_axi_data_AWBURST = 2'd0;

assign m_axi_data_AWCACHE = 4'd0;

assign m_axi_data_AWID = 1'd0;

assign m_axi_data_AWLEN = 32'd0;

assign m_axi_data_AWLOCK = 2'd0;

assign m_axi_data_AWPROT = 3'd0;

assign m_axi_data_AWQOS = 4'd0;

assign m_axi_data_AWREGION = 4'd0;

assign m_axi_data_AWSIZE = 3'd0;

assign m_axi_data_AWUSER = 1'd0;

assign m_axi_data_AWVALID = 1'b0;

assign m_axi_data_BREADY = 1'b0;

assign m_axi_data_WDATA = 32'd0;

assign m_axi_data_WID = 1'd0;

assign m_axi_data_WLAST = 1'b0;

assign m_axi_data_WSTRB = 4'd0;

assign m_axi_data_WUSER = 1'd0;

assign m_axi_data_WVALID = 1'b0;

assign sext_ln952_fu_88_p1 = trunc_ln_fu_78_p4;

assign trunc_ln_fu_78_p4 = {{p_read[63:2]}};

assign zext_ln952_fu_99_p1 = p_read1;

endmodule //reversi_accel_Axi2AxiStream
