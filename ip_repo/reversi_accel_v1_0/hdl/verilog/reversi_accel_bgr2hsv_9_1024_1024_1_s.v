// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_bgr2hsv_9_1024_1024_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        mat_blur_4229_dout,
        mat_blur_4229_empty_n,
        mat_blur_4229_read,
        mat_hsv_4230_din,
        mat_hsv_4230_full_n,
        mat_hsv_4230_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state15 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [23:0] mat_blur_4229_dout;
input   mat_blur_4229_empty_n;
output   mat_blur_4229_read;
output  [23:0] mat_hsv_4230_din;
input   mat_hsv_4230_full_n;
output   mat_hsv_4230_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_blur_4229_read;
reg mat_hsv_4230_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] xf_cv_icvSaturate8u_cv_address0;
reg    xf_cv_icvSaturate8u_cv_ce0;
wire   [7:0] xf_cv_icvSaturate8u_cv_q0;
wire   [9:0] xf_cv_icvSaturate8u_cv_address1;
reg    xf_cv_icvSaturate8u_cv_ce1;
wire   [7:0] xf_cv_icvSaturate8u_cv_q1;
wire   [9:0] xf_cv_icvSaturate8u_cv_address2;
reg    xf_cv_icvSaturate8u_cv_ce2;
wire   [7:0] xf_cv_icvSaturate8u_cv_q2;
wire   [9:0] xf_cv_icvSaturate8u_cv_address3;
reg    xf_cv_icvSaturate8u_cv_ce3;
wire   [7:0] xf_cv_icvSaturate8u_cv_q3;
wire   [7:0] void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_address0;
reg    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0;
wire   [31:0] void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_q0;
wire   [7:0] void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_address0;
reg    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0;
wire   [31:0] void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_q0;
reg    mat_blur_4229_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    mat_hsv_4230_blk_n;
reg    ap_enable_reg_pp0_iter11;
wire   [63:0] grp_fu_224_p2;
reg   [63:0] bound_reg_669;
wire    ap_CS_fsm_state2;
wire   [7:0] b_V_fu_254_p1;
reg   [7:0] b_V_reg_677;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
reg    ap_block_state14_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] b_V_reg_677_pp0_iter2_reg;
reg   [7:0] b_V_reg_677_pp0_iter3_reg;
reg   [7:0] b_V_reg_677_pp0_iter4_reg;
reg   [7:0] g_V_reg_684;
reg   [7:0] g_V_reg_684_pp0_iter2_reg;
reg   [7:0] g_V_reg_684_pp0_iter3_reg;
reg   [7:0] g_V_reg_684_pp0_iter4_reg;
reg   [7:0] r_V_reg_690;
reg   [7:0] r_V_reg_690_pp0_iter2_reg;
reg   [7:0] r_V_reg_690_pp0_iter3_reg;
wire   [8:0] zext_ln123_fu_278_p1;
reg   [8:0] zext_ln123_reg_696;
reg   [8:0] zext_ln123_reg_696_pp0_iter3_reg;
reg   [8:0] zext_ln123_reg_696_pp0_iter4_reg;
reg   [8:0] zext_ln123_reg_696_pp0_iter5_reg;
wire   [8:0] zext_ln1526_fu_281_p1;
reg   [8:0] zext_ln1526_reg_703;
reg   [8:0] zext_ln1526_reg_703_pp0_iter3_reg;
reg   [8:0] zext_ln1526_reg_703_pp0_iter4_reg;
reg   [8:0] zext_ln1526_reg_703_pp0_iter5_reg;
reg   [7:0] xf_cv_icvSaturate8u_cv_load_reg_719;
reg    ap_enable_reg_pp0_iter3;
reg   [7:0] xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg;
wire   [8:0] v_3_fu_322_p2;
reg   [8:0] v_3_reg_724;
wire   [7:0] vmin_V_fu_327_p2;
reg   [7:0] vmin_V_reg_729;
reg   [7:0] vmin_V_reg_729_pp0_iter4_reg;
reg   [7:0] vmin_V_reg_729_pp0_iter5_reg;
wire   [9:0] zext_ln123_1_fu_332_p1;
reg   [9:0] zext_ln123_1_reg_735;
wire   [9:0] zext_ln1526_1_fu_335_p1;
reg   [9:0] zext_ln1526_1_reg_740;
wire   [8:0] zext_ln225_1_fu_358_p1;
reg   [8:0] zext_ln225_1_reg_750;
reg   [8:0] zext_ln225_1_reg_750_pp0_iter5_reg;
wire   [9:0] v_fu_382_p2;
reg   [9:0] v_reg_761;
reg   [7:0] xf_cv_icvSaturate8u_cv_load_3_reg_766;
reg    ap_enable_reg_pp0_iter5;
wire   [7:0] add_ln223_1_fu_392_p2;
reg   [7:0] add_ln223_1_reg_771;
reg   [7:0] add_ln223_1_reg_771_pp0_iter6_reg;
reg   [7:0] add_ln223_1_reg_771_pp0_iter7_reg;
reg   [7:0] add_ln223_1_reg_771_pp0_iter8_reg;
reg   [7:0] add_ln223_1_reg_771_pp0_iter9_reg;
reg   [7:0] add_ln223_1_reg_771_pp0_iter10_reg;
wire   [0:0] vr_fu_397_p2;
reg   [0:0] vr_reg_777;
reg   [0:0] vr_reg_777_pp0_iter6_reg;
wire   [0:0] vg_fu_405_p2;
reg   [0:0] vg_reg_783;
wire   [7:0] diff_V_fu_415_p2;
reg   [7:0] diff_V_reg_789;
wire   [8:0] ret_244_fu_431_p2;
reg   [8:0] ret_244_reg_799;
wire   [12:0] add_ln157_2_fu_520_p2;
reg   [12:0] add_ln157_2_reg_804;
wire   [7:0] add_ln161_fu_608_p2;
reg   [7:0] add_ln161_reg_829;
reg   [7:0] op_assign_1_reg_834;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln128_fu_238_p2;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
wire   [63:0] zext_ln573_125_fu_296_p1;
wire   [63:0] zext_ln573_126_fu_313_p1;
wire  signed [63:0] sext_ln573_fu_350_p1;
wire   [63:0] zext_ln573_127_fu_373_p1;
wire   [63:0] zext_ln156_fu_427_p1;
wire   [63:0] zext_ln573_fu_526_p1;
reg   [63:0] indvar_flatten_fu_112;
wire   [63:0] add_ln128_fu_243_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_224_p0;
wire   [31:0] grp_fu_224_p1;
wire   [8:0] ret_240_fu_284_p2;
wire   [8:0] add_ln1525_fu_290_p2;
wire   [8:0] ret_242_fu_301_p2;
wire   [8:0] ret_232_fu_307_p2;
wire   [8:0] zext_ln147_fu_318_p1;
wire   [9:0] ret_241_fu_338_p2;
wire   [9:0] ret_fu_344_p2;
wire   [8:0] zext_ln225_fu_355_p1;
wire   [8:0] ret_243_fu_361_p2;
wire   [8:0] ret_234_fu_367_p2;
wire   [9:0] zext_ln148_fu_378_p1;
wire   [7:0] add_ln223_fu_387_p2;
wire   [9:0] zext_ln1049_fu_402_p1;
wire   [7:0] sub_ln223_fu_411_p2;
wire   [8:0] ret_238_fu_435_p2;
wire   [8:0] shl_ln_fu_443_p3;
wire   [10:0] zext_ln157_fu_451_p1;
wire  signed [10:0] sext_ln157_fu_439_p1;
wire   [10:0] add_ln157_fu_455_p2;
wire   [10:0] select_ln126_1_fu_420_p3;
wire   [10:0] and_ln157_fu_461_p2;
wire   [0:0] xor_ln157_1_fu_471_p2;
wire   [8:0] ret_239_fu_484_p2;
wire   [9:0] shl_ln157_1_fu_492_p3;
wire   [11:0] zext_ln157_1_fu_500_p1;
wire  signed [11:0] sext_ln157_2_fu_488_p1;
wire   [11:0] add_ln157_1_fu_504_p2;
wire   [11:0] select_ln1526_1_fu_476_p3;
wire   [11:0] and_ln157_1_fu_510_p2;
wire  signed [12:0] sext_ln157_3_fu_516_p1;
wire  signed [12:0] sext_ln157_1_fu_467_p1;
wire   [8:0] select_ln126_fu_531_p3;
wire  signed [8:0] ret_237_fu_545_p2;
wire   [0:0] xor_ln157_fu_554_p2;
wire   [12:0] select_ln1526_fu_559_p3;
wire  signed [12:0] and_ln157_2_fu_567_p2;
wire   [16:0] trunc_ln158_fu_576_p1;
wire  signed [29:0] tmp_fu_584_p1;
wire   [29:0] grp_fu_640_p4;
wire  signed [29:0] trunc_ln159_1_fu_591_p1;
wire   [0:0] tmp_fu_584_p3;
wire   [7:0] select_ln159_fu_600_p3;
wire   [7:0] trunc_ln159_1_fu_591_p4;
wire  signed [19:0] op_assign_1_fu_614_p1;
wire   [19:0] grp_fu_631_p3;
wire  signed [19:0] grp_fu_631_p0;
wire   [7:0] grp_fu_631_p1;
wire   [11:0] grp_fu_631_p2;
wire   [16:0] grp_fu_640_p2;
wire   [11:0] grp_fu_640_p3;
reg    grp_fu_224_ce;
reg    grp_fu_631_ce;
reg    grp_fu_640_ce;
wire    ap_CS_fsm_state15;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_224_p00;
wire   [63:0] grp_fu_224_p10;
wire   [19:0] grp_fu_631_p10;
wire   [29:0] grp_fu_640_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

reversi_accel_bgr2hsv_9_1024_1024_1_s_xf_cv_icvSaturate8u_cv #(
    .DataWidth( 8 ),
    .AddressRange( 769 ),
    .AddressWidth( 10 ))
xf_cv_icvSaturate8u_cv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xf_cv_icvSaturate8u_cv_address0),
    .ce0(xf_cv_icvSaturate8u_cv_ce0),
    .q0(xf_cv_icvSaturate8u_cv_q0),
    .address1(xf_cv_icvSaturate8u_cv_address1),
    .ce1(xf_cv_icvSaturate8u_cv_ce1),
    .q1(xf_cv_icvSaturate8u_cv_q1),
    .address2(xf_cv_icvSaturate8u_cv_address2),
    .ce2(xf_cv_icvSaturate8u_cv_ce2),
    .q2(xf_cv_icvSaturate8u_cv_q2),
    .address3(xf_cv_icvSaturate8u_cv_address3),
    .ce3(xf_cv_icvSaturate8u_cv_ce3),
    .q3(xf_cv_icvSaturate8u_cv_q3)
);

reversi_accel_bgr2hsv_9_1024_1024_1_s_void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_address0),
    .ce0(void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0),
    .q0(void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_q0)
);

reversi_accel_bgr2hsv_9_1024_1024_1_s_void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_cud #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_address0),
    .ce0(void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0),
    .q0(void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_q0)
);

reversi_accel_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_224_p0),
    .din1(grp_fu_224_p1),
    .ce(grp_fu_224_ce),
    .dout(grp_fu_224_p2)
);

reversi_accel_mac_muladd_20s_8ns_12ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mac_muladd_20s_8ns_12ns_20_4_1_U177(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_631_p0),
    .din1(grp_fu_631_p1),
    .din2(grp_fu_631_p2),
    .ce(grp_fu_631_ce),
    .dout(grp_fu_631_p3)
);

reversi_accel_ama_addmuladd_13s_9s_17ns_12ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 17 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 30 ))
ama_addmuladd_13s_9s_17ns_12ns_30_4_1_U178(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln157_2_fu_567_p2),
    .din1(ret_237_fu_545_p2),
    .din2(grp_fu_640_p2),
    .din3(grp_fu_640_p3),
    .ce(grp_fu_640_ce),
    .dout(grp_fu_640_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_112 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln128_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_112 <= add_ln128_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln157_2_reg_804 <= add_ln157_2_fu_520_p2;
        add_ln161_reg_829 <= add_ln161_fu_608_p2;
        add_ln223_1_reg_771 <= add_ln223_1_fu_392_p2;
        add_ln223_1_reg_771_pp0_iter10_reg <= add_ln223_1_reg_771_pp0_iter9_reg;
        add_ln223_1_reg_771_pp0_iter6_reg <= add_ln223_1_reg_771;
        add_ln223_1_reg_771_pp0_iter7_reg <= add_ln223_1_reg_771_pp0_iter6_reg;
        add_ln223_1_reg_771_pp0_iter8_reg <= add_ln223_1_reg_771_pp0_iter7_reg;
        add_ln223_1_reg_771_pp0_iter9_reg <= add_ln223_1_reg_771_pp0_iter8_reg;
        b_V_reg_677_pp0_iter2_reg <= b_V_reg_677;
        b_V_reg_677_pp0_iter3_reg <= b_V_reg_677_pp0_iter2_reg;
        b_V_reg_677_pp0_iter4_reg <= b_V_reg_677_pp0_iter3_reg;
        diff_V_reg_789 <= diff_V_fu_415_p2;
        g_V_reg_684_pp0_iter2_reg <= g_V_reg_684;
        g_V_reg_684_pp0_iter3_reg <= g_V_reg_684_pp0_iter2_reg;
        g_V_reg_684_pp0_iter4_reg <= g_V_reg_684_pp0_iter3_reg;
        op_assign_1_reg_834 <= {{op_assign_1_fu_614_p1[19:12]}};
        r_V_reg_690_pp0_iter2_reg <= r_V_reg_690;
        r_V_reg_690_pp0_iter3_reg <= r_V_reg_690_pp0_iter2_reg;
        ret_244_reg_799 <= ret_244_fu_431_p2;
        v_3_reg_724 <= v_3_fu_322_p2;
        v_reg_761 <= v_fu_382_p2;
        vg_reg_783 <= vg_fu_405_p2;
        vmin_V_reg_729 <= vmin_V_fu_327_p2;
        vmin_V_reg_729_pp0_iter4_reg <= vmin_V_reg_729;
        vmin_V_reg_729_pp0_iter5_reg <= vmin_V_reg_729_pp0_iter4_reg;
        vr_reg_777 <= vr_fu_397_p2;
        vr_reg_777_pp0_iter6_reg <= vr_reg_777;
        xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg <= xf_cv_icvSaturate8u_cv_load_reg_719;
        zext_ln123_1_reg_735[8 : 0] <= zext_ln123_1_fu_332_p1[8 : 0];
        zext_ln123_reg_696[7 : 0] <= zext_ln123_fu_278_p1[7 : 0];
        zext_ln123_reg_696_pp0_iter3_reg[7 : 0] <= zext_ln123_reg_696[7 : 0];
        zext_ln123_reg_696_pp0_iter4_reg[7 : 0] <= zext_ln123_reg_696_pp0_iter3_reg[7 : 0];
        zext_ln123_reg_696_pp0_iter5_reg[7 : 0] <= zext_ln123_reg_696_pp0_iter4_reg[7 : 0];
        zext_ln1526_1_reg_740[7 : 0] <= zext_ln1526_1_fu_335_p1[7 : 0];
        zext_ln1526_reg_703[7 : 0] <= zext_ln1526_fu_281_p1[7 : 0];
        zext_ln1526_reg_703_pp0_iter3_reg[7 : 0] <= zext_ln1526_reg_703[7 : 0];
        zext_ln1526_reg_703_pp0_iter4_reg[7 : 0] <= zext_ln1526_reg_703_pp0_iter3_reg[7 : 0];
        zext_ln1526_reg_703_pp0_iter5_reg[7 : 0] <= zext_ln1526_reg_703_pp0_iter4_reg[7 : 0];
        zext_ln225_1_reg_750[7 : 0] <= zext_ln225_1_fu_358_p1[7 : 0];
        zext_ln225_1_reg_750_pp0_iter5_reg[7 : 0] <= zext_ln225_1_reg_750[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_V_reg_677 <= b_V_fu_254_p1;
        g_V_reg_684 <= {{mat_blur_4229_dout[15:8]}};
        r_V_reg_690 <= {{mat_blur_4229_dout[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_669 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        xf_cv_icvSaturate8u_cv_load_3_reg_766 <= xf_cv_icvSaturate8u_cv_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        xf_cv_icvSaturate8u_cv_load_reg_719 <= xf_cv_icvSaturate8u_cv_q3;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln128_fu_238_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_631_ce = 1'b1;
    end else begin
        grp_fu_631_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_640_ce = 1'b1;
    end else begin
        grp_fu_640_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_blur_4229_blk_n = mat_blur_4229_empty_n;
    end else begin
        mat_blur_4229_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_blur_4229_read = 1'b1;
    end else begin
        mat_blur_4229_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mat_hsv_4230_blk_n = mat_hsv_4230_full_n;
    end else begin
        mat_hsv_4230_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mat_hsv_4230_write = 1'b1;
    end else begin
        mat_hsv_4230_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0 = 1'b1;
    end else begin
        void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0 = 1'b1;
    end else begin
        void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        xf_cv_icvSaturate8u_cv_ce0 = 1'b1;
    end else begin
        xf_cv_icvSaturate8u_cv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        xf_cv_icvSaturate8u_cv_ce1 = 1'b1;
    end else begin
        xf_cv_icvSaturate8u_cv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        xf_cv_icvSaturate8u_cv_ce2 = 1'b1;
    end else begin
        xf_cv_icvSaturate8u_cv_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        xf_cv_icvSaturate8u_cv_ce3 = 1'b1;
    end else begin
        xf_cv_icvSaturate8u_cv_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln128_fu_238_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln128_fu_238_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln128_fu_243_p2 = (indvar_flatten_fu_112 + 64'd1);

assign add_ln1525_fu_290_p2 = (ret_240_fu_284_p2 + zext_ln1526_fu_281_p1);

assign add_ln157_1_fu_504_p2 = ($signed(zext_ln157_1_fu_500_p1) + $signed(sext_ln157_2_fu_488_p1));

assign add_ln157_2_fu_520_p2 = ($signed(sext_ln157_3_fu_516_p1) + $signed(sext_ln157_1_fu_467_p1));

assign add_ln157_fu_455_p2 = ($signed(zext_ln157_fu_451_p1) + $signed(sext_ln157_fu_439_p1));

assign add_ln161_fu_608_p2 = (select_ln159_fu_600_p3 + trunc_ln159_1_fu_591_p4);

assign add_ln223_1_fu_392_p2 = (add_ln223_fu_387_p2 + xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg);

assign add_ln223_fu_387_p2 = (xf_cv_icvSaturate8u_cv_q1 + b_V_reg_677_pp0_iter4_reg);

assign and_ln157_1_fu_510_p2 = (select_ln1526_1_fu_476_p3 & add_ln157_1_fu_504_p2);

assign and_ln157_2_fu_567_p2 = (select_ln1526_fu_559_p3 & add_ln157_2_reg_804);

assign and_ln157_fu_461_p2 = (select_ln126_1_fu_420_p3 & add_ln157_fu_455_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (mat_hsv_4230_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (mat_blur_4229_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (mat_hsv_4230_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (mat_blur_4229_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (mat_hsv_4230_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (mat_blur_4229_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter11 = (mat_hsv_4230_full_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (mat_blur_4229_empty_n == 1'b0);
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_V_fu_254_p1 = mat_blur_4229_dout[7:0];

assign diff_V_fu_415_p2 = (sub_ln223_fu_411_p2 + add_ln223_1_reg_771);

assign grp_fu_224_p0 = grp_fu_224_p00;

assign grp_fu_224_p00 = p_read;

assign grp_fu_224_p1 = grp_fu_224_p10;

assign grp_fu_224_p10 = p_read1;

assign grp_fu_631_p0 = void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_q0[19:0];

assign grp_fu_631_p1 = grp_fu_631_p10;

assign grp_fu_631_p10 = diff_V_reg_789;

assign grp_fu_631_p2 = 20'd2048;

assign grp_fu_640_p2 = grp_fu_640_p20;

assign grp_fu_640_p20 = trunc_ln158_fu_576_p1;

assign grp_fu_640_p3 = 30'd2048;

assign icmp_ln128_fu_238_p2 = ((indvar_flatten_fu_112 == bound_reg_669) ? 1'b1 : 1'b0);

assign mat_hsv_4230_din = {{{add_ln223_1_reg_771_pp0_iter10_reg}, {op_assign_1_reg_834}}, {add_ln161_reg_829}};

assign op_assign_1_fu_614_p1 = grp_fu_631_p3;

assign ret_232_fu_307_p2 = (ret_242_fu_301_p2 ^ 9'd256);

assign ret_234_fu_367_p2 = (ret_243_fu_361_p2 ^ 9'd256);

assign ret_237_fu_545_p2 = (select_ln126_fu_531_p3 & ret_244_reg_799);

assign ret_238_fu_435_p2 = (zext_ln123_reg_696_pp0_iter5_reg - zext_ln225_1_reg_750_pp0_iter5_reg);

assign ret_239_fu_484_p2 = (zext_ln225_1_reg_750_pp0_iter5_reg - zext_ln1526_reg_703_pp0_iter5_reg);

assign ret_240_fu_284_p2 = ($signed(9'd256) - $signed(zext_ln123_fu_278_p1));

assign ret_241_fu_338_p2 = (zext_ln1526_1_fu_335_p1 - zext_ln123_1_fu_332_p1);

assign ret_242_fu_301_p2 = (zext_ln123_fu_278_p1 - zext_ln1526_fu_281_p1);

assign ret_243_fu_361_p2 = (zext_ln225_fu_355_p1 - zext_ln225_1_fu_358_p1);

assign ret_244_fu_431_p2 = (zext_ln1526_reg_703_pp0_iter5_reg - zext_ln123_reg_696_pp0_iter5_reg);

assign ret_fu_344_p2 = (ret_241_fu_338_p2 + 10'd256);

assign select_ln126_1_fu_420_p3 = ((vg_reg_783[0:0] == 1'b1) ? 11'd2047 : 11'd0);

assign select_ln126_fu_531_p3 = ((vr_reg_777_pp0_iter6_reg[0:0] == 1'b1) ? 9'd511 : 9'd0);

assign select_ln1526_1_fu_476_p3 = ((xor_ln157_1_fu_471_p2[0:0] == 1'b1) ? 12'd4095 : 12'd0);

assign select_ln1526_fu_559_p3 = ((xor_ln157_fu_554_p2[0:0] == 1'b1) ? 13'd8191 : 13'd0);

assign select_ln159_fu_600_p3 = ((tmp_fu_584_p3[0:0] == 1'b1) ? 8'd180 : 8'd0);

assign sext_ln157_1_fu_467_p1 = $signed(and_ln157_fu_461_p2);

assign sext_ln157_2_fu_488_p1 = $signed(ret_239_fu_484_p2);

assign sext_ln157_3_fu_516_p1 = $signed(and_ln157_1_fu_510_p2);

assign sext_ln157_fu_439_p1 = $signed(ret_238_fu_435_p2);

assign sext_ln573_fu_350_p1 = $signed(ret_fu_344_p2);

assign shl_ln157_1_fu_492_p3 = {{diff_V_fu_415_p2}, {2'd0}};

assign shl_ln_fu_443_p3 = {{diff_V_fu_415_p2}, {1'd0}};

assign sub_ln223_fu_411_p2 = (xf_cv_icvSaturate8u_cv_load_3_reg_766 - vmin_V_reg_729_pp0_iter5_reg);

assign tmp_fu_584_p1 = grp_fu_640_p4;

assign tmp_fu_584_p3 = tmp_fu_584_p1[32'd29];

assign trunc_ln158_fu_576_p1 = void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_q0[16:0];

assign trunc_ln159_1_fu_591_p1 = grp_fu_640_p4;

assign trunc_ln159_1_fu_591_p4 = {{trunc_ln159_1_fu_591_p1[19:12]}};

assign v_3_fu_322_p2 = (zext_ln147_fu_318_p1 + zext_ln123_reg_696);

assign v_fu_382_p2 = (zext_ln123_1_reg_735 + zext_ln148_fu_378_p1);

assign vg_fu_405_p2 = ((v_fu_382_p2 == zext_ln1049_fu_402_p1) ? 1'b1 : 1'b0);

assign vmin_V_fu_327_p2 = (b_V_reg_677_pp0_iter2_reg - xf_cv_icvSaturate8u_cv_q2);

assign void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_address0 = zext_ln573_fu_526_p1;

assign void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_address0 = zext_ln156_fu_427_p1;

assign vr_fu_397_p2 = ((v_fu_382_p2 == zext_ln1526_1_reg_740) ? 1'b1 : 1'b0);

assign xf_cv_icvSaturate8u_cv_address0 = zext_ln573_127_fu_373_p1;

assign xf_cv_icvSaturate8u_cv_address1 = sext_ln573_fu_350_p1;

assign xf_cv_icvSaturate8u_cv_address2 = zext_ln573_126_fu_313_p1;

assign xf_cv_icvSaturate8u_cv_address3 = zext_ln573_125_fu_296_p1;

assign xor_ln157_1_fu_471_p2 = (vg_reg_783 ^ 1'd1);

assign xor_ln157_fu_554_p2 = (vr_reg_777_pp0_iter6_reg ^ 1'd1);

assign zext_ln1049_fu_402_p1 = g_V_reg_684_pp0_iter4_reg;

assign zext_ln123_1_fu_332_p1 = v_3_reg_724;

assign zext_ln123_fu_278_p1 = b_V_reg_677;

assign zext_ln147_fu_318_p1 = xf_cv_icvSaturate8u_cv_q3;

assign zext_ln148_fu_378_p1 = xf_cv_icvSaturate8u_cv_q1;

assign zext_ln1526_1_fu_335_p1 = r_V_reg_690_pp0_iter3_reg;

assign zext_ln1526_fu_281_p1 = g_V_reg_684;

assign zext_ln156_fu_427_p1 = v_reg_761;

assign zext_ln157_1_fu_500_p1 = shl_ln157_1_fu_492_p3;

assign zext_ln157_fu_451_p1 = shl_ln_fu_443_p3;

assign zext_ln225_1_fu_358_p1 = r_V_reg_690_pp0_iter3_reg;

assign zext_ln225_fu_355_p1 = vmin_V_reg_729;

assign zext_ln573_125_fu_296_p1 = add_ln1525_fu_290_p2;

assign zext_ln573_126_fu_313_p1 = ret_232_fu_307_p2;

assign zext_ln573_127_fu_373_p1 = ret_234_fu_367_p2;

assign zext_ln573_fu_526_p1 = diff_V_fu_415_p2;

always @ (posedge ap_clk) begin
    zext_ln123_reg_696[8] <= 1'b0;
    zext_ln123_reg_696_pp0_iter3_reg[8] <= 1'b0;
    zext_ln123_reg_696_pp0_iter4_reg[8] <= 1'b0;
    zext_ln123_reg_696_pp0_iter5_reg[8] <= 1'b0;
    zext_ln1526_reg_703[8] <= 1'b0;
    zext_ln1526_reg_703_pp0_iter3_reg[8] <= 1'b0;
    zext_ln1526_reg_703_pp0_iter4_reg[8] <= 1'b0;
    zext_ln1526_reg_703_pp0_iter5_reg[8] <= 1'b0;
    zext_ln123_1_reg_735[9] <= 1'b0;
    zext_ln1526_1_reg_740[9:8] <= 2'b00;
    zext_ln225_1_reg_750[8] <= 1'b0;
    zext_ln225_1_reg_750_pp0_iter5_reg[8] <= 1'b0;
end

endmodule //reversi_accel_bgr2hsv_9_1024_1024_1_s
