// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mat_hsv1_4231_dout,
        mat_hsv1_4231_empty_n,
        mat_hsv1_4231_read,
        mat_green1_4233_din,
        mat_green1_4233_full_n,
        mat_green1_4233_write,
        width,
        p_lower_thresh_V_load_cast,
        p_lower_thresh_V_load_1_cast,
        p_lower_thresh_V_load_2_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] mat_hsv1_4231_dout;
input   mat_hsv1_4231_empty_n;
output   mat_hsv1_4231_read;
output  [7:0] mat_green1_4233_din;
input   mat_green1_4233_full_n;
output   mat_green1_4233_write;
input  [15:0] width;
input  [6:0] p_lower_thresh_V_load_cast;
input  [6:0] p_lower_thresh_V_load_1_cast;
input  [6:0] p_lower_thresh_V_load_2_cast;

reg ap_idle;
reg mat_hsv1_4231_read;
reg mat_green1_4233_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mat_hsv1_4231_blk_n;
wire    ap_block_pp0_stage0;
reg    mat_green1_4233_blk_n;
wire   [7:0] p_lower_thresh_V_load_2_cast_cast_fu_105_p1;
reg   [7:0] p_lower_thresh_V_load_2_cast_cast_reg_235;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] p_lower_thresh_V_load_1_cast_cast_fu_109_p1;
reg   [7:0] p_lower_thresh_V_load_1_cast_cast_reg_240;
wire   [7:0] p_lower_thresh_V_load_cast_cast_fu_113_p1;
reg   [7:0] p_lower_thresh_V_load_cast_cast_reg_245;
wire   [0:0] icmp_ln1061_fu_146_p2;
reg   [0:0] icmp_ln1061_reg_254;
wire   [0:0] icmp_ln1069_fu_151_p2;
reg   [0:0] icmp_ln1069_reg_259;
wire   [0:0] icmp_ln1061_1_fu_167_p2;
reg   [0:0] icmp_ln1061_1_reg_264;
wire   [0:0] icmp_ln1061_2_fu_182_p2;
reg   [0:0] icmp_ln1061_2_reg_269;
reg   [15:0] j_V_fu_64;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_j_V_load;
wire   [15:0] add_ln1057_fu_131_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_val1_V_fu_142_p1;
wire   [7:0] tmp_val1_V_1_fu_157_p4;
wire   [7:0] tmp_val1_V_2_fu_172_p4;
wire   [0:0] xor_ln1061_fu_187_p2;
wire   [0:0] xor_ln1061_2_fu_197_p2;
wire   [0:0] xor_ln1061_1_fu_192_p2;
wire   [0:0] and_ln1527_1_fu_207_p2;
wire   [0:0] and_ln1527_fu_202_p2;
wire   [0:0] ret_fu_213_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

reversi_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln112_fu_125_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_V_fu_64 <= add_ln1057_fu_131_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_V_fu_64 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln1061_1_reg_264 <= icmp_ln1061_1_fu_167_p2;
        icmp_ln1061_2_reg_269 <= icmp_ln1061_2_fu_182_p2;
        icmp_ln1061_reg_254 <= icmp_ln1061_fu_146_p2;
        icmp_ln1069_reg_259 <= icmp_ln1069_fu_151_p2;
        p_lower_thresh_V_load_1_cast_cast_reg_240[6 : 0] <= p_lower_thresh_V_load_1_cast_cast_fu_109_p1[6 : 0];
        p_lower_thresh_V_load_2_cast_cast_reg_235[6 : 0] <= p_lower_thresh_V_load_2_cast_cast_fu_105_p1[6 : 0];
        p_lower_thresh_V_load_cast_cast_reg_245[6 : 0] <= p_lower_thresh_V_load_cast_cast_fu_113_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln112_fu_125_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_V_load = 16'd0;
    end else begin
        ap_sig_allocacmp_j_V_load = j_V_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mat_green1_4233_blk_n = mat_green1_4233_full_n;
    end else begin
        mat_green1_4233_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mat_green1_4233_write = 1'b1;
    end else begin
        mat_green1_4233_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_hsv1_4231_blk_n = mat_hsv1_4231_empty_n;
    end else begin
        mat_hsv1_4231_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_hsv1_4231_read = 1'b1;
    end else begin
        mat_hsv1_4231_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1057_fu_131_p2 = (ap_sig_allocacmp_j_V_load + 16'd1);

assign and_ln1527_1_fu_207_p2 = (xor_ln1061_2_fu_197_p2 & xor_ln1061_1_fu_192_p2);

assign and_ln1527_fu_202_p2 = (xor_ln1061_fu_187_p2 & icmp_ln1069_reg_259);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((mat_green1_4233_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((mat_hsv1_4231_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((mat_green1_4233_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((mat_hsv1_4231_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((mat_green1_4233_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((mat_hsv1_4231_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (mat_hsv1_4231_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (mat_green1_4233_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1061_1_fu_167_p2 = ((tmp_val1_V_1_fu_157_p4 < p_lower_thresh_V_load_1_cast_cast_reg_240) ? 1'b1 : 1'b0);

assign icmp_ln1061_2_fu_182_p2 = ((tmp_val1_V_2_fu_172_p4 < p_lower_thresh_V_load_2_cast_cast_reg_235) ? 1'b1 : 1'b0);

assign icmp_ln1061_fu_146_p2 = ((tmp_val1_V_fu_142_p1 < p_lower_thresh_V_load_cast_cast_reg_245) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_151_p2 = ((tmp_val1_V_fu_142_p1 < 8'd91) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_125_p2 = ((ap_sig_allocacmp_j_V_load == width) ? 1'b1 : 1'b0);

assign mat_green1_4233_din = ((ret_fu_213_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign p_lower_thresh_V_load_1_cast_cast_fu_109_p1 = p_lower_thresh_V_load_1_cast;

assign p_lower_thresh_V_load_2_cast_cast_fu_105_p1 = p_lower_thresh_V_load_2_cast;

assign p_lower_thresh_V_load_cast_cast_fu_113_p1 = p_lower_thresh_V_load_cast;

assign ret_fu_213_p2 = (and_ln1527_fu_202_p2 & and_ln1527_1_fu_207_p2);

assign tmp_val1_V_1_fu_157_p4 = {{mat_hsv1_4231_dout[15:8]}};

assign tmp_val1_V_2_fu_172_p4 = {{mat_hsv1_4231_dout[23:16]}};

assign tmp_val1_V_fu_142_p1 = mat_hsv1_4231_dout[7:0];

assign xor_ln1061_1_fu_192_p2 = (icmp_ln1061_1_reg_264 ^ 1'd1);

assign xor_ln1061_2_fu_197_p2 = (icmp_ln1061_2_reg_269 ^ 1'd1);

assign xor_ln1061_fu_187_p2 = (icmp_ln1061_reg_254 ^ 1'd1);

always @ (posedge ap_clk) begin
    p_lower_thresh_V_load_2_cast_cast_reg_235[7] <= 1'b0;
    p_lower_thresh_V_load_1_cast_cast_reg_240[7] <= 1'b0;
    p_lower_thresh_V_load_cast_cast_reg_245[7] <= 1'b0;
end

endmodule //reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop
