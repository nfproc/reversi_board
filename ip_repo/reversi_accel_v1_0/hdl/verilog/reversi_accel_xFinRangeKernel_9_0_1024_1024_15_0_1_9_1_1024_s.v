// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mat_hsv1_4231_dout,
        mat_hsv1_4231_empty_n,
        mat_hsv1_4231_read,
        mat_green1_4233_din,
        mat_green1_4233_full_n,
        mat_green1_4233_write,
        lower_thresh_address0,
        lower_thresh_ce0,
        lower_thresh_q0,
        height,
        width
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] mat_hsv1_4231_dout;
input   mat_hsv1_4231_empty_n;
output   mat_hsv1_4231_read;
output  [7:0] mat_green1_4233_din;
input   mat_green1_4233_full_n;
output   mat_green1_4233_write;
output  [1:0] lower_thresh_address0;
output   lower_thresh_ce0;
input  [6:0] lower_thresh_q0;
input  [15:0] height;
input  [15:0] width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_hsv1_4231_read;
reg mat_green1_4233_write;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire   [6:0] p_lower_thresh_V_q0;
reg   [6:0] p_lower_thresh_V_load_reg_159;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [6:0] p_lower_thresh_V_q1;
reg   [6:0] p_lower_thresh_V_load_1_reg_184;
reg   [6:0] p_lower_thresh_V_load_2_reg_189;
reg   [1:0] p_lower_thresh_V_address0;
reg    p_lower_thresh_V_ce0;
reg    p_lower_thresh_V_we0;
wire   [1:0] p_lower_thresh_V_address1;
reg    p_lower_thresh_V_ce1;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_done;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_idle;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_ready;
wire   [1:0] grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_lower_thresh_address0;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_lower_thresh_ce0;
wire   [1:0] grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_address0;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_ce0;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_we0;
wire   [6:0] grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_d0;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_done;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_idle;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_ready;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_hsv1_4231_read;
wire   [7:0] grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_green1_4233_din;
wire    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_green1_4233_write;
reg    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln1057_fu_131_p2;
wire    ap_CS_fsm_state7;
reg   [12:0] i_V_fu_46;
wire   [12:0] i_V_4_fu_136_p2;
wire   [15:0] zext_ln1057_fu_127_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start_reg = 1'b0;
#0 grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start_reg = 1'b0;
end

reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_p_lower_thresh_V #(
    .DataWidth( 7 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
p_lower_thresh_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_lower_thresh_V_address0),
    .ce0(p_lower_thresh_V_ce0),
    .we0(p_lower_thresh_V_we0),
    .d0(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_d0),
    .q0(p_lower_thresh_V_q0),
    .address1(p_lower_thresh_V_address1),
    .ce1(p_lower_thresh_V_ce1),
    .q1(p_lower_thresh_V_q1)
);

reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1 grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start),
    .ap_done(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_done),
    .ap_idle(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_idle),
    .ap_ready(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_ready),
    .lower_thresh_address0(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_lower_thresh_address0),
    .lower_thresh_ce0(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_lower_thresh_ce0),
    .lower_thresh_q0(lower_thresh_q0),
    .p_lower_thresh_V_address0(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_address0),
    .p_lower_thresh_V_ce0(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_ce0),
    .p_lower_thresh_V_we0(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_we0),
    .p_lower_thresh_V_d0(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_d0)
);

reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start),
    .ap_done(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_done),
    .ap_idle(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_idle),
    .ap_ready(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_ready),
    .mat_hsv1_4231_dout(mat_hsv1_4231_dout),
    .mat_hsv1_4231_empty_n(mat_hsv1_4231_empty_n),
    .mat_hsv1_4231_read(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_hsv1_4231_read),
    .mat_green1_4233_din(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_green1_4233_din),
    .mat_green1_4233_full_n(mat_green1_4233_full_n),
    .mat_green1_4233_write(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_green1_4233_write),
    .width(width),
    .p_lower_thresh_V_load_cast(p_lower_thresh_V_load_reg_159),
    .p_lower_thresh_V_load_1_cast(p_lower_thresh_V_load_1_reg_184),
    .p_lower_thresh_V_load_2_cast(p_lower_thresh_V_load_2_reg_189)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start_reg <= 1'b1;
        end else if ((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_ready == 1'b1)) begin
            grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln1057_fu_131_p2 == 1'd1))) begin
            grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start_reg <= 1'b1;
        end else if ((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_ready == 1'b1)) begin
            grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_V_fu_46 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln1057_fu_131_p2 == 1'd1))) begin
        i_V_fu_46 <= i_V_4_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_lower_thresh_V_load_1_reg_184 <= p_lower_thresh_V_q1;
        p_lower_thresh_V_load_2_reg_189 <= p_lower_thresh_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_lower_thresh_V_load_reg_159 <= p_lower_thresh_V_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln1057_fu_131_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln1057_fu_131_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mat_green1_4233_write = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_green1_4233_write;
    end else begin
        mat_green1_4233_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mat_hsv1_4231_read = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_hsv1_4231_read;
    end else begin
        mat_hsv1_4231_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_lower_thresh_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_lower_thresh_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_lower_thresh_V_address0 = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_address0;
    end else begin
        p_lower_thresh_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        p_lower_thresh_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_lower_thresh_V_ce0 = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_ce0;
    end else begin
        p_lower_thresh_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_lower_thresh_V_ce1 = 1'b1;
    end else begin
        p_lower_thresh_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_lower_thresh_V_we0 = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_p_lower_thresh_V_we0;
    end else begin
        p_lower_thresh_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln1057_fu_131_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_ap_start_reg;

assign grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_ap_start_reg;

assign i_V_4_fu_136_p2 = (i_V_fu_46 + 13'd1);

assign icmp_ln1057_fu_131_p2 = ((zext_ln1057_fu_127_p1 < height) ? 1'b1 : 1'b0);

assign lower_thresh_address0 = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_lower_thresh_address0;

assign lower_thresh_ce0 = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_VITIS_LOOP_99_1_fu_99_lower_thresh_ce0;

assign mat_green1_4233_din = grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop_fu_107_mat_green1_4233_din;

assign p_lower_thresh_V_address1 = 64'd1;

assign zext_ln1057_fu_127_p1 = i_V_fu_46;

endmodule //reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s
