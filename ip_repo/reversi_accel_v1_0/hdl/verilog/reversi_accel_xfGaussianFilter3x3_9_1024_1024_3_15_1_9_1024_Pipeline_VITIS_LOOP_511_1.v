// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_xfGaussianFilter3x3_9_1024_1024_3_15_1_9_1024_Pipeline_VITIS_LOOP_511_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_val1_V,
        p_Val2_reload,
        p_Val2_256_reload,
        p_Val2_257_reload,
        p_Val2_258_reload,
        p_Val2_259_reload,
        p_Val2_260_reload,
        p_read,
        p_read1,
        out_val1_V_4_out,
        out_val1_V_4_out_ap_vld,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din1,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din2,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din3,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din4,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din5,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din6,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din7,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din8,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din9,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din10,
        grp_xFapplygaussian3x3_15_s_fu_581_p_din11,
        grp_xFapplygaussian3x3_15_s_fu_581_p_dout0,
        grp_xFapplygaussian3x3_15_s_fu_581_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] out_val1_V;
input  [23:0] p_Val2_reload;
input  [23:0] p_Val2_256_reload;
input  [23:0] p_Val2_257_reload;
input  [23:0] p_Val2_258_reload;
input  [23:0] p_Val2_259_reload;
input  [23:0] p_Val2_260_reload;
input  [7:0] p_read;
input  [7:0] p_read1;
output  [23:0] out_val1_V_4_out;
output   out_val1_V_4_out_ap_vld;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din1;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din2;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din3;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din4;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din5;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din6;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din7;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din8;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din9;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din10;
output  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_din11;
input  [7:0] grp_xFapplygaussian3x3_15_s_fu_581_p_dout0;
output   grp_xFapplygaussian3x3_15_s_fu_581_p_ce;

reg ap_idle;
reg out_val1_V_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln511_fu_177_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln511_reg_902;
reg   [0:0] icmp_ln511_reg_902_pp0_iter1_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter2_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter3_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter4_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter5_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter6_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter7_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter8_reg;
reg   [0:0] icmp_ln511_reg_902_pp0_iter9_reg;
reg   [4:0] k_load_reg_906;
reg   [4:0] k_load_reg_906_pp0_iter1_reg;
reg   [4:0] k_load_reg_906_pp0_iter2_reg;
reg   [4:0] k_load_reg_906_pp0_iter3_reg;
reg   [4:0] k_load_reg_906_pp0_iter4_reg;
reg   [4:0] k_load_reg_906_pp0_iter5_reg;
reg   [4:0] k_load_reg_906_pp0_iter6_reg;
reg   [4:0] k_load_reg_906_pp0_iter7_reg;
reg   [4:0] k_load_reg_906_pp0_iter8_reg;
reg   [4:0] k_load_reg_906_pp0_iter9_reg;
reg   [4:0] k_load_reg_906_pp0_iter10_reg;
wire   [4:0] or_ln512_fu_192_p2;
reg   [4:0] or_ln512_reg_933;
reg   [4:0] or_ln512_reg_933_pp0_iter1_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter2_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter3_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter4_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter5_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter6_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter7_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter8_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter9_reg;
reg   [4:0] or_ln512_reg_933_pp0_iter10_reg;
wire   [0:0] icmp_ln674_fu_198_p2;
reg   [0:0] icmp_ln674_reg_952;
wire   [4:0] sub_ln674_1_fu_204_p2;
reg   [4:0] sub_ln674_1_reg_959;
wire   [0:0] icmp_ln674_1_fu_210_p2;
reg   [0:0] icmp_ln674_1_reg_964;
wire   [4:0] sub_ln674_5_fu_216_p2;
reg   [4:0] sub_ln674_5_reg_971;
wire   [0:0] icmp_ln674_2_fu_222_p2;
reg   [0:0] icmp_ln674_2_reg_976;
wire   [4:0] sub_ln674_9_fu_228_p2;
reg   [4:0] sub_ln674_9_reg_983;
wire   [0:0] icmp_ln674_3_fu_234_p2;
reg   [0:0] icmp_ln674_3_reg_988;
wire   [4:0] sub_ln674_13_fu_240_p2;
reg   [4:0] sub_ln674_13_reg_995;
wire   [0:0] icmp_ln674_4_fu_246_p2;
reg   [0:0] icmp_ln674_4_reg_1000;
wire   [4:0] sub_ln674_17_fu_252_p2;
reg   [4:0] sub_ln674_17_reg_1007;
wire   [0:0] icmp_ln674_5_fu_258_p2;
reg   [0:0] icmp_ln674_5_reg_1012;
wire   [4:0] sub_ln674_21_fu_264_p2;
reg   [4:0] sub_ln674_21_reg_1019;
wire   [7:0] srcbuf10_V_fu_353_p1;
reg   [7:0] srcbuf10_V_reg_1024;
wire   [7:0] srcbuf11_V_fu_424_p1;
reg   [7:0] srcbuf11_V_reg_1029;
wire   [7:0] srcbuf20_V_fu_495_p1;
reg   [7:0] srcbuf20_V_reg_1034;
wire   [7:0] srcbuf21_V_fu_566_p1;
reg   [7:0] srcbuf21_V_reg_1039;
wire   [7:0] srcbuf30_V_fu_637_p1;
reg   [7:0] srcbuf30_V_reg_1044;
wire   [7:0] srcbuf31_V_fu_708_p1;
reg   [7:0] srcbuf31_V_reg_1049;
reg   [7:0] tmp_V_reg_1054;
wire   [0:0] icmp_ln414_fu_712_p2;
reg   [0:0] icmp_ln414_reg_1059;
wire   [4:0] sub_ln414_fu_716_p2;
reg   [4:0] sub_ln414_reg_1067;
reg    grp_xFapplygaussian3x3_15_s_fu_141_ap_ce;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call94;
wire    ap_block_state2_pp0_stage0_iter1_ignore_call94;
wire    ap_block_state3_pp0_stage0_iter2_ignore_call94;
wire    ap_block_state4_pp0_stage0_iter3_ignore_call94;
wire    ap_block_state5_pp0_stage0_iter4_ignore_call94;
wire    ap_block_state6_pp0_stage0_iter5_ignore_call94;
wire    ap_block_state7_pp0_stage0_iter6_ignore_call94;
wire    ap_block_state8_pp0_stage0_iter7_ignore_call94;
wire    ap_block_state9_pp0_stage0_iter8_ignore_call94;
wire    ap_block_state10_pp0_stage0_iter9_ignore_call94;
wire    ap_block_state11_pp0_stage0_iter10_ignore_call94;
wire    ap_block_state12_pp0_stage0_iter11_ignore_call94;
wire    ap_block_pp0_stage0_11001_ignoreCallOp132;
wire    ap_block_pp0_stage0;
reg   [23:0] p_Val2_s_fu_68;
wire   [23:0] p_Result_75_fu_819_p2;
wire    ap_loop_init;
reg   [1:0] i_fu_72;
reg   [1:0] ap_sig_allocacmp_i_1;
wire   [1:0] i_2_fu_183_p2;
reg   [4:0] k_fu_76;
reg   [4:0] ap_sig_allocacmp_k_load;
wire   [4:0] k_1_fu_270_p2;
wire    ap_block_pp0_stage0_01001;
wire   [4:0] sub_ln674_fu_295_p2;
wire   [4:0] sub_ln674_2_fu_299_p2;
reg   [23:0] tmp_fu_286_p4;
wire   [4:0] select_ln674_fu_303_p3;
wire   [4:0] select_ln674_2_fu_316_p3;
wire   [4:0] sub_ln674_3_fu_321_p2;
wire   [23:0] select_ln674_1_fu_310_p3;
wire   [23:0] zext_ln674_fu_327_p1;
wire   [23:0] zext_ln674_1_fu_331_p1;
wire   [23:0] lshr_ln674_fu_335_p2;
wire   [23:0] lshr_ln674_1_fu_341_p2;
wire   [23:0] p_Result_s_fu_347_p2;
wire   [4:0] sub_ln674_4_fu_366_p2;
wire   [4:0] sub_ln674_6_fu_370_p2;
reg   [23:0] tmp_65_fu_357_p4;
wire   [4:0] select_ln674_3_fu_374_p3;
wire   [4:0] select_ln674_5_fu_387_p3;
wire   [4:0] sub_ln674_7_fu_392_p2;
wire   [23:0] select_ln674_4_fu_381_p3;
wire   [23:0] zext_ln674_2_fu_398_p1;
wire   [23:0] zext_ln674_3_fu_402_p1;
wire   [23:0] lshr_ln674_2_fu_406_p2;
wire   [23:0] lshr_ln674_3_fu_412_p2;
wire   [23:0] p_Result_70_fu_418_p2;
wire   [4:0] sub_ln674_8_fu_437_p2;
wire   [4:0] sub_ln674_10_fu_441_p2;
reg   [23:0] tmp_66_fu_428_p4;
wire   [4:0] select_ln674_6_fu_445_p3;
wire   [4:0] select_ln674_8_fu_458_p3;
wire   [4:0] sub_ln674_11_fu_463_p2;
wire   [23:0] select_ln674_7_fu_452_p3;
wire   [23:0] zext_ln674_4_fu_469_p1;
wire   [23:0] zext_ln674_5_fu_473_p1;
wire   [23:0] lshr_ln674_4_fu_477_p2;
wire   [23:0] lshr_ln674_5_fu_483_p2;
wire   [23:0] p_Result_71_fu_489_p2;
wire   [4:0] sub_ln674_12_fu_508_p2;
wire   [4:0] sub_ln674_14_fu_512_p2;
reg   [23:0] tmp_67_fu_499_p4;
wire   [4:0] select_ln674_9_fu_516_p3;
wire   [4:0] select_ln674_11_fu_529_p3;
wire   [4:0] sub_ln674_15_fu_534_p2;
wire   [23:0] select_ln674_10_fu_523_p3;
wire   [23:0] zext_ln674_6_fu_540_p1;
wire   [23:0] zext_ln674_7_fu_544_p1;
wire   [23:0] lshr_ln674_6_fu_548_p2;
wire   [23:0] lshr_ln674_7_fu_554_p2;
wire   [23:0] p_Result_72_fu_560_p2;
wire   [4:0] sub_ln674_16_fu_579_p2;
wire   [4:0] sub_ln674_18_fu_583_p2;
reg   [23:0] tmp_68_fu_570_p4;
wire   [4:0] select_ln674_12_fu_587_p3;
wire   [4:0] select_ln674_14_fu_600_p3;
wire   [4:0] sub_ln674_19_fu_605_p2;
wire   [23:0] select_ln674_13_fu_594_p3;
wire   [23:0] zext_ln674_8_fu_611_p1;
wire   [23:0] zext_ln674_9_fu_615_p1;
wire   [23:0] lshr_ln674_8_fu_619_p2;
wire   [23:0] lshr_ln674_9_fu_625_p2;
wire   [23:0] p_Result_73_fu_631_p2;
wire   [4:0] sub_ln674_20_fu_650_p2;
wire   [4:0] sub_ln674_22_fu_654_p2;
reg   [23:0] tmp_69_fu_641_p4;
wire   [4:0] select_ln674_15_fu_658_p3;
wire   [4:0] select_ln674_17_fu_671_p3;
wire   [4:0] sub_ln674_23_fu_676_p2;
wire   [23:0] select_ln674_16_fu_665_p3;
wire   [23:0] zext_ln674_10_fu_682_p1;
wire   [23:0] zext_ln674_11_fu_686_p1;
wire   [23:0] lshr_ln674_10_fu_690_p2;
wire   [23:0] lshr_ln674_11_fu_696_p2;
wire   [23:0] p_Result_74_fu_702_p2;
wire   [4:0] select_ln414_fu_727_p3;
wire   [4:0] select_ln414_2_fu_737_p3;
wire   [4:0] select_ln414_1_fu_732_p3;
wire   [4:0] sub_ln414_1_fu_742_p2;
wire   [23:0] zext_ln413_fu_724_p1;
wire   [23:0] zext_ln414_fu_748_p1;
wire   [23:0] shl_ln414_fu_760_p2;
reg   [23:0] tmp_70_fu_766_p4;
wire   [23:0] zext_ln414_1_fu_752_p1;
wire   [23:0] zext_ln414_2_fu_756_p1;
wire   [23:0] shl_ln414_1_fu_783_p2;
wire   [23:0] lshr_ln414_fu_789_p2;
wire   [23:0] and_ln414_fu_795_p2;
wire   [23:0] xor_ln414_fu_801_p2;
wire   [23:0] select_ln414_3_fu_776_p3;
wire   [23:0] and_ln414_1_fu_807_p2;
wire   [23:0] and_ln414_2_fu_813_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

reversi_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln511_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_72 <= i_2_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln511_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_76 <= k_1_fu_270_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_76 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_Val2_s_fu_68 <= out_val1_V;
        end else if ((ap_enable_reg_pp0_iter11 == 1'b1)) begin
            p_Val2_s_fu_68 <= p_Result_75_fu_819_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln414_reg_1059 <= icmp_ln414_fu_712_p2;
        icmp_ln511_reg_902_pp0_iter2_reg <= icmp_ln511_reg_902_pp0_iter1_reg;
        icmp_ln511_reg_902_pp0_iter3_reg <= icmp_ln511_reg_902_pp0_iter2_reg;
        icmp_ln511_reg_902_pp0_iter4_reg <= icmp_ln511_reg_902_pp0_iter3_reg;
        icmp_ln511_reg_902_pp0_iter5_reg <= icmp_ln511_reg_902_pp0_iter4_reg;
        icmp_ln511_reg_902_pp0_iter6_reg <= icmp_ln511_reg_902_pp0_iter5_reg;
        icmp_ln511_reg_902_pp0_iter7_reg <= icmp_ln511_reg_902_pp0_iter6_reg;
        icmp_ln511_reg_902_pp0_iter8_reg <= icmp_ln511_reg_902_pp0_iter7_reg;
        icmp_ln511_reg_902_pp0_iter9_reg <= icmp_ln511_reg_902_pp0_iter8_reg;
        k_load_reg_906_pp0_iter10_reg <= k_load_reg_906_pp0_iter9_reg;
        k_load_reg_906_pp0_iter2_reg <= k_load_reg_906_pp0_iter1_reg;
        k_load_reg_906_pp0_iter3_reg <= k_load_reg_906_pp0_iter2_reg;
        k_load_reg_906_pp0_iter4_reg <= k_load_reg_906_pp0_iter3_reg;
        k_load_reg_906_pp0_iter5_reg <= k_load_reg_906_pp0_iter4_reg;
        k_load_reg_906_pp0_iter6_reg <= k_load_reg_906_pp0_iter5_reg;
        k_load_reg_906_pp0_iter7_reg <= k_load_reg_906_pp0_iter6_reg;
        k_load_reg_906_pp0_iter8_reg <= k_load_reg_906_pp0_iter7_reg;
        k_load_reg_906_pp0_iter9_reg <= k_load_reg_906_pp0_iter8_reg;
        or_ln512_reg_933_pp0_iter10_reg[4 : 3] <= or_ln512_reg_933_pp0_iter9_reg[4 : 3];
        or_ln512_reg_933_pp0_iter2_reg[4 : 3] <= or_ln512_reg_933_pp0_iter1_reg[4 : 3];
        or_ln512_reg_933_pp0_iter3_reg[4 : 3] <= or_ln512_reg_933_pp0_iter2_reg[4 : 3];
        or_ln512_reg_933_pp0_iter4_reg[4 : 3] <= or_ln512_reg_933_pp0_iter3_reg[4 : 3];
        or_ln512_reg_933_pp0_iter5_reg[4 : 3] <= or_ln512_reg_933_pp0_iter4_reg[4 : 3];
        or_ln512_reg_933_pp0_iter6_reg[4 : 3] <= or_ln512_reg_933_pp0_iter5_reg[4 : 3];
        or_ln512_reg_933_pp0_iter7_reg[4 : 3] <= or_ln512_reg_933_pp0_iter6_reg[4 : 3];
        or_ln512_reg_933_pp0_iter8_reg[4 : 3] <= or_ln512_reg_933_pp0_iter7_reg[4 : 3];
        or_ln512_reg_933_pp0_iter9_reg[4 : 3] <= or_ln512_reg_933_pp0_iter8_reg[4 : 3];
        sub_ln414_reg_1067 <= sub_ln414_fu_716_p2;
        tmp_V_reg_1054 <= grp_xFapplygaussian3x3_15_s_fu_581_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln511_reg_902 <= icmp_ln511_fu_177_p2;
        icmp_ln511_reg_902_pp0_iter1_reg <= icmp_ln511_reg_902;
        k_load_reg_906_pp0_iter1_reg <= k_load_reg_906;
        or_ln512_reg_933_pp0_iter1_reg[4 : 3] <= or_ln512_reg_933[4 : 3];
        srcbuf10_V_reg_1024 <= srcbuf10_V_fu_353_p1;
        srcbuf11_V_reg_1029 <= srcbuf11_V_fu_424_p1;
        srcbuf20_V_reg_1034 <= srcbuf20_V_fu_495_p1;
        srcbuf21_V_reg_1039 <= srcbuf21_V_fu_566_p1;
        srcbuf30_V_reg_1044 <= srcbuf30_V_fu_637_p1;
        srcbuf31_V_reg_1049 <= srcbuf31_V_fu_708_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln511_fu_177_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln674_1_reg_964 <= icmp_ln674_1_fu_210_p2;
        icmp_ln674_2_reg_976 <= icmp_ln674_2_fu_222_p2;
        icmp_ln674_3_reg_988 <= icmp_ln674_3_fu_234_p2;
        icmp_ln674_4_reg_1000 <= icmp_ln674_4_fu_246_p2;
        icmp_ln674_5_reg_1012 <= icmp_ln674_5_fu_258_p2;
        icmp_ln674_reg_952 <= icmp_ln674_fu_198_p2;
        k_load_reg_906 <= ap_sig_allocacmp_k_load;
        or_ln512_reg_933[4 : 3] <= or_ln512_fu_192_p2[4 : 3];
        sub_ln674_13_reg_995 <= sub_ln674_13_fu_240_p2;
        sub_ln674_17_reg_1007 <= sub_ln674_17_fu_252_p2;
        sub_ln674_1_reg_959 <= sub_ln674_1_fu_204_p2;
        sub_ln674_21_reg_1019 <= sub_ln674_21_fu_264_p2;
        sub_ln674_5_reg_971 <= sub_ln674_5_fu_216_p2;
        sub_ln674_9_reg_983 <= sub_ln674_9_fu_228_p2;
    end
end

always @ (*) begin
    if (((icmp_ln511_fu_177_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 5'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp132) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_xFapplygaussian3x3_15_s_fu_141_ap_ce = 1'b1;
    end else begin
        grp_xFapplygaussian3x3_15_s_fu_141_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln511_reg_902_pp0_iter9_reg == 1'd1))) begin
        out_val1_V_4_out_ap_vld = 1'b1;
    end else begin
        out_val1_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln414_1_fu_807_p2 = (xor_ln414_fu_801_p2 & p_Val2_s_fu_68);

assign and_ln414_2_fu_813_p2 = (select_ln414_3_fu_776_p3 & and_ln414_fu_795_p2);

assign and_ln414_fu_795_p2 = (shl_ln414_1_fu_783_p2 & lshr_ln414_fu_789_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp132 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_ce = grp_xFapplygaussian3x3_15_s_fu_141_ap_ce;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din1 = srcbuf10_V_reg_1024;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din10 = p_read;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din11 = p_read1;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din2 = srcbuf11_V_reg_1029;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din3 = 8'd0;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din4 = srcbuf20_V_reg_1034;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din5 = srcbuf21_V_reg_1039;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din6 = 8'd0;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din7 = srcbuf30_V_reg_1044;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din8 = srcbuf31_V_reg_1049;

assign grp_xFapplygaussian3x3_15_s_fu_581_p_din9 = 8'd0;

assign i_2_fu_183_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign icmp_ln414_fu_712_p2 = ((k_load_reg_906_pp0_iter9_reg > or_ln512_reg_933_pp0_iter9_reg) ? 1'b1 : 1'b0);

assign icmp_ln511_fu_177_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln674_1_fu_210_p2 = ((ap_sig_allocacmp_k_load > or_ln512_fu_192_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_2_fu_222_p2 = ((ap_sig_allocacmp_k_load > or_ln512_fu_192_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_3_fu_234_p2 = ((ap_sig_allocacmp_k_load > or_ln512_fu_192_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_4_fu_246_p2 = ((ap_sig_allocacmp_k_load > or_ln512_fu_192_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_5_fu_258_p2 = ((ap_sig_allocacmp_k_load > or_ln512_fu_192_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_198_p2 = ((ap_sig_allocacmp_k_load > or_ln512_fu_192_p2) ? 1'b1 : 1'b0);

assign k_1_fu_270_p2 = (ap_sig_allocacmp_k_load + 5'd8);

assign lshr_ln414_fu_789_p2 = 24'd16777215 >> zext_ln414_2_fu_756_p1;

assign lshr_ln674_10_fu_690_p2 = select_ln674_16_fu_665_p3 >> zext_ln674_10_fu_682_p1;

assign lshr_ln674_11_fu_696_p2 = 24'd16777215 >> zext_ln674_11_fu_686_p1;

assign lshr_ln674_1_fu_341_p2 = 24'd16777215 >> zext_ln674_1_fu_331_p1;

assign lshr_ln674_2_fu_406_p2 = select_ln674_4_fu_381_p3 >> zext_ln674_2_fu_398_p1;

assign lshr_ln674_3_fu_412_p2 = 24'd16777215 >> zext_ln674_3_fu_402_p1;

assign lshr_ln674_4_fu_477_p2 = select_ln674_7_fu_452_p3 >> zext_ln674_4_fu_469_p1;

assign lshr_ln674_5_fu_483_p2 = 24'd16777215 >> zext_ln674_5_fu_473_p1;

assign lshr_ln674_6_fu_548_p2 = select_ln674_10_fu_523_p3 >> zext_ln674_6_fu_540_p1;

assign lshr_ln674_7_fu_554_p2 = 24'd16777215 >> zext_ln674_7_fu_544_p1;

assign lshr_ln674_8_fu_619_p2 = select_ln674_13_fu_594_p3 >> zext_ln674_8_fu_611_p1;

assign lshr_ln674_9_fu_625_p2 = 24'd16777215 >> zext_ln674_9_fu_615_p1;

assign lshr_ln674_fu_335_p2 = select_ln674_1_fu_310_p3 >> zext_ln674_fu_327_p1;

assign or_ln512_fu_192_p2 = (ap_sig_allocacmp_k_load | 5'd7);

assign out_val1_V_4_out = p_Val2_s_fu_68;

assign p_Result_70_fu_418_p2 = (lshr_ln674_3_fu_412_p2 & lshr_ln674_2_fu_406_p2);

assign p_Result_71_fu_489_p2 = (lshr_ln674_5_fu_483_p2 & lshr_ln674_4_fu_477_p2);

assign p_Result_72_fu_560_p2 = (lshr_ln674_7_fu_554_p2 & lshr_ln674_6_fu_548_p2);

assign p_Result_73_fu_631_p2 = (lshr_ln674_9_fu_625_p2 & lshr_ln674_8_fu_619_p2);

assign p_Result_74_fu_702_p2 = (lshr_ln674_11_fu_696_p2 & lshr_ln674_10_fu_690_p2);

assign p_Result_75_fu_819_p2 = (and_ln414_2_fu_813_p2 | and_ln414_1_fu_807_p2);

assign p_Result_s_fu_347_p2 = (lshr_ln674_fu_335_p2 & lshr_ln674_1_fu_341_p2);

assign select_ln414_1_fu_732_p3 = ((icmp_ln414_reg_1059[0:0] == 1'b1) ? or_ln512_reg_933_pp0_iter10_reg : k_load_reg_906_pp0_iter10_reg);

assign select_ln414_2_fu_737_p3 = ((icmp_ln414_reg_1059[0:0] == 1'b1) ? sub_ln414_reg_1067 : k_load_reg_906_pp0_iter10_reg);

assign select_ln414_3_fu_776_p3 = ((icmp_ln414_reg_1059[0:0] == 1'b1) ? tmp_70_fu_766_p4 : shl_ln414_fu_760_p2);

assign select_ln414_fu_727_p3 = ((icmp_ln414_reg_1059[0:0] == 1'b1) ? k_load_reg_906_pp0_iter10_reg : or_ln512_reg_933_pp0_iter10_reg);

assign select_ln674_10_fu_523_p3 = ((icmp_ln674_3_reg_988[0:0] == 1'b1) ? tmp_67_fu_499_p4 : p_Val2_258_reload);

assign select_ln674_11_fu_529_p3 = ((icmp_ln674_3_reg_988[0:0] == 1'b1) ? sub_ln674_13_reg_995 : k_load_reg_906);

assign select_ln674_12_fu_587_p3 = ((icmp_ln674_4_reg_1000[0:0] == 1'b1) ? sub_ln674_16_fu_579_p2 : sub_ln674_18_fu_583_p2);

assign select_ln674_13_fu_594_p3 = ((icmp_ln674_4_reg_1000[0:0] == 1'b1) ? tmp_68_fu_570_p4 : p_Val2_259_reload);

assign select_ln674_14_fu_600_p3 = ((icmp_ln674_4_reg_1000[0:0] == 1'b1) ? sub_ln674_17_reg_1007 : k_load_reg_906);

assign select_ln674_15_fu_658_p3 = ((icmp_ln674_5_reg_1012[0:0] == 1'b1) ? sub_ln674_20_fu_650_p2 : sub_ln674_22_fu_654_p2);

assign select_ln674_16_fu_665_p3 = ((icmp_ln674_5_reg_1012[0:0] == 1'b1) ? tmp_69_fu_641_p4 : p_Val2_260_reload);

assign select_ln674_17_fu_671_p3 = ((icmp_ln674_5_reg_1012[0:0] == 1'b1) ? sub_ln674_21_reg_1019 : k_load_reg_906);

assign select_ln674_1_fu_310_p3 = ((icmp_ln674_reg_952[0:0] == 1'b1) ? tmp_fu_286_p4 : p_Val2_reload);

assign select_ln674_2_fu_316_p3 = ((icmp_ln674_reg_952[0:0] == 1'b1) ? sub_ln674_1_reg_959 : k_load_reg_906);

assign select_ln674_3_fu_374_p3 = ((icmp_ln674_1_reg_964[0:0] == 1'b1) ? sub_ln674_4_fu_366_p2 : sub_ln674_6_fu_370_p2);

assign select_ln674_4_fu_381_p3 = ((icmp_ln674_1_reg_964[0:0] == 1'b1) ? tmp_65_fu_357_p4 : p_Val2_256_reload);

assign select_ln674_5_fu_387_p3 = ((icmp_ln674_1_reg_964[0:0] == 1'b1) ? sub_ln674_5_reg_971 : k_load_reg_906);

assign select_ln674_6_fu_445_p3 = ((icmp_ln674_2_reg_976[0:0] == 1'b1) ? sub_ln674_8_fu_437_p2 : sub_ln674_10_fu_441_p2);

assign select_ln674_7_fu_452_p3 = ((icmp_ln674_2_reg_976[0:0] == 1'b1) ? tmp_66_fu_428_p4 : p_Val2_257_reload);

assign select_ln674_8_fu_458_p3 = ((icmp_ln674_2_reg_976[0:0] == 1'b1) ? sub_ln674_9_reg_983 : k_load_reg_906);

assign select_ln674_9_fu_516_p3 = ((icmp_ln674_3_reg_988[0:0] == 1'b1) ? sub_ln674_12_fu_508_p2 : sub_ln674_14_fu_512_p2);

assign select_ln674_fu_303_p3 = ((icmp_ln674_reg_952[0:0] == 1'b1) ? sub_ln674_fu_295_p2 : sub_ln674_2_fu_299_p2);

assign shl_ln414_1_fu_783_p2 = 24'd16777215 << zext_ln414_1_fu_752_p1;

assign shl_ln414_fu_760_p2 = zext_ln413_fu_724_p1 << zext_ln414_fu_748_p1;

assign srcbuf10_V_fu_353_p1 = p_Result_s_fu_347_p2[7:0];

assign srcbuf11_V_fu_424_p1 = p_Result_70_fu_418_p2[7:0];

assign srcbuf20_V_fu_495_p1 = p_Result_71_fu_489_p2[7:0];

assign srcbuf21_V_fu_566_p1 = p_Result_72_fu_560_p2[7:0];

assign srcbuf30_V_fu_637_p1 = p_Result_73_fu_631_p2[7:0];

assign srcbuf31_V_fu_708_p1 = p_Result_74_fu_702_p2[7:0];

assign sub_ln414_1_fu_742_p2 = ($signed(5'd23) - $signed(select_ln414_fu_727_p3));

assign sub_ln414_fu_716_p2 = ($signed(5'd23) - $signed(k_load_reg_906_pp0_iter9_reg));

assign sub_ln674_10_fu_441_p2 = (or_ln512_reg_933 - k_load_reg_906);

assign sub_ln674_11_fu_463_p2 = ($signed(5'd23) - $signed(select_ln674_6_fu_445_p3));

assign sub_ln674_12_fu_508_p2 = (k_load_reg_906 - or_ln512_reg_933);

assign sub_ln674_13_fu_240_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_k_load));

assign sub_ln674_14_fu_512_p2 = (or_ln512_reg_933 - k_load_reg_906);

assign sub_ln674_15_fu_534_p2 = ($signed(5'd23) - $signed(select_ln674_9_fu_516_p3));

assign sub_ln674_16_fu_579_p2 = (k_load_reg_906 - or_ln512_reg_933);

assign sub_ln674_17_fu_252_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_k_load));

assign sub_ln674_18_fu_583_p2 = (or_ln512_reg_933 - k_load_reg_906);

assign sub_ln674_19_fu_605_p2 = ($signed(5'd23) - $signed(select_ln674_12_fu_587_p3));

assign sub_ln674_1_fu_204_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_k_load));

assign sub_ln674_20_fu_650_p2 = (k_load_reg_906 - or_ln512_reg_933);

assign sub_ln674_21_fu_264_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_k_load));

assign sub_ln674_22_fu_654_p2 = (or_ln512_reg_933 - k_load_reg_906);

assign sub_ln674_23_fu_676_p2 = ($signed(5'd23) - $signed(select_ln674_15_fu_658_p3));

assign sub_ln674_2_fu_299_p2 = (or_ln512_reg_933 - k_load_reg_906);

assign sub_ln674_3_fu_321_p2 = ($signed(5'd23) - $signed(select_ln674_fu_303_p3));

assign sub_ln674_4_fu_366_p2 = (k_load_reg_906 - or_ln512_reg_933);

assign sub_ln674_5_fu_216_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_k_load));

assign sub_ln674_6_fu_370_p2 = (or_ln512_reg_933 - k_load_reg_906);

assign sub_ln674_7_fu_392_p2 = ($signed(5'd23) - $signed(select_ln674_3_fu_374_p3));

assign sub_ln674_8_fu_437_p2 = (k_load_reg_906 - or_ln512_reg_933);

assign sub_ln674_9_fu_228_p2 = ($signed(5'd23) - $signed(ap_sig_allocacmp_k_load));

assign sub_ln674_fu_295_p2 = (k_load_reg_906 - or_ln512_reg_933);

integer ap_tvar_int_0;

always @ (p_Val2_256_reload) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            tmp_65_fu_357_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_65_fu_357_p4[ap_tvar_int_0] = p_Val2_256_reload[23 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (p_Val2_257_reload) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 23 - 0) begin
            tmp_66_fu_428_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_66_fu_428_p4[ap_tvar_int_1] = p_Val2_257_reload[23 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Val2_258_reload) begin
    for (ap_tvar_int_2 = 24 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 23 - 0) begin
            tmp_67_fu_499_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_67_fu_499_p4[ap_tvar_int_2] = p_Val2_258_reload[23 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (p_Val2_259_reload) begin
    for (ap_tvar_int_3 = 24 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 23 - 0) begin
            tmp_68_fu_570_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_68_fu_570_p4[ap_tvar_int_3] = p_Val2_259_reload[23 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (p_Val2_260_reload) begin
    for (ap_tvar_int_4 = 24 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 23 - 0) begin
            tmp_69_fu_641_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_69_fu_641_p4[ap_tvar_int_4] = p_Val2_260_reload[23 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (shl_ln414_fu_760_p2) begin
    for (ap_tvar_int_5 = 24 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 23 - 0) begin
            tmp_70_fu_766_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_70_fu_766_p4[ap_tvar_int_5] = shl_ln414_fu_760_p2[23 - ap_tvar_int_5];
        end
    end
end

integer ap_tvar_int_6;

always @ (p_Val2_reload) begin
    for (ap_tvar_int_6 = 24 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 23 - 0) begin
            tmp_fu_286_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            tmp_fu_286_p4[ap_tvar_int_6] = p_Val2_reload[23 - ap_tvar_int_6];
        end
    end
end

assign xor_ln414_fu_801_p2 = (24'd16777215 ^ and_ln414_fu_795_p2);

assign zext_ln413_fu_724_p1 = tmp_V_reg_1054;

assign zext_ln414_1_fu_752_p1 = select_ln414_1_fu_732_p3;

assign zext_ln414_2_fu_756_p1 = sub_ln414_1_fu_742_p2;

assign zext_ln414_fu_748_p1 = select_ln414_2_fu_737_p3;

assign zext_ln674_10_fu_682_p1 = select_ln674_17_fu_671_p3;

assign zext_ln674_11_fu_686_p1 = sub_ln674_23_fu_676_p2;

assign zext_ln674_1_fu_331_p1 = sub_ln674_3_fu_321_p2;

assign zext_ln674_2_fu_398_p1 = select_ln674_5_fu_387_p3;

assign zext_ln674_3_fu_402_p1 = sub_ln674_7_fu_392_p2;

assign zext_ln674_4_fu_469_p1 = select_ln674_8_fu_458_p3;

assign zext_ln674_5_fu_473_p1 = sub_ln674_11_fu_463_p2;

assign zext_ln674_6_fu_540_p1 = select_ln674_11_fu_529_p3;

assign zext_ln674_7_fu_544_p1 = sub_ln674_15_fu_534_p2;

assign zext_ln674_8_fu_611_p1 = select_ln674_14_fu_600_p3;

assign zext_ln674_9_fu_615_p1 = sub_ln674_19_fu_605_p2;

assign zext_ln674_fu_327_p1 = select_ln674_2_fu_316_p3;

always @ (posedge ap_clk) begin
    or_ln512_reg_933[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter1_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter2_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter3_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter4_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter5_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter6_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter7_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter8_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter9_reg[2:0] <= 3'b111;
    or_ln512_reg_933_pp0_iter10_reg[2:0] <= 3'b111;
end

endmodule //reversi_accel_xfGaussianFilter3x3_9_1024_1024_3_15_1_9_1024_Pipeline_VITIS_LOOP_511_1
