// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_xfVoting_0_1024_1024_0_1_1_6u_3u_60_483_0_Pipeline_loop_init_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        accum_address0,
        accum_ce0,
        accum_we0,
        accum_d0,
        accum1_address0,
        accum1_ce0,
        accum1_we0,
        accum1_d0,
        accum2_address0,
        accum2_ce0,
        accum2_we0,
        accum2_d0,
        accum3_address0,
        accum3_ce0,
        accum3_we0,
        accum3_d0,
        accum4_address0,
        accum4_ce0,
        accum4_we0,
        accum4_d0,
        accum5_address0,
        accum5_ce0,
        accum5_we0,
        accum5_d0,
        accum6_address0,
        accum6_ce0,
        accum6_we0,
        accum6_d0,
        accum7_address0,
        accum7_ce0,
        accum7_we0,
        accum7_d0,
        accum8_address0,
        accum8_ce0,
        accum8_we0,
        accum8_d0,
        accum9_address0,
        accum9_ce0,
        accum9_we0,
        accum9_d0,
        accum10_address0,
        accum10_ce0,
        accum10_we0,
        accum10_d0,
        accum11_address0,
        accum11_ce0,
        accum11_we0,
        accum11_d0,
        accum12_address0,
        accum12_ce0,
        accum12_we0,
        accum12_d0,
        accum13_address0,
        accum13_ce0,
        accum13_we0,
        accum13_d0,
        accum14_address0,
        accum14_ce0,
        accum14_we0,
        accum14_d0,
        accum15_address0,
        accum15_ce0,
        accum15_we0,
        accum15_d0,
        accum16_address0,
        accum16_ce0,
        accum16_we0,
        accum16_d0,
        accum17_address0,
        accum17_ce0,
        accum17_we0,
        accum17_d0,
        accum18_address0,
        accum18_ce0,
        accum18_we0,
        accum18_d0,
        accum19_address0,
        accum19_ce0,
        accum19_we0,
        accum19_d0,
        accum20_address0,
        accum20_ce0,
        accum20_we0,
        accum20_d0,
        accum21_address0,
        accum21_ce0,
        accum21_we0,
        accum21_d0,
        accum22_address0,
        accum22_ce0,
        accum22_we0,
        accum22_d0,
        accum23_address0,
        accum23_ce0,
        accum23_we0,
        accum23_d0,
        accum24_address0,
        accum24_ce0,
        accum24_we0,
        accum24_d0,
        accum25_address0,
        accum25_ce0,
        accum25_we0,
        accum25_d0,
        accum26_address0,
        accum26_ce0,
        accum26_we0,
        accum26_d0,
        accum27_address0,
        accum27_ce0,
        accum27_we0,
        accum27_d0,
        accum28_address0,
        accum28_ce0,
        accum28_we0,
        accum28_d0,
        accum29_address0,
        accum29_ce0,
        accum29_we0,
        accum29_d0,
        accum30_address0,
        accum30_ce0,
        accum30_we0,
        accum30_d0,
        accum31_address0,
        accum31_ce0,
        accum31_we0,
        accum31_d0,
        accum32_address0,
        accum32_ce0,
        accum32_we0,
        accum32_d0,
        accum33_address0,
        accum33_ce0,
        accum33_we0,
        accum33_d0,
        accum34_address0,
        accum34_ce0,
        accum34_we0,
        accum34_d0,
        accum35_address0,
        accum35_ce0,
        accum35_we0,
        accum35_d0,
        accum36_address0,
        accum36_ce0,
        accum36_we0,
        accum36_d0,
        accum37_address0,
        accum37_ce0,
        accum37_we0,
        accum37_d0,
        accum38_address0,
        accum38_ce0,
        accum38_we0,
        accum38_d0,
        accum39_address0,
        accum39_ce0,
        accum39_we0,
        accum39_d0,
        accum40_address0,
        accum40_ce0,
        accum40_we0,
        accum40_d0,
        accum41_address0,
        accum41_ce0,
        accum41_we0,
        accum41_d0,
        accum42_address0,
        accum42_ce0,
        accum42_we0,
        accum42_d0,
        accum43_address0,
        accum43_ce0,
        accum43_we0,
        accum43_d0,
        accum44_address0,
        accum44_ce0,
        accum44_we0,
        accum44_d0,
        accum45_address0,
        accum45_ce0,
        accum45_we0,
        accum45_d0,
        accum46_address0,
        accum46_ce0,
        accum46_we0,
        accum46_d0,
        accum47_address0,
        accum47_ce0,
        accum47_we0,
        accum47_d0,
        accum48_address0,
        accum48_ce0,
        accum48_we0,
        accum48_d0,
        accum49_address0,
        accum49_ce0,
        accum49_we0,
        accum49_d0,
        accum50_address0,
        accum50_ce0,
        accum50_we0,
        accum50_d0,
        accum51_address0,
        accum51_ce0,
        accum51_we0,
        accum51_d0,
        accum52_address0,
        accum52_ce0,
        accum52_we0,
        accum52_d0,
        accum53_address0,
        accum53_ce0,
        accum53_we0,
        accum53_d0,
        accum54_address0,
        accum54_ce0,
        accum54_we0,
        accum54_d0,
        accum55_address0,
        accum55_ce0,
        accum55_we0,
        accum55_d0,
        accum56_address0,
        accum56_ce0,
        accum56_we0,
        accum56_d0,
        accum57_address0,
        accum57_ce0,
        accum57_we0,
        accum57_d0,
        accum58_address0,
        accum58_ce0,
        accum58_we0,
        accum58_d0,
        accum59_address0,
        accum59_ce0,
        accum59_we0,
        accum59_d0,
        accum60_address0,
        accum60_ce0,
        accum60_we0,
        accum60_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] accum_address0;
output   accum_ce0;
output   accum_we0;
output  [11:0] accum_d0;
output  [8:0] accum1_address0;
output   accum1_ce0;
output   accum1_we0;
output  [11:0] accum1_d0;
output  [8:0] accum2_address0;
output   accum2_ce0;
output   accum2_we0;
output  [11:0] accum2_d0;
output  [8:0] accum3_address0;
output   accum3_ce0;
output   accum3_we0;
output  [11:0] accum3_d0;
output  [8:0] accum4_address0;
output   accum4_ce0;
output   accum4_we0;
output  [11:0] accum4_d0;
output  [8:0] accum5_address0;
output   accum5_ce0;
output   accum5_we0;
output  [11:0] accum5_d0;
output  [8:0] accum6_address0;
output   accum6_ce0;
output   accum6_we0;
output  [11:0] accum6_d0;
output  [8:0] accum7_address0;
output   accum7_ce0;
output   accum7_we0;
output  [11:0] accum7_d0;
output  [8:0] accum8_address0;
output   accum8_ce0;
output   accum8_we0;
output  [11:0] accum8_d0;
output  [8:0] accum9_address0;
output   accum9_ce0;
output   accum9_we0;
output  [11:0] accum9_d0;
output  [8:0] accum10_address0;
output   accum10_ce0;
output   accum10_we0;
output  [11:0] accum10_d0;
output  [8:0] accum11_address0;
output   accum11_ce0;
output   accum11_we0;
output  [11:0] accum11_d0;
output  [8:0] accum12_address0;
output   accum12_ce0;
output   accum12_we0;
output  [11:0] accum12_d0;
output  [8:0] accum13_address0;
output   accum13_ce0;
output   accum13_we0;
output  [11:0] accum13_d0;
output  [8:0] accum14_address0;
output   accum14_ce0;
output   accum14_we0;
output  [11:0] accum14_d0;
output  [8:0] accum15_address0;
output   accum15_ce0;
output   accum15_we0;
output  [11:0] accum15_d0;
output  [8:0] accum16_address0;
output   accum16_ce0;
output   accum16_we0;
output  [11:0] accum16_d0;
output  [8:0] accum17_address0;
output   accum17_ce0;
output   accum17_we0;
output  [11:0] accum17_d0;
output  [8:0] accum18_address0;
output   accum18_ce0;
output   accum18_we0;
output  [11:0] accum18_d0;
output  [8:0] accum19_address0;
output   accum19_ce0;
output   accum19_we0;
output  [11:0] accum19_d0;
output  [8:0] accum20_address0;
output   accum20_ce0;
output   accum20_we0;
output  [11:0] accum20_d0;
output  [8:0] accum21_address0;
output   accum21_ce0;
output   accum21_we0;
output  [11:0] accum21_d0;
output  [8:0] accum22_address0;
output   accum22_ce0;
output   accum22_we0;
output  [11:0] accum22_d0;
output  [8:0] accum23_address0;
output   accum23_ce0;
output   accum23_we0;
output  [11:0] accum23_d0;
output  [8:0] accum24_address0;
output   accum24_ce0;
output   accum24_we0;
output  [11:0] accum24_d0;
output  [8:0] accum25_address0;
output   accum25_ce0;
output   accum25_we0;
output  [11:0] accum25_d0;
output  [8:0] accum26_address0;
output   accum26_ce0;
output   accum26_we0;
output  [11:0] accum26_d0;
output  [8:0] accum27_address0;
output   accum27_ce0;
output   accum27_we0;
output  [11:0] accum27_d0;
output  [8:0] accum28_address0;
output   accum28_ce0;
output   accum28_we0;
output  [11:0] accum28_d0;
output  [8:0] accum29_address0;
output   accum29_ce0;
output   accum29_we0;
output  [11:0] accum29_d0;
output  [8:0] accum30_address0;
output   accum30_ce0;
output   accum30_we0;
output  [11:0] accum30_d0;
output  [8:0] accum31_address0;
output   accum31_ce0;
output   accum31_we0;
output  [11:0] accum31_d0;
output  [8:0] accum32_address0;
output   accum32_ce0;
output   accum32_we0;
output  [11:0] accum32_d0;
output  [8:0] accum33_address0;
output   accum33_ce0;
output   accum33_we0;
output  [11:0] accum33_d0;
output  [8:0] accum34_address0;
output   accum34_ce0;
output   accum34_we0;
output  [11:0] accum34_d0;
output  [8:0] accum35_address0;
output   accum35_ce0;
output   accum35_we0;
output  [11:0] accum35_d0;
output  [8:0] accum36_address0;
output   accum36_ce0;
output   accum36_we0;
output  [11:0] accum36_d0;
output  [8:0] accum37_address0;
output   accum37_ce0;
output   accum37_we0;
output  [11:0] accum37_d0;
output  [8:0] accum38_address0;
output   accum38_ce0;
output   accum38_we0;
output  [11:0] accum38_d0;
output  [8:0] accum39_address0;
output   accum39_ce0;
output   accum39_we0;
output  [11:0] accum39_d0;
output  [8:0] accum40_address0;
output   accum40_ce0;
output   accum40_we0;
output  [11:0] accum40_d0;
output  [8:0] accum41_address0;
output   accum41_ce0;
output   accum41_we0;
output  [11:0] accum41_d0;
output  [8:0] accum42_address0;
output   accum42_ce0;
output   accum42_we0;
output  [11:0] accum42_d0;
output  [8:0] accum43_address0;
output   accum43_ce0;
output   accum43_we0;
output  [11:0] accum43_d0;
output  [8:0] accum44_address0;
output   accum44_ce0;
output   accum44_we0;
output  [11:0] accum44_d0;
output  [8:0] accum45_address0;
output   accum45_ce0;
output   accum45_we0;
output  [11:0] accum45_d0;
output  [8:0] accum46_address0;
output   accum46_ce0;
output   accum46_we0;
output  [11:0] accum46_d0;
output  [8:0] accum47_address0;
output   accum47_ce0;
output   accum47_we0;
output  [11:0] accum47_d0;
output  [8:0] accum48_address0;
output   accum48_ce0;
output   accum48_we0;
output  [11:0] accum48_d0;
output  [8:0] accum49_address0;
output   accum49_ce0;
output   accum49_we0;
output  [11:0] accum49_d0;
output  [8:0] accum50_address0;
output   accum50_ce0;
output   accum50_we0;
output  [11:0] accum50_d0;
output  [8:0] accum51_address0;
output   accum51_ce0;
output   accum51_we0;
output  [11:0] accum51_d0;
output  [8:0] accum52_address0;
output   accum52_ce0;
output   accum52_we0;
output  [11:0] accum52_d0;
output  [8:0] accum53_address0;
output   accum53_ce0;
output   accum53_we0;
output  [11:0] accum53_d0;
output  [8:0] accum54_address0;
output   accum54_ce0;
output   accum54_we0;
output  [11:0] accum54_d0;
output  [8:0] accum55_address0;
output   accum55_ce0;
output   accum55_we0;
output  [11:0] accum55_d0;
output  [8:0] accum56_address0;
output   accum56_ce0;
output   accum56_we0;
output  [11:0] accum56_d0;
output  [8:0] accum57_address0;
output   accum57_ce0;
output   accum57_we0;
output  [11:0] accum57_d0;
output  [8:0] accum58_address0;
output   accum58_ce0;
output   accum58_we0;
output  [11:0] accum58_d0;
output  [8:0] accum59_address0;
output   accum59_ce0;
output   accum59_we0;
output  [11:0] accum59_d0;
output  [8:0] accum60_address0;
output   accum60_ce0;
output   accum60_we0;
output  [0:0] accum60_d0;

reg ap_idle;
reg accum_ce0;
reg accum_we0;
reg accum1_ce0;
reg accum1_we0;
reg accum2_ce0;
reg accum2_we0;
reg accum3_ce0;
reg accum3_we0;
reg accum4_ce0;
reg accum4_we0;
reg accum5_ce0;
reg accum5_we0;
reg accum6_ce0;
reg accum6_we0;
reg accum7_ce0;
reg accum7_we0;
reg accum8_ce0;
reg accum8_we0;
reg accum9_ce0;
reg accum9_we0;
reg accum10_ce0;
reg accum10_we0;
reg accum11_ce0;
reg accum11_we0;
reg accum12_ce0;
reg accum12_we0;
reg accum13_ce0;
reg accum13_we0;
reg accum14_ce0;
reg accum14_we0;
reg accum15_ce0;
reg accum15_we0;
reg accum16_ce0;
reg accum16_we0;
reg accum17_ce0;
reg accum17_we0;
reg accum18_ce0;
reg accum18_we0;
reg accum19_ce0;
reg accum19_we0;
reg accum20_ce0;
reg accum20_we0;
reg accum21_ce0;
reg accum21_we0;
reg accum22_ce0;
reg accum22_we0;
reg accum23_ce0;
reg accum23_we0;
reg accum24_ce0;
reg accum24_we0;
reg accum25_ce0;
reg accum25_we0;
reg accum26_ce0;
reg accum26_we0;
reg accum27_ce0;
reg accum27_we0;
reg accum28_ce0;
reg accum28_we0;
reg accum29_ce0;
reg accum29_we0;
reg accum30_ce0;
reg accum30_we0;
reg accum31_ce0;
reg accum31_we0;
reg accum32_ce0;
reg accum32_we0;
reg accum33_ce0;
reg accum33_we0;
reg accum34_ce0;
reg accum34_we0;
reg accum35_ce0;
reg accum35_we0;
reg accum36_ce0;
reg accum36_we0;
reg accum37_ce0;
reg accum37_we0;
reg accum38_ce0;
reg accum38_we0;
reg accum39_ce0;
reg accum39_we0;
reg accum40_ce0;
reg accum40_we0;
reg accum41_ce0;
reg accum41_we0;
reg accum42_ce0;
reg accum42_we0;
reg accum43_ce0;
reg accum43_we0;
reg accum44_ce0;
reg accum44_we0;
reg accum45_ce0;
reg accum45_we0;
reg accum46_ce0;
reg accum46_we0;
reg accum47_ce0;
reg accum47_we0;
reg accum48_ce0;
reg accum48_we0;
reg accum49_ce0;
reg accum49_we0;
reg accum50_ce0;
reg accum50_we0;
reg accum51_ce0;
reg accum51_we0;
reg accum52_ce0;
reg accum52_we0;
reg accum53_ce0;
reg accum53_we0;
reg accum54_ce0;
reg accum54_we0;
reg accum55_ce0;
reg accum55_we0;
reg accum56_ce0;
reg accum56_we0;
reg accum57_ce0;
reg accum57_we0;
reg accum58_ce0;
reg accum58_we0;
reg accum59_ce0;
reg accum59_we0;
reg accum60_ce0;
reg accum60_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1057_fu_1026_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] conv_i729_fu_1038_p1;
reg   [8:0] r_V_fu_160;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_r_V_1;
wire   [8:0] r_V_2_fu_1032_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

reversi_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln1057_fu_1026_p2 == 1'd0)) begin
            r_V_fu_160 <= r_V_2_fu_1032_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            r_V_fu_160 <= 9'd0;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum10_ce0 = 1'b1;
    end else begin
        accum10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum10_we0 = 1'b1;
    end else begin
        accum10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum11_ce0 = 1'b1;
    end else begin
        accum11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum11_we0 = 1'b1;
    end else begin
        accum11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum12_ce0 = 1'b1;
    end else begin
        accum12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum12_we0 = 1'b1;
    end else begin
        accum12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum13_ce0 = 1'b1;
    end else begin
        accum13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum13_we0 = 1'b1;
    end else begin
        accum13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum14_ce0 = 1'b1;
    end else begin
        accum14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum14_we0 = 1'b1;
    end else begin
        accum14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum15_ce0 = 1'b1;
    end else begin
        accum15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum15_we0 = 1'b1;
    end else begin
        accum15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum16_ce0 = 1'b1;
    end else begin
        accum16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum16_we0 = 1'b1;
    end else begin
        accum16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum17_ce0 = 1'b1;
    end else begin
        accum17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum17_we0 = 1'b1;
    end else begin
        accum17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum18_ce0 = 1'b1;
    end else begin
        accum18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum18_we0 = 1'b1;
    end else begin
        accum18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum19_ce0 = 1'b1;
    end else begin
        accum19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum19_we0 = 1'b1;
    end else begin
        accum19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum1_ce0 = 1'b1;
    end else begin
        accum1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum1_we0 = 1'b1;
    end else begin
        accum1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum20_ce0 = 1'b1;
    end else begin
        accum20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum20_we0 = 1'b1;
    end else begin
        accum20_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum21_ce0 = 1'b1;
    end else begin
        accum21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum21_we0 = 1'b1;
    end else begin
        accum21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum22_ce0 = 1'b1;
    end else begin
        accum22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum22_we0 = 1'b1;
    end else begin
        accum22_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum23_ce0 = 1'b1;
    end else begin
        accum23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum23_we0 = 1'b1;
    end else begin
        accum23_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum24_ce0 = 1'b1;
    end else begin
        accum24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum24_we0 = 1'b1;
    end else begin
        accum24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum25_ce0 = 1'b1;
    end else begin
        accum25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum25_we0 = 1'b1;
    end else begin
        accum25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum26_ce0 = 1'b1;
    end else begin
        accum26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum26_we0 = 1'b1;
    end else begin
        accum26_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum27_ce0 = 1'b1;
    end else begin
        accum27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum27_we0 = 1'b1;
    end else begin
        accum27_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum28_ce0 = 1'b1;
    end else begin
        accum28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum28_we0 = 1'b1;
    end else begin
        accum28_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum29_ce0 = 1'b1;
    end else begin
        accum29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum29_we0 = 1'b1;
    end else begin
        accum29_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum2_ce0 = 1'b1;
    end else begin
        accum2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum2_we0 = 1'b1;
    end else begin
        accum2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum30_ce0 = 1'b1;
    end else begin
        accum30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum30_we0 = 1'b1;
    end else begin
        accum30_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum31_ce0 = 1'b1;
    end else begin
        accum31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum31_we0 = 1'b1;
    end else begin
        accum31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum32_ce0 = 1'b1;
    end else begin
        accum32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum32_we0 = 1'b1;
    end else begin
        accum32_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum33_ce0 = 1'b1;
    end else begin
        accum33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum33_we0 = 1'b1;
    end else begin
        accum33_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum34_ce0 = 1'b1;
    end else begin
        accum34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum34_we0 = 1'b1;
    end else begin
        accum34_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum35_ce0 = 1'b1;
    end else begin
        accum35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum35_we0 = 1'b1;
    end else begin
        accum35_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum36_ce0 = 1'b1;
    end else begin
        accum36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum36_we0 = 1'b1;
    end else begin
        accum36_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum37_ce0 = 1'b1;
    end else begin
        accum37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum37_we0 = 1'b1;
    end else begin
        accum37_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum38_ce0 = 1'b1;
    end else begin
        accum38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum38_we0 = 1'b1;
    end else begin
        accum38_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum39_ce0 = 1'b1;
    end else begin
        accum39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum39_we0 = 1'b1;
    end else begin
        accum39_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum3_ce0 = 1'b1;
    end else begin
        accum3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum3_we0 = 1'b1;
    end else begin
        accum3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum40_ce0 = 1'b1;
    end else begin
        accum40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum40_we0 = 1'b1;
    end else begin
        accum40_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum41_ce0 = 1'b1;
    end else begin
        accum41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum41_we0 = 1'b1;
    end else begin
        accum41_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum42_ce0 = 1'b1;
    end else begin
        accum42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum42_we0 = 1'b1;
    end else begin
        accum42_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum43_ce0 = 1'b1;
    end else begin
        accum43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum43_we0 = 1'b1;
    end else begin
        accum43_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum44_ce0 = 1'b1;
    end else begin
        accum44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum44_we0 = 1'b1;
    end else begin
        accum44_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum45_ce0 = 1'b1;
    end else begin
        accum45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum45_we0 = 1'b1;
    end else begin
        accum45_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum46_ce0 = 1'b1;
    end else begin
        accum46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum46_we0 = 1'b1;
    end else begin
        accum46_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum47_ce0 = 1'b1;
    end else begin
        accum47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum47_we0 = 1'b1;
    end else begin
        accum47_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum48_ce0 = 1'b1;
    end else begin
        accum48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum48_we0 = 1'b1;
    end else begin
        accum48_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum49_ce0 = 1'b1;
    end else begin
        accum49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum49_we0 = 1'b1;
    end else begin
        accum49_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum4_ce0 = 1'b1;
    end else begin
        accum4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum4_we0 = 1'b1;
    end else begin
        accum4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum50_ce0 = 1'b1;
    end else begin
        accum50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum50_we0 = 1'b1;
    end else begin
        accum50_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum51_ce0 = 1'b1;
    end else begin
        accum51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum51_we0 = 1'b1;
    end else begin
        accum51_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum52_ce0 = 1'b1;
    end else begin
        accum52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum52_we0 = 1'b1;
    end else begin
        accum52_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum53_ce0 = 1'b1;
    end else begin
        accum53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum53_we0 = 1'b1;
    end else begin
        accum53_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum54_ce0 = 1'b1;
    end else begin
        accum54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum54_we0 = 1'b1;
    end else begin
        accum54_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum55_ce0 = 1'b1;
    end else begin
        accum55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum55_we0 = 1'b1;
    end else begin
        accum55_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum56_ce0 = 1'b1;
    end else begin
        accum56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum56_we0 = 1'b1;
    end else begin
        accum56_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum57_ce0 = 1'b1;
    end else begin
        accum57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum57_we0 = 1'b1;
    end else begin
        accum57_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum58_ce0 = 1'b1;
    end else begin
        accum58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum58_we0 = 1'b1;
    end else begin
        accum58_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum59_ce0 = 1'b1;
    end else begin
        accum59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum59_we0 = 1'b1;
    end else begin
        accum59_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum5_ce0 = 1'b1;
    end else begin
        accum5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum5_we0 = 1'b1;
    end else begin
        accum5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum60_ce0 = 1'b1;
    end else begin
        accum60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum60_we0 = 1'b1;
    end else begin
        accum60_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum6_ce0 = 1'b1;
    end else begin
        accum6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum6_we0 = 1'b1;
    end else begin
        accum6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum7_ce0 = 1'b1;
    end else begin
        accum7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum7_we0 = 1'b1;
    end else begin
        accum7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum8_ce0 = 1'b1;
    end else begin
        accum8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum8_we0 = 1'b1;
    end else begin
        accum8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum9_ce0 = 1'b1;
    end else begin
        accum9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum9_we0 = 1'b1;
    end else begin
        accum9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_ce0 = 1'b1;
    end else begin
        accum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_we0 = 1'b1;
    end else begin
        accum_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_1026_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_r_V_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_r_V_1 = r_V_fu_160;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum10_address0 = conv_i729_fu_1038_p1;

assign accum10_d0 = 12'd0;

assign accum11_address0 = conv_i729_fu_1038_p1;

assign accum11_d0 = 12'd0;

assign accum12_address0 = conv_i729_fu_1038_p1;

assign accum12_d0 = 12'd0;

assign accum13_address0 = conv_i729_fu_1038_p1;

assign accum13_d0 = 12'd0;

assign accum14_address0 = conv_i729_fu_1038_p1;

assign accum14_d0 = 12'd0;

assign accum15_address0 = conv_i729_fu_1038_p1;

assign accum15_d0 = 12'd0;

assign accum16_address0 = conv_i729_fu_1038_p1;

assign accum16_d0 = 12'd0;

assign accum17_address0 = conv_i729_fu_1038_p1;

assign accum17_d0 = 12'd0;

assign accum18_address0 = conv_i729_fu_1038_p1;

assign accum18_d0 = 12'd0;

assign accum19_address0 = conv_i729_fu_1038_p1;

assign accum19_d0 = 12'd0;

assign accum1_address0 = conv_i729_fu_1038_p1;

assign accum1_d0 = 12'd0;

assign accum20_address0 = conv_i729_fu_1038_p1;

assign accum20_d0 = 12'd0;

assign accum21_address0 = conv_i729_fu_1038_p1;

assign accum21_d0 = 12'd0;

assign accum22_address0 = conv_i729_fu_1038_p1;

assign accum22_d0 = 12'd0;

assign accum23_address0 = conv_i729_fu_1038_p1;

assign accum23_d0 = 12'd0;

assign accum24_address0 = conv_i729_fu_1038_p1;

assign accum24_d0 = 12'd0;

assign accum25_address0 = conv_i729_fu_1038_p1;

assign accum25_d0 = 12'd0;

assign accum26_address0 = conv_i729_fu_1038_p1;

assign accum26_d0 = 12'd0;

assign accum27_address0 = conv_i729_fu_1038_p1;

assign accum27_d0 = 12'd0;

assign accum28_address0 = conv_i729_fu_1038_p1;

assign accum28_d0 = 12'd0;

assign accum29_address0 = conv_i729_fu_1038_p1;

assign accum29_d0 = 12'd0;

assign accum2_address0 = conv_i729_fu_1038_p1;

assign accum2_d0 = 12'd0;

assign accum30_address0 = conv_i729_fu_1038_p1;

assign accum30_d0 = 12'd0;

assign accum31_address0 = conv_i729_fu_1038_p1;

assign accum31_d0 = 12'd0;

assign accum32_address0 = conv_i729_fu_1038_p1;

assign accum32_d0 = 12'd0;

assign accum33_address0 = conv_i729_fu_1038_p1;

assign accum33_d0 = 12'd0;

assign accum34_address0 = conv_i729_fu_1038_p1;

assign accum34_d0 = 12'd0;

assign accum35_address0 = conv_i729_fu_1038_p1;

assign accum35_d0 = 12'd0;

assign accum36_address0 = conv_i729_fu_1038_p1;

assign accum36_d0 = 12'd0;

assign accum37_address0 = conv_i729_fu_1038_p1;

assign accum37_d0 = 12'd0;

assign accum38_address0 = conv_i729_fu_1038_p1;

assign accum38_d0 = 12'd0;

assign accum39_address0 = conv_i729_fu_1038_p1;

assign accum39_d0 = 12'd0;

assign accum3_address0 = conv_i729_fu_1038_p1;

assign accum3_d0 = 12'd0;

assign accum40_address0 = conv_i729_fu_1038_p1;

assign accum40_d0 = 12'd0;

assign accum41_address0 = conv_i729_fu_1038_p1;

assign accum41_d0 = 12'd0;

assign accum42_address0 = conv_i729_fu_1038_p1;

assign accum42_d0 = 12'd0;

assign accum43_address0 = conv_i729_fu_1038_p1;

assign accum43_d0 = 12'd0;

assign accum44_address0 = conv_i729_fu_1038_p1;

assign accum44_d0 = 12'd0;

assign accum45_address0 = conv_i729_fu_1038_p1;

assign accum45_d0 = 12'd0;

assign accum46_address0 = conv_i729_fu_1038_p1;

assign accum46_d0 = 12'd0;

assign accum47_address0 = conv_i729_fu_1038_p1;

assign accum47_d0 = 12'd0;

assign accum48_address0 = conv_i729_fu_1038_p1;

assign accum48_d0 = 12'd0;

assign accum49_address0 = conv_i729_fu_1038_p1;

assign accum49_d0 = 12'd0;

assign accum4_address0 = conv_i729_fu_1038_p1;

assign accum4_d0 = 12'd0;

assign accum50_address0 = conv_i729_fu_1038_p1;

assign accum50_d0 = 12'd0;

assign accum51_address0 = conv_i729_fu_1038_p1;

assign accum51_d0 = 12'd0;

assign accum52_address0 = conv_i729_fu_1038_p1;

assign accum52_d0 = 12'd0;

assign accum53_address0 = conv_i729_fu_1038_p1;

assign accum53_d0 = 12'd0;

assign accum54_address0 = conv_i729_fu_1038_p1;

assign accum54_d0 = 12'd0;

assign accum55_address0 = conv_i729_fu_1038_p1;

assign accum55_d0 = 12'd0;

assign accum56_address0 = conv_i729_fu_1038_p1;

assign accum56_d0 = 12'd0;

assign accum57_address0 = conv_i729_fu_1038_p1;

assign accum57_d0 = 12'd0;

assign accum58_address0 = conv_i729_fu_1038_p1;

assign accum58_d0 = 12'd0;

assign accum59_address0 = conv_i729_fu_1038_p1;

assign accum59_d0 = 12'd0;

assign accum5_address0 = conv_i729_fu_1038_p1;

assign accum5_d0 = 12'd0;

assign accum60_address0 = conv_i729_fu_1038_p1;

assign accum60_d0 = 1'd0;

assign accum6_address0 = conv_i729_fu_1038_p1;

assign accum6_d0 = 12'd0;

assign accum7_address0 = conv_i729_fu_1038_p1;

assign accum7_d0 = 12'd0;

assign accum8_address0 = conv_i729_fu_1038_p1;

assign accum8_d0 = 12'd0;

assign accum9_address0 = conv_i729_fu_1038_p1;

assign accum9_d0 = 12'd0;

assign accum_address0 = conv_i729_fu_1038_p1;

assign accum_d0 = 12'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_i729_fu_1038_p1 = ap_sig_allocacmp_r_V_1;

assign icmp_ln1057_fu_1026_p2 = ((ap_sig_allocacmp_r_V_1 == 9'd484) ? 1'b1 : 1'b0);

assign r_V_2_fu_1032_p2 = (ap_sig_allocacmp_r_V_1 + 9'd1);

endmodule //reversi_accel_xfVoting_0_1024_1024_0_1_1_6u_3u_60_483_0_Pipeline_loop_init_r
