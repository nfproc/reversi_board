-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_Axi2AxiStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    ldata1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ldata1_full_n : IN STD_LOGIC;
    ldata1_write : OUT STD_LOGIC;
    p_read1 : IN STD_LOGIC_VECTOR (20 downto 0) );
end;


architecture behav of reversi_accel_Axi2AxiStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1057_reg_109 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_78_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln_reg_113 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln952_fu_99_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_done : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_idle : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_ready : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWVALID : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WVALID : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WLAST : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARVALID : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_RREADY : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_BREADY : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_write : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln952_fu_88_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_Axi2AxiStream_Pipeline_MMIterInLoop1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_data_AWVALID : OUT STD_LOGIC;
        m_axi_data_AWREADY : IN STD_LOGIC;
        m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WVALID : OUT STD_LOGIC;
        m_axi_data_WREADY : IN STD_LOGIC;
        m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_WLAST : OUT STD_LOGIC;
        m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARVALID : OUT STD_LOGIC;
        m_axi_data_ARREADY : IN STD_LOGIC;
        m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RVALID : IN STD_LOGIC;
        m_axi_data_RREADY : OUT STD_LOGIC;
        m_axi_data_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_RLAST : IN STD_LOGIC;
        m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BVALID : IN STD_LOGIC;
        m_axi_data_BREADY : OUT STD_LOGIC;
        m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ldata1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ldata1_full_n : IN STD_LOGIC;
        ldata1_write : OUT STD_LOGIC;
        sext_ln952 : IN STD_LOGIC_VECTOR (61 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62 : component reversi_accel_Axi2AxiStream_Pipeline_MMIterInLoop1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start,
        ap_done => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_done,
        ap_idle => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_idle,
        ap_ready => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_ready,
        m_axi_data_AWVALID => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWVALID,
        m_axi_data_AWREADY => ap_const_logic_0,
        m_axi_data_AWADDR => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWADDR,
        m_axi_data_AWID => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWID,
        m_axi_data_AWLEN => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLEN,
        m_axi_data_AWSIZE => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWSIZE,
        m_axi_data_AWBURST => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWBURST,
        m_axi_data_AWLOCK => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWLOCK,
        m_axi_data_AWCACHE => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWCACHE,
        m_axi_data_AWPROT => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWPROT,
        m_axi_data_AWQOS => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWQOS,
        m_axi_data_AWREGION => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWREGION,
        m_axi_data_AWUSER => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_AWUSER,
        m_axi_data_WVALID => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WVALID,
        m_axi_data_WREADY => ap_const_logic_0,
        m_axi_data_WDATA => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WDATA,
        m_axi_data_WSTRB => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WSTRB,
        m_axi_data_WLAST => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WLAST,
        m_axi_data_WID => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WID,
        m_axi_data_WUSER => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_WUSER,
        m_axi_data_ARVALID => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARVALID,
        m_axi_data_ARREADY => m_axi_data_ARREADY,
        m_axi_data_ARADDR => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARADDR,
        m_axi_data_ARID => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARID,
        m_axi_data_ARLEN => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLEN,
        m_axi_data_ARSIZE => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARSIZE,
        m_axi_data_ARBURST => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARBURST,
        m_axi_data_ARLOCK => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLOCK,
        m_axi_data_ARCACHE => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARCACHE,
        m_axi_data_ARPROT => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARPROT,
        m_axi_data_ARQOS => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARQOS,
        m_axi_data_ARREGION => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARREGION,
        m_axi_data_ARUSER => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARUSER,
        m_axi_data_RVALID => m_axi_data_RVALID,
        m_axi_data_RREADY => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_RREADY,
        m_axi_data_RDATA => m_axi_data_RDATA,
        m_axi_data_RLAST => m_axi_data_RLAST,
        m_axi_data_RID => m_axi_data_RID,
        m_axi_data_RUSER => m_axi_data_RUSER,
        m_axi_data_RRESP => m_axi_data_RRESP,
        m_axi_data_BVALID => ap_const_logic_0,
        m_axi_data_BREADY => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_BREADY,
        m_axi_data_BRESP => ap_const_lv2_0,
        m_axi_data_BID => ap_const_lv1_0,
        m_axi_data_BUSER => ap_const_lv1_0,
        ldata1_din => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_din,
        ldata1_full_n => ldata1_full_n,
        ldata1_write => grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_write,
        sext_ln952 => trunc_ln_reg_113,
        p_read1 => p_read1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln1057_reg_109 <= icmp_ln1057_fu_72_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1057_reg_109 = ap_const_lv1_0))) then
                trunc_ln_reg_113 <= p_read(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1057_reg_109, ap_CS_fsm_state10, ap_block_state2_io, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln1057_reg_109 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln1057_reg_109 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_on_subcall_done)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state10_on_subcall_done_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_done = ap_const_logic_0) and (icmp_ln1057_reg_109 = ap_const_lv1_0));
    end process;


    ap_block_state2_io_assign_proc : process(m_axi_data_ARREADY, icmp_ln1057_reg_109)
    begin
                ap_block_state2_io <= ((m_axi_data_ARREADY = ap_const_logic_0) and (icmp_ln1057_reg_109 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_AR_assign_proc : process(m_axi_data_ARREADY, ap_CS_fsm_state2, icmp_ln1057_reg_109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1057_reg_109 = ap_const_lv1_0))) then 
            data_blk_n_AR <= m_axi_data_ARREADY;
        else 
            data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ap_start_reg;
    icmp_ln1057_fu_72_p2 <= "1" when (p_read1 = ap_const_lv21_0) else "0";
    ldata1_din <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_din;

    ldata1_write_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_write, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0))) then 
            ldata1_write <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_ldata1_write;
        else 
            ldata1_write <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_data_ARADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln952_fu_88_p1, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln1057_reg_109 = ap_const_lv1_0))) then 
            m_axi_data_ARADDR <= sext_ln952_fu_88_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARADDR <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARADDR;
        else 
            m_axi_data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_data_ARBURST_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARBURST, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARBURST <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARBURST;
        else 
            m_axi_data_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_data_ARCACHE_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARCACHE, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARCACHE <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARCACHE;
        else 
            m_axi_data_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_data_ARID_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARID <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARID;
        else 
            m_axi_data_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_data_ARLEN_assign_proc : process(ap_CS_fsm_state2, icmp_ln1057_reg_109, zext_ln952_fu_99_p1, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln1057_reg_109 = ap_const_lv1_0))) then 
            m_axi_data_ARLEN <= zext_ln952_fu_99_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARLEN <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLEN;
        else 
            m_axi_data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_data_ARLOCK_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLOCK, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARLOCK <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARLOCK;
        else 
            m_axi_data_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_data_ARPROT_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARPROT, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARPROT <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARPROT;
        else 
            m_axi_data_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_data_ARQOS_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARQOS, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARQOS <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARQOS;
        else 
            m_axi_data_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_data_ARREGION_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARREGION, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARREGION <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARREGION;
        else 
            m_axi_data_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_data_ARSIZE_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARSIZE, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARSIZE <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARSIZE;
        else 
            m_axi_data_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_data_ARUSER_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARUSER, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARUSER <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARUSER;
        else 
            m_axi_data_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_data_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln1057_reg_109 = ap_const_lv1_0))) then 
            m_axi_data_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_ARVALID <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_ARVALID;
        else 
            m_axi_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_AWADDR <= ap_const_lv64_0;
    m_axi_data_AWBURST <= ap_const_lv2_0;
    m_axi_data_AWCACHE <= ap_const_lv4_0;
    m_axi_data_AWID <= ap_const_lv1_0;
    m_axi_data_AWLEN <= ap_const_lv32_0;
    m_axi_data_AWLOCK <= ap_const_lv2_0;
    m_axi_data_AWPROT <= ap_const_lv3_0;
    m_axi_data_AWQOS <= ap_const_lv4_0;
    m_axi_data_AWREGION <= ap_const_lv4_0;
    m_axi_data_AWSIZE <= ap_const_lv3_0;
    m_axi_data_AWUSER <= ap_const_lv1_0;
    m_axi_data_AWVALID <= ap_const_logic_0;
    m_axi_data_BREADY <= ap_const_logic_0;

    m_axi_data_RREADY_assign_proc : process(icmp_ln1057_reg_109, grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1057_reg_109 = ap_const_lv1_0)))) then 
            m_axi_data_RREADY <= grp_Axi2AxiStream_Pipeline_MMIterInLoop1_fu_62_m_axi_data_RREADY;
        else 
            m_axi_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_WDATA <= ap_const_lv32_0;
    m_axi_data_WID <= ap_const_lv1_0;
    m_axi_data_WLAST <= ap_const_logic_0;
    m_axi_data_WSTRB <= ap_const_lv4_0;
    m_axi_data_WUSER <= ap_const_lv1_0;
    m_axi_data_WVALID <= ap_const_logic_0;
        sext_ln952_fu_88_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_78_p4),64));

    trunc_ln_fu_78_p4 <= p_read(63 downto 2);
    zext_ln952_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),32));
end behav;
