-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_bgr2hsv_9_1024_1024_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mat_blur_4229_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    mat_blur_4229_empty_n : IN STD_LOGIC;
    mat_blur_4229_read : OUT STD_LOGIC;
    mat_hsv_4230_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    mat_hsv_4230_full_n : IN STD_LOGIC;
    mat_hsv_4230_write : OUT STD_LOGIC );
end;


architecture behav of reversi_accel_bgr2hsv_9_1024_1024_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_800 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_const_lv30_800 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xf_cv_icvSaturate8u_cv_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce0 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce1 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce2 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce3 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0 : STD_LOGIC;
    signal void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0 : STD_LOGIC;
    signal void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_blur_4229_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mat_hsv_4230_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_669 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_V_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_677 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal b_V_reg_677_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_677_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_677_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_684_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_690_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln123_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln123_reg_696_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1526_fu_281_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1526_reg_703 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1526_reg_703_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1526_reg_703_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1526_reg_703_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_3_fu_322_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal v_3_reg_724 : STD_LOGIC_VECTOR (8 downto 0);
    signal vmin_V_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal vmin_V_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal vmin_V_reg_729_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal vmin_V_reg_729_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln123_1_fu_332_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln123_1_reg_735 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1526_1_fu_335_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1526_1_reg_740 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln225_1_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln225_1_reg_750 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln225_1_reg_750_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal v_fu_382_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal v_reg_761 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_3_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal add_ln223_1_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_reg_771_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_reg_771_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_reg_771_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_reg_771_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_reg_771_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal vr_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vr_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal vr_reg_777_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal diff_V_fu_415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal diff_V_reg_789 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_244_fu_431_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_244_reg_799 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln157_2_fu_520_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln157_2_reg_804 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln161_fu_608_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln161_reg_829 : STD_LOGIC_VECTOR (7 downto 0);
    signal op_assign_1_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln128_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal zext_ln573_125_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_126_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln573_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_127_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_fu_112 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln128_fu_243_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_240_fu_284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1525_fu_290_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_242_fu_301_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_232_fu_307_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln147_fu_318_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_241_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln225_fu_355_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_243_fu_361_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_234_fu_367_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln148_fu_378_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln223_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1049_fu_402_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln223_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_238_fu_435_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_443_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln157_fu_451_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln157_fu_439_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln157_fu_455_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln126_1_fu_420_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln157_fu_461_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln157_1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_239_fu_484_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln157_1_fu_492_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln157_1_fu_500_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln157_2_fu_488_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln157_1_fu_504_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1526_1_fu_476_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln157_1_fu_510_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln157_3_fu_516_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln157_1_fu_467_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln126_fu_531_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_237_fu_545_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln157_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1526_fu_559_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln157_2_fu_567_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln158_fu_576_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_584_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_640_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln159_1_fu_591_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_584_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln159_fu_600_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln159_1_fu_591_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal op_assign_1_fu_614_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_631_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_631_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_631_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_640_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_631_ce : STD_LOGIC;
    signal grp_fu_640_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_224_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_224_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_631_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_640_p20 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component reversi_accel_mac_muladd_20s_8ns_12ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component reversi_accel_ama_addmuladd_13s_9s_17ns_12ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component reversi_accel_bgr2hsv_9_1024_1024_1_s_xf_cv_icvSaturate8u_cv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reversi_accel_bgr2hsv_9_1024_1024_1_s_void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reversi_accel_bgr2hsv_9_1024_1024_1_s_void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    xf_cv_icvSaturate8u_cv_U : component reversi_accel_bgr2hsv_9_1024_1024_1_s_xf_cv_icvSaturate8u_cv
    generic map (
        DataWidth => 8,
        AddressRange => 769,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xf_cv_icvSaturate8u_cv_address0,
        ce0 => xf_cv_icvSaturate8u_cv_ce0,
        q0 => xf_cv_icvSaturate8u_cv_q0,
        address1 => xf_cv_icvSaturate8u_cv_address1,
        ce1 => xf_cv_icvSaturate8u_cv_ce1,
        q1 => xf_cv_icvSaturate8u_cv_q1,
        address2 => xf_cv_icvSaturate8u_cv_address2,
        ce2 => xf_cv_icvSaturate8u_cv_ce2,
        q2 => xf_cv_icvSaturate8u_cv_q2,
        address3 => xf_cv_icvSaturate8u_cv_address3,
        ce3 => xf_cv_icvSaturate8u_cv_ce3,
        q3 => xf_cv_icvSaturate8u_cv_q3);

    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_U : component reversi_accel_bgr2hsv_9_1024_1024_1_s_void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_address0,
        ce0 => void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0,
        q0 => void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_q0);

    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_U : component reversi_accel_bgr2hsv_9_1024_1024_1_s_void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_cud
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_address0,
        ce0 => void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0,
        q0 => void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_q0);

    mul_32ns_32ns_64_2_1_U176 : component reversi_accel_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_224_p0,
        din1 => grp_fu_224_p1,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    mac_muladd_20s_8ns_12ns_20_4_1_U177 : component reversi_accel_mac_muladd_20s_8ns_12ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_631_p0,
        din1 => grp_fu_631_p1,
        din2 => grp_fu_631_p2,
        ce => grp_fu_631_ce,
        dout => grp_fu_631_p3);

    ama_addmuladd_13s_9s_17ns_12ns_30_4_1_U178 : component reversi_accel_ama_addmuladd_13s_9s_17ns_12ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 17,
        din3_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln157_2_fu_567_p2,
        din1 => ret_237_fu_545_p2,
        din2 => grp_fu_640_p2,
        din3 => grp_fu_640_p3,
        ce => grp_fu_640_ce,
        dout => grp_fu_640_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_112 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln128_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_112 <= add_ln128_fu_243_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln157_2_reg_804 <= add_ln157_2_fu_520_p2;
                add_ln161_reg_829 <= add_ln161_fu_608_p2;
                add_ln223_1_reg_771 <= add_ln223_1_fu_392_p2;
                add_ln223_1_reg_771_pp0_iter10_reg <= add_ln223_1_reg_771_pp0_iter9_reg;
                add_ln223_1_reg_771_pp0_iter6_reg <= add_ln223_1_reg_771;
                add_ln223_1_reg_771_pp0_iter7_reg <= add_ln223_1_reg_771_pp0_iter6_reg;
                add_ln223_1_reg_771_pp0_iter8_reg <= add_ln223_1_reg_771_pp0_iter7_reg;
                add_ln223_1_reg_771_pp0_iter9_reg <= add_ln223_1_reg_771_pp0_iter8_reg;
                b_V_reg_677_pp0_iter2_reg <= b_V_reg_677;
                b_V_reg_677_pp0_iter3_reg <= b_V_reg_677_pp0_iter2_reg;
                b_V_reg_677_pp0_iter4_reg <= b_V_reg_677_pp0_iter3_reg;
                diff_V_reg_789 <= diff_V_fu_415_p2;
                g_V_reg_684_pp0_iter2_reg <= g_V_reg_684;
                g_V_reg_684_pp0_iter3_reg <= g_V_reg_684_pp0_iter2_reg;
                g_V_reg_684_pp0_iter4_reg <= g_V_reg_684_pp0_iter3_reg;
                op_assign_1_reg_834 <= op_assign_1_fu_614_p1(19 downto 12);
                r_V_reg_690_pp0_iter2_reg <= r_V_reg_690;
                r_V_reg_690_pp0_iter3_reg <= r_V_reg_690_pp0_iter2_reg;
                ret_244_reg_799 <= ret_244_fu_431_p2;
                v_3_reg_724 <= v_3_fu_322_p2;
                v_reg_761 <= v_fu_382_p2;
                vg_reg_783 <= vg_fu_405_p2;
                vmin_V_reg_729 <= vmin_V_fu_327_p2;
                vmin_V_reg_729_pp0_iter4_reg <= vmin_V_reg_729;
                vmin_V_reg_729_pp0_iter5_reg <= vmin_V_reg_729_pp0_iter4_reg;
                vr_reg_777 <= vr_fu_397_p2;
                vr_reg_777_pp0_iter6_reg <= vr_reg_777;
                xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg <= xf_cv_icvSaturate8u_cv_load_reg_719;
                    zext_ln123_1_reg_735(8 downto 0) <= zext_ln123_1_fu_332_p1(8 downto 0);
                    zext_ln123_reg_696(7 downto 0) <= zext_ln123_fu_278_p1(7 downto 0);
                    zext_ln123_reg_696_pp0_iter3_reg(7 downto 0) <= zext_ln123_reg_696(7 downto 0);
                    zext_ln123_reg_696_pp0_iter4_reg(7 downto 0) <= zext_ln123_reg_696_pp0_iter3_reg(7 downto 0);
                    zext_ln123_reg_696_pp0_iter5_reg(7 downto 0) <= zext_ln123_reg_696_pp0_iter4_reg(7 downto 0);
                    zext_ln1526_1_reg_740(7 downto 0) <= zext_ln1526_1_fu_335_p1(7 downto 0);
                    zext_ln1526_reg_703(7 downto 0) <= zext_ln1526_fu_281_p1(7 downto 0);
                    zext_ln1526_reg_703_pp0_iter3_reg(7 downto 0) <= zext_ln1526_reg_703(7 downto 0);
                    zext_ln1526_reg_703_pp0_iter4_reg(7 downto 0) <= zext_ln1526_reg_703_pp0_iter3_reg(7 downto 0);
                    zext_ln1526_reg_703_pp0_iter5_reg(7 downto 0) <= zext_ln1526_reg_703_pp0_iter4_reg(7 downto 0);
                    zext_ln225_1_reg_750(7 downto 0) <= zext_ln225_1_fu_358_p1(7 downto 0);
                    zext_ln225_1_reg_750_pp0_iter5_reg(7 downto 0) <= zext_ln225_1_reg_750(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b_V_reg_677 <= b_V_fu_254_p1;
                g_V_reg_684 <= mat_blur_4229_dout(15 downto 8);
                r_V_reg_690 <= mat_blur_4229_dout(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_669 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                xf_cv_icvSaturate8u_cv_load_3_reg_766 <= xf_cv_icvSaturate8u_cv_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                xf_cv_icvSaturate8u_cv_load_reg_719 <= xf_cv_icvSaturate8u_cv_q3;
            end if;
        end if;
    end process;
    zext_ln123_reg_696(8) <= '0';
    zext_ln123_reg_696_pp0_iter3_reg(8) <= '0';
    zext_ln123_reg_696_pp0_iter4_reg(8) <= '0';
    zext_ln123_reg_696_pp0_iter5_reg(8) <= '0';
    zext_ln1526_reg_703(8) <= '0';
    zext_ln1526_reg_703_pp0_iter3_reg(8) <= '0';
    zext_ln1526_reg_703_pp0_iter4_reg(8) <= '0';
    zext_ln1526_reg_703_pp0_iter5_reg(8) <= '0';
    zext_ln123_1_reg_735(9) <= '0';
    zext_ln1526_1_reg_740(9 downto 8) <= "00";
    zext_ln225_1_reg_750(8) <= '0';
    zext_ln225_1_reg_750_pp0_iter5_reg(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln128_fu_238_p2, ap_enable_reg_pp0_iter10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln128_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln128_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln128_fu_243_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_112) + unsigned(ap_const_lv64_1));
    add_ln1525_fu_290_p2 <= std_logic_vector(unsigned(ret_240_fu_284_p2) + unsigned(zext_ln1526_fu_281_p1));
    add_ln157_1_fu_504_p2 <= std_logic_vector(unsigned(zext_ln157_1_fu_500_p1) + unsigned(sext_ln157_2_fu_488_p1));
    add_ln157_2_fu_520_p2 <= std_logic_vector(signed(sext_ln157_3_fu_516_p1) + signed(sext_ln157_1_fu_467_p1));
    add_ln157_fu_455_p2 <= std_logic_vector(unsigned(zext_ln157_fu_451_p1) + unsigned(sext_ln157_fu_439_p1));
    add_ln161_fu_608_p2 <= std_logic_vector(unsigned(select_ln159_fu_600_p3) + unsigned(trunc_ln159_1_fu_591_p4));
    add_ln223_1_fu_392_p2 <= std_logic_vector(unsigned(add_ln223_fu_387_p2) + unsigned(xf_cv_icvSaturate8u_cv_load_reg_719_pp0_iter4_reg));
    add_ln223_fu_387_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_q1) + unsigned(b_V_reg_677_pp0_iter4_reg));
    and_ln157_1_fu_510_p2 <= (select_ln1526_1_fu_476_p3 and add_ln157_1_fu_504_p2);
    and_ln157_2_fu_567_p2 <= (select_ln1526_fu_559_p3 and add_ln157_2_reg_804);
    and_ln157_fu_461_p2 <= (select_ln126_1_fu_420_p3 and add_ln157_fu_455_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(mat_blur_4229_empty_n, mat_hsv_4230_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (mat_hsv_4230_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (mat_blur_4229_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(mat_blur_4229_empty_n, mat_hsv_4230_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (mat_hsv_4230_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (mat_blur_4229_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(mat_blur_4229_empty_n, mat_hsv_4230_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (mat_hsv_4230_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (mat_blur_4229_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter11_assign_proc : process(mat_hsv_4230_full_n)
    begin
                ap_block_state14_pp0_stage0_iter11 <= (mat_hsv_4230_full_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(mat_blur_4229_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (mat_blur_4229_empty_n = ap_const_logic_0);
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln128_fu_238_p2)
    begin
        if ((icmp_ln128_fu_238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_V_fu_254_p1 <= mat_blur_4229_dout(8 - 1 downto 0);
    diff_V_fu_415_p2 <= std_logic_vector(unsigned(sub_ln223_fu_411_p2) + unsigned(add_ln223_1_reg_771));

    grp_fu_224_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_224_p0 <= grp_fu_224_p00(32 - 1 downto 0);
    grp_fu_224_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),64));
    grp_fu_224_p1 <= grp_fu_224_p10(32 - 1 downto 0);
    grp_fu_224_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),64));

    grp_fu_631_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_631_ce <= ap_const_logic_1;
        else 
            grp_fu_631_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_631_p0 <= void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_q0(20 - 1 downto 0);
    grp_fu_631_p1 <= grp_fu_631_p10(8 - 1 downto 0);
    grp_fu_631_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(diff_V_reg_789),20));
    grp_fu_631_p2 <= ap_const_lv20_800(12 - 1 downto 0);

    grp_fu_640_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_640_ce <= ap_const_logic_1;
        else 
            grp_fu_640_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_640_p2 <= grp_fu_640_p20(17 - 1 downto 0);
    grp_fu_640_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln158_fu_576_p1),30));
    grp_fu_640_p3 <= ap_const_lv30_800(12 - 1 downto 0);
    icmp_ln128_fu_238_p2 <= "1" when (indvar_flatten_fu_112 = bound_reg_669) else "0";

    mat_blur_4229_blk_n_assign_proc : process(mat_blur_4229_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_blur_4229_blk_n <= mat_blur_4229_empty_n;
        else 
            mat_blur_4229_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mat_blur_4229_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_blur_4229_read <= ap_const_logic_1;
        else 
            mat_blur_4229_read <= ap_const_logic_0;
        end if; 
    end process;


    mat_hsv_4230_blk_n_assign_proc : process(mat_hsv_4230_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mat_hsv_4230_blk_n <= mat_hsv_4230_full_n;
        else 
            mat_hsv_4230_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_hsv_4230_din <= ((add_ln223_1_reg_771_pp0_iter10_reg & op_assign_1_reg_834) & add_ln161_reg_829);

    mat_hsv_4230_write_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mat_hsv_4230_write <= ap_const_logic_1;
        else 
            mat_hsv_4230_write <= ap_const_logic_0;
        end if; 
    end process;

    op_assign_1_fu_614_p1 <= grp_fu_631_p3;
    ret_232_fu_307_p2 <= (ret_242_fu_301_p2 xor ap_const_lv9_100);
    ret_234_fu_367_p2 <= (ret_243_fu_361_p2 xor ap_const_lv9_100);
    ret_237_fu_545_p2 <= (select_ln126_fu_531_p3 and ret_244_reg_799);
    ret_238_fu_435_p2 <= std_logic_vector(unsigned(zext_ln123_reg_696_pp0_iter5_reg) - unsigned(zext_ln225_1_reg_750_pp0_iter5_reg));
    ret_239_fu_484_p2 <= std_logic_vector(unsigned(zext_ln225_1_reg_750_pp0_iter5_reg) - unsigned(zext_ln1526_reg_703_pp0_iter5_reg));
    ret_240_fu_284_p2 <= std_logic_vector(signed(ap_const_lv9_100) - signed(zext_ln123_fu_278_p1));
    ret_241_fu_338_p2 <= std_logic_vector(unsigned(zext_ln1526_1_fu_335_p1) - unsigned(zext_ln123_1_fu_332_p1));
    ret_242_fu_301_p2 <= std_logic_vector(unsigned(zext_ln123_fu_278_p1) - unsigned(zext_ln1526_fu_281_p1));
    ret_243_fu_361_p2 <= std_logic_vector(unsigned(zext_ln225_fu_355_p1) - unsigned(zext_ln225_1_fu_358_p1));
    ret_244_fu_431_p2 <= std_logic_vector(unsigned(zext_ln1526_reg_703_pp0_iter5_reg) - unsigned(zext_ln123_reg_696_pp0_iter5_reg));
    ret_fu_344_p2 <= std_logic_vector(unsigned(ret_241_fu_338_p2) + unsigned(ap_const_lv10_100));
    select_ln126_1_fu_420_p3 <= 
        ap_const_lv11_7FF when (vg_reg_783(0) = '1') else 
        ap_const_lv11_0;
    select_ln126_fu_531_p3 <= 
        ap_const_lv9_1FF when (vr_reg_777_pp0_iter6_reg(0) = '1') else 
        ap_const_lv9_0;
    select_ln1526_1_fu_476_p3 <= 
        ap_const_lv12_FFF when (xor_ln157_1_fu_471_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln1526_fu_559_p3 <= 
        ap_const_lv13_1FFF when (xor_ln157_fu_554_p2(0) = '1') else 
        ap_const_lv13_0;
    select_ln159_fu_600_p3 <= 
        ap_const_lv8_B4 when (tmp_fu_584_p3(0) = '1') else 
        ap_const_lv8_0;
        sext_ln157_1_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln157_fu_461_p2),13));

        sext_ln157_2_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_239_fu_484_p2),12));

        sext_ln157_3_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln157_1_fu_510_p2),13));

        sext_ln157_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_238_fu_435_p2),11));

        sext_ln573_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_fu_344_p2),64));

    shl_ln157_1_fu_492_p3 <= (diff_V_fu_415_p2 & ap_const_lv2_0);
    shl_ln_fu_443_p3 <= (diff_V_fu_415_p2 & ap_const_lv1_0);
    sub_ln223_fu_411_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_load_3_reg_766) - unsigned(vmin_V_reg_729_pp0_iter5_reg));
    tmp_fu_584_p1 <= grp_fu_640_p4;
    tmp_fu_584_p3 <= tmp_fu_584_p1(29 downto 29);
    trunc_ln158_fu_576_p1 <= void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_q0(17 - 1 downto 0);
    trunc_ln159_1_fu_591_p1 <= grp_fu_640_p4;
    trunc_ln159_1_fu_591_p4 <= trunc_ln159_1_fu_591_p1(19 downto 12);
    v_3_fu_322_p2 <= std_logic_vector(unsigned(zext_ln147_fu_318_p1) + unsigned(zext_ln123_reg_696));
    v_fu_382_p2 <= std_logic_vector(unsigned(zext_ln123_1_reg_735) + unsigned(zext_ln148_fu_378_p1));
    vg_fu_405_p2 <= "1" when (v_fu_382_p2 = zext_ln1049_fu_402_p1) else "0";
    vmin_V_fu_327_p2 <= std_logic_vector(unsigned(b_V_reg_677_pp0_iter2_reg) - unsigned(xf_cv_icvSaturate8u_cv_q2));
    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_address0 <= zext_ln573_fu_526_p1(8 - 1 downto 0);

    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0 <= ap_const_logic_1;
        else 
            void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_hdiv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_address0 <= zext_ln156_fu_427_p1(8 - 1 downto 0);

    void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0 <= ap_const_logic_1;
        else 
            void_bgr2hsv_9_1024_1024_1_Mat_9_1024_1024_1_2_Mat_9_1024_1024_1_2_sdiv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vr_fu_397_p2 <= "1" when (v_fu_382_p2 = zext_ln1526_1_reg_740) else "0";
    xf_cv_icvSaturate8u_cv_address0 <= zext_ln573_127_fu_373_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address1 <= sext_ln573_fu_350_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address2 <= zext_ln573_126_fu_313_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address3 <= zext_ln573_125_fu_296_p1(10 - 1 downto 0);

    xf_cv_icvSaturate8u_cv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce3_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln157_1_fu_471_p2 <= (vg_reg_783 xor ap_const_lv1_1);
    xor_ln157_fu_554_p2 <= (vr_reg_777_pp0_iter6_reg xor ap_const_lv1_1);
    zext_ln1049_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_reg_684_pp0_iter4_reg),10));
    zext_ln123_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_3_reg_724),10));
    zext_ln123_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V_reg_677),9));
    zext_ln147_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_q3),9));
    zext_ln148_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_q1),10));
    zext_ln1526_1_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_690_pp0_iter3_reg),10));
    zext_ln1526_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_reg_684),9));
    zext_ln156_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_reg_761),64));
    zext_ln157_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln157_1_fu_492_p3),12));
    zext_ln157_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_443_p3),11));
    zext_ln225_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_690_pp0_iter3_reg),9));
    zext_ln225_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vmin_V_reg_729),9));
    zext_ln573_125_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1525_fu_290_p2),64));
    zext_ln573_126_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_232_fu_307_p2),64));
    zext_ln573_127_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_234_fu_367_p2),64));
    zext_ln573_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(diff_V_fu_415_p2),64));
end behav;
