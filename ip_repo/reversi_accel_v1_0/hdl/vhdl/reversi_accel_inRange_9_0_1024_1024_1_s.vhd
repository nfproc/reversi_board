-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_inRange_9_0_1024_1024_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mat_hsv1_4231_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    mat_hsv1_4231_empty_n : IN STD_LOGIC;
    mat_hsv1_4231_read : OUT STD_LOGIC;
    mat_green1_4233_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    mat_green1_4233_full_n : IN STD_LOGIC;
    mat_green1_4233_write : OUT STD_LOGIC );
end;


architecture behav of reversi_accel_inRange_9_0_1024_1024_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lower_thresh2_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal width_fu_46_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_reg_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_fu_51_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_reg_61 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start : STD_LOGIC;
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done : STD_LOGIC;
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_idle : STD_LOGIC;
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_ready : STD_LOGIC;
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_hsv1_4231_read : STD_LOGIC;
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_green1_4233_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_green1_4233_write : STD_LOGIC;
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_lower_thresh_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_lower_thresh_ce0 : STD_LOGIC;
    signal grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call6 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat_hsv1_4231_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        mat_hsv1_4231_empty_n : IN STD_LOGIC;
        mat_hsv1_4231_read : OUT STD_LOGIC;
        mat_green1_4233_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_green1_4233_full_n : IN STD_LOGIC;
        mat_green1_4233_write : OUT STD_LOGIC;
        lower_thresh_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        lower_thresh_ce0 : OUT STD_LOGIC;
        lower_thresh_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component reversi_accel_inRange_9_0_1024_1024_1_s_lower_thresh2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    lower_thresh2_U : component reversi_accel_inRange_9_0_1024_1024_1_s_lower_thresh2
    generic map (
        DataWidth => 7,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_lower_thresh_address0,
        ce0 => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_lower_thresh_ce0,
        q0 => lower_thresh2_q0);

    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34 : component reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start,
        ap_done => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done,
        ap_idle => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_idle,
        ap_ready => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_ready,
        mat_hsv1_4231_dout => mat_hsv1_4231_dout,
        mat_hsv1_4231_empty_n => mat_hsv1_4231_empty_n,
        mat_hsv1_4231_read => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_hsv1_4231_read,
        mat_green1_4233_din => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_green1_4233_din,
        mat_green1_4233_full_n => mat_green1_4233_full_n,
        mat_green1_4233_write => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_green1_4233_write,
        lower_thresh_address0 => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_lower_thresh_address0,
        lower_thresh_ce0 => grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_lower_thresh_ce0,
        lower_thresh_q0 => lower_thresh2_q0,
        height => height_reg_61,
        width => width_reg_56);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_ready = ap_const_logic_1)) then 
                    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                height_reg_61 <= height_fu_51_p1;
                width_reg_56 <= width_fu_46_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done)
    begin
        if ((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call6_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call6 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start <= grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_ap_start_reg;
    height_fu_51_p1 <= p_read(16 - 1 downto 0);
    mat_green1_4233_din <= grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_green1_4233_din;

    mat_green1_4233_write_assign_proc : process(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_green1_4233_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mat_green1_4233_write <= grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_green1_4233_write;
        else 
            mat_green1_4233_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_hsv1_4231_read_assign_proc : process(grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_hsv1_4231_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mat_hsv1_4231_read <= grp_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_s_fu_34_mat_hsv1_4231_read;
        else 
            mat_hsv1_4231_read <= ap_const_logic_0;
        end if; 
    end process;

    width_fu_46_p1 <= p_read1(16 - 1 downto 0);
end behav;
