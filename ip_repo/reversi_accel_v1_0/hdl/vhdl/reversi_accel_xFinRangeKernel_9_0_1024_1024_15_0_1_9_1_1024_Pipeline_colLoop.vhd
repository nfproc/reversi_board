-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mat_hsv1_4231_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    mat_hsv1_4231_empty_n : IN STD_LOGIC;
    mat_hsv1_4231_read : OUT STD_LOGIC;
    mat_green1_4233_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    mat_green1_4233_full_n : IN STD_LOGIC;
    mat_green1_4233_write : OUT STD_LOGIC;
    width : IN STD_LOGIC_VECTOR (15 downto 0);
    p_lower_thresh_V_load_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    p_lower_thresh_V_load_1_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    p_lower_thresh_V_load_2_cast : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of reversi_accel_xFinRangeKernel_9_0_1024_1024_15_0_1_9_1_1024_Pipeline_colLoop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_5B : STD_LOGIC_VECTOR (7 downto 0) := "01011011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln112_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mat_hsv1_4231_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mat_green1_4233_blk_n : STD_LOGIC;
    signal p_lower_thresh_V_load_2_cast_cast_fu_105_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lower_thresh_V_load_2_cast_cast_reg_235 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_lower_thresh_V_load_1_cast_cast_fu_109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lower_thresh_V_load_1_cast_cast_reg_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lower_thresh_V_load_cast_cast_fu_113_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lower_thresh_V_load_cast_cast_reg_245 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1061_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1061_reg_254 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1061_1_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1061_1_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1061_2_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1061_2_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_V_load : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1057_fu_131_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_val1_V_fu_142_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_val1_V_1_fu_157_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_val1_V_2_fu_172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1061_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1061_2_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1061_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1527_1_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1527_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component reversi_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    j_V_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_125_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_V_fu_64 <= add_ln1057_fu_131_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_V_fu_64 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln1061_1_reg_264 <= icmp_ln1061_1_fu_167_p2;
                icmp_ln1061_2_reg_269 <= icmp_ln1061_2_fu_182_p2;
                icmp_ln1061_reg_254 <= icmp_ln1061_fu_146_p2;
                icmp_ln1069_reg_259 <= icmp_ln1069_fu_151_p2;
                    p_lower_thresh_V_load_1_cast_cast_reg_240(6 downto 0) <= p_lower_thresh_V_load_1_cast_cast_fu_109_p1(6 downto 0);
                    p_lower_thresh_V_load_2_cast_cast_reg_235(6 downto 0) <= p_lower_thresh_V_load_2_cast_cast_fu_105_p1(6 downto 0);
                    p_lower_thresh_V_load_cast_cast_reg_245(6 downto 0) <= p_lower_thresh_V_load_cast_cast_fu_113_p1(6 downto 0);
            end if;
        end if;
    end process;
    p_lower_thresh_V_load_2_cast_cast_reg_235(7) <= '0';
    p_lower_thresh_V_load_1_cast_cast_reg_240(7) <= '0';
    p_lower_thresh_V_load_cast_cast_reg_245(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1057_fu_131_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_V_load) + unsigned(ap_const_lv16_1));
    and_ln1527_1_fu_207_p2 <= (xor_ln1061_2_fu_197_p2 and xor_ln1061_1_fu_192_p2);
    and_ln1527_fu_202_p2 <= (xor_ln1061_fu_187_p2 and icmp_ln1069_reg_259);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, mat_hsv1_4231_empty_n, mat_green1_4233_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((mat_green1_4233_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mat_hsv1_4231_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, mat_hsv1_4231_empty_n, mat_green1_4233_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((mat_green1_4233_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mat_hsv1_4231_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, mat_hsv1_4231_empty_n, mat_green1_4233_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((mat_green1_4233_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mat_hsv1_4231_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(mat_hsv1_4231_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (mat_hsv1_4231_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(mat_green1_4233_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (mat_green1_4233_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln112_fu_125_p2)
    begin
        if (((icmp_ln112_fu_125_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_V_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_V_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_j_V_load <= j_V_fu_64;
        end if; 
    end process;

    icmp_ln1061_1_fu_167_p2 <= "1" when (unsigned(tmp_val1_V_1_fu_157_p4) < unsigned(p_lower_thresh_V_load_1_cast_cast_reg_240)) else "0";
    icmp_ln1061_2_fu_182_p2 <= "1" when (unsigned(tmp_val1_V_2_fu_172_p4) < unsigned(p_lower_thresh_V_load_2_cast_cast_reg_235)) else "0";
    icmp_ln1061_fu_146_p2 <= "1" when (unsigned(tmp_val1_V_fu_142_p1) < unsigned(p_lower_thresh_V_load_cast_cast_reg_245)) else "0";
    icmp_ln1069_fu_151_p2 <= "1" when (unsigned(tmp_val1_V_fu_142_p1) < unsigned(ap_const_lv8_5B)) else "0";
    icmp_ln112_fu_125_p2 <= "1" when (ap_sig_allocacmp_j_V_load = width) else "0";

    mat_green1_4233_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, mat_green1_4233_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_green1_4233_blk_n <= mat_green1_4233_full_n;
        else 
            mat_green1_4233_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_green1_4233_din <= 
        ap_const_lv8_FF when (ret_fu_213_p2(0) = '1') else 
        ap_const_lv8_0;

    mat_green1_4233_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_green1_4233_write <= ap_const_logic_1;
        else 
            mat_green1_4233_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_hsv1_4231_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, mat_hsv1_4231_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_hsv1_4231_blk_n <= mat_hsv1_4231_empty_n;
        else 
            mat_hsv1_4231_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mat_hsv1_4231_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mat_hsv1_4231_read <= ap_const_logic_1;
        else 
            mat_hsv1_4231_read <= ap_const_logic_0;
        end if; 
    end process;

    p_lower_thresh_V_load_1_cast_cast_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lower_thresh_V_load_1_cast),8));
    p_lower_thresh_V_load_2_cast_cast_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lower_thresh_V_load_2_cast),8));
    p_lower_thresh_V_load_cast_cast_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lower_thresh_V_load_cast),8));
    ret_fu_213_p2 <= (and_ln1527_fu_202_p2 and and_ln1527_1_fu_207_p2);
    tmp_val1_V_1_fu_157_p4 <= mat_hsv1_4231_dout(15 downto 8);
    tmp_val1_V_2_fu_172_p4 <= mat_hsv1_4231_dout(23 downto 16);
    tmp_val1_V_fu_142_p1 <= mat_hsv1_4231_dout(8 - 1 downto 0);
    xor_ln1061_1_fu_192_p2 <= (icmp_ln1061_1_reg_264 xor ap_const_lv1_1);
    xor_ln1061_2_fu_197_p2 <= (icmp_ln1061_2_reg_269 xor ap_const_lv1_1);
    xor_ln1061_fu_187_p2 <= (icmp_ln1061_reg_254 xor ap_const_lv1_1);
end behav;
