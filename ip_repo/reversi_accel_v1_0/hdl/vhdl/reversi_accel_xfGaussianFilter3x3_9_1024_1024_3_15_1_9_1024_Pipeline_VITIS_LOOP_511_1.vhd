-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_xfGaussianFilter3x3_9_1024_1024_3_15_1_9_1024_Pipeline_VITIS_LOOP_511_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_val1_V : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_256_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_257_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_258_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_259_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_260_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_val1_V_4_out : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_val1_V_4_out_ap_vld : OUT STD_LOGIC;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_din11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_15_s_fu_581_p_ce : OUT STD_LOGIC );
end;


architecture behav of reversi_accel_xfGaussianFilter3x3_9_1024_1024_3_15_1_9_1024_Pipeline_VITIS_LOOP_511_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln511_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln511_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln511_reg_902_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_load_reg_906 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_906_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_fu_192_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln512_reg_933_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_1_fu_204_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_1_reg_959 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_1_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_5_fu_216_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_5_reg_971 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_2_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_2_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_9_fu_228_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_9_reg_983 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_3_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_3_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_13_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_13_reg_995 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_4_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_4_reg_1000 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_17_fu_252_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_17_reg_1007 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_5_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_5_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_21_fu_264_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_21_reg_1019 : STD_LOGIC_VECTOR (4 downto 0);
    signal srcbuf10_V_fu_353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf10_V_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf11_V_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf11_V_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf20_V_fu_495_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf20_V_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf21_V_fu_566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf21_V_reg_1039 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf30_V_fu_637_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf30_V_reg_1044 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf31_V_fu_708_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf31_V_reg_1049 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1054 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln414_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_1059 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln414_fu_716_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln414_reg_1067 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_xFapplygaussian3x3_15_s_fu_141_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call94 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call94 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call94 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call94 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call94 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call94 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call94 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call94 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call94 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call94 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call94 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call94 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp132 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_fu_68 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_75_fu_819_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_72 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_fu_183_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_fu_76 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln674_fu_295_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_2_fu_299_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_286_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln674_fu_303_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_2_fu_316_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_3_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_1_fu_310_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_fu_327_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_1_fu_331_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_fu_335_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_1_fu_341_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_s_fu_347_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln674_4_fu_366_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_6_fu_370_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_fu_357_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln674_3_fu_374_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_5_fu_387_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_7_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_4_fu_381_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_2_fu_398_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_3_fu_402_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_2_fu_406_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_3_fu_412_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_70_fu_418_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln674_8_fu_437_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_10_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_428_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln674_6_fu_445_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_8_fu_458_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_11_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_7_fu_452_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_4_fu_469_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_5_fu_473_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_4_fu_477_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_5_fu_483_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_71_fu_489_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln674_12_fu_508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_14_fu_512_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_fu_499_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln674_9_fu_516_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_11_fu_529_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_15_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_10_fu_523_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_6_fu_540_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_7_fu_544_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_6_fu_548_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_7_fu_554_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_72_fu_560_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln674_16_fu_579_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_18_fu_583_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_68_fu_570_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln674_12_fu_587_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_14_fu_600_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_19_fu_605_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_13_fu_594_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_8_fu_611_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_9_fu_615_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_8_fu_619_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_9_fu_625_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_73_fu_631_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln674_20_fu_650_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_22_fu_654_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_69_fu_641_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln674_15_fu_658_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_17_fu_671_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_23_fu_676_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln674_16_fu_665_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_10_fu_682_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_11_fu_686_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_10_fu_690_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_11_fu_696_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_74_fu_702_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln414_fu_727_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln414_2_fu_737_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln414_1_fu_732_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln414_1_fu_742_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln413_fu_724_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln414_fu_748_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln414_fu_760_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_70_fu_766_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln414_1_fu_752_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln414_2_fu_756_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln414_1_fu_783_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln414_fu_789_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln414_fu_795_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln414_fu_801_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln414_3_fu_776_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln414_1_fu_807_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln414_2_fu_813_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_xFapplygaussian3x3_15_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        D1 : IN STD_LOGIC_VECTOR (7 downto 0);
        D2 : IN STD_LOGIC_VECTOR (7 downto 0);
        D3 : IN STD_LOGIC_VECTOR (7 downto 0);
        D4 : IN STD_LOGIC_VECTOR (7 downto 0);
        D5 : IN STD_LOGIC_VECTOR (7 downto 0);
        D6 : IN STD_LOGIC_VECTOR (7 downto 0);
        D7 : IN STD_LOGIC_VECTOR (7 downto 0);
        D8 : IN STD_LOGIC_VECTOR (7 downto 0);
        D9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component reversi_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component reversi_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln511_fu_177_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_72 <= i_2_fu_183_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln511_fu_177_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_76 <= k_1_fu_270_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_76 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_Val2_s_fu_68 <= out_val1_V;
                elsif ((ap_enable_reg_pp0_iter11 = ap_const_logic_1)) then 
                    p_Val2_s_fu_68 <= p_Result_75_fu_819_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln414_reg_1059 <= icmp_ln414_fu_712_p2;
                icmp_ln511_reg_902_pp0_iter2_reg <= icmp_ln511_reg_902_pp0_iter1_reg;
                icmp_ln511_reg_902_pp0_iter3_reg <= icmp_ln511_reg_902_pp0_iter2_reg;
                icmp_ln511_reg_902_pp0_iter4_reg <= icmp_ln511_reg_902_pp0_iter3_reg;
                icmp_ln511_reg_902_pp0_iter5_reg <= icmp_ln511_reg_902_pp0_iter4_reg;
                icmp_ln511_reg_902_pp0_iter6_reg <= icmp_ln511_reg_902_pp0_iter5_reg;
                icmp_ln511_reg_902_pp0_iter7_reg <= icmp_ln511_reg_902_pp0_iter6_reg;
                icmp_ln511_reg_902_pp0_iter8_reg <= icmp_ln511_reg_902_pp0_iter7_reg;
                icmp_ln511_reg_902_pp0_iter9_reg <= icmp_ln511_reg_902_pp0_iter8_reg;
                k_load_reg_906_pp0_iter10_reg <= k_load_reg_906_pp0_iter9_reg;
                k_load_reg_906_pp0_iter2_reg <= k_load_reg_906_pp0_iter1_reg;
                k_load_reg_906_pp0_iter3_reg <= k_load_reg_906_pp0_iter2_reg;
                k_load_reg_906_pp0_iter4_reg <= k_load_reg_906_pp0_iter3_reg;
                k_load_reg_906_pp0_iter5_reg <= k_load_reg_906_pp0_iter4_reg;
                k_load_reg_906_pp0_iter6_reg <= k_load_reg_906_pp0_iter5_reg;
                k_load_reg_906_pp0_iter7_reg <= k_load_reg_906_pp0_iter6_reg;
                k_load_reg_906_pp0_iter8_reg <= k_load_reg_906_pp0_iter7_reg;
                k_load_reg_906_pp0_iter9_reg <= k_load_reg_906_pp0_iter8_reg;
                    or_ln512_reg_933_pp0_iter10_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter9_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter2_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter1_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter3_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter2_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter4_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter3_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter5_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter4_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter6_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter5_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter7_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter6_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter8_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter7_reg(4 downto 3);
                    or_ln512_reg_933_pp0_iter9_reg(4 downto 3) <= or_ln512_reg_933_pp0_iter8_reg(4 downto 3);
                sub_ln414_reg_1067 <= sub_ln414_fu_716_p2;
                tmp_V_reg_1054 <= grp_xFapplygaussian3x3_15_s_fu_581_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln511_reg_902 <= icmp_ln511_fu_177_p2;
                icmp_ln511_reg_902_pp0_iter1_reg <= icmp_ln511_reg_902;
                k_load_reg_906_pp0_iter1_reg <= k_load_reg_906;
                    or_ln512_reg_933_pp0_iter1_reg(4 downto 3) <= or_ln512_reg_933(4 downto 3);
                srcbuf10_V_reg_1024 <= srcbuf10_V_fu_353_p1;
                srcbuf11_V_reg_1029 <= srcbuf11_V_fu_424_p1;
                srcbuf20_V_reg_1034 <= srcbuf20_V_fu_495_p1;
                srcbuf21_V_reg_1039 <= srcbuf21_V_fu_566_p1;
                srcbuf30_V_reg_1044 <= srcbuf30_V_fu_637_p1;
                srcbuf31_V_reg_1049 <= srcbuf31_V_fu_708_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln511_fu_177_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln674_1_reg_964 <= icmp_ln674_1_fu_210_p2;
                icmp_ln674_2_reg_976 <= icmp_ln674_2_fu_222_p2;
                icmp_ln674_3_reg_988 <= icmp_ln674_3_fu_234_p2;
                icmp_ln674_4_reg_1000 <= icmp_ln674_4_fu_246_p2;
                icmp_ln674_5_reg_1012 <= icmp_ln674_5_fu_258_p2;
                icmp_ln674_reg_952 <= icmp_ln674_fu_198_p2;
                k_load_reg_906 <= ap_sig_allocacmp_k_load;
                    or_ln512_reg_933(4 downto 3) <= or_ln512_fu_192_p2(4 downto 3);
                sub_ln674_13_reg_995 <= sub_ln674_13_fu_240_p2;
                sub_ln674_17_reg_1007 <= sub_ln674_17_fu_252_p2;
                sub_ln674_1_reg_959 <= sub_ln674_1_fu_204_p2;
                sub_ln674_21_reg_1019 <= sub_ln674_21_fu_264_p2;
                sub_ln674_5_reg_971 <= sub_ln674_5_fu_216_p2;
                sub_ln674_9_reg_983 <= sub_ln674_9_fu_228_p2;
            end if;
        end if;
    end process;
    or_ln512_reg_933(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter1_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter2_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter3_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter4_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter5_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter6_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter7_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter8_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter9_reg(2 downto 0) <= "111";
    or_ln512_reg_933_pp0_iter10_reg(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln414_1_fu_807_p2 <= (xor_ln414_fu_801_p2 and p_Val2_s_fu_68);
    and_ln414_2_fu_813_p2 <= (select_ln414_3_fu_776_p3 and and_ln414_fu_795_p2);
    and_ln414_fu_795_p2 <= (shl_ln414_1_fu_783_p2 and lshr_ln414_fu_789_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp132 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call94 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln511_fu_177_p2)
    begin
        if (((icmp_ln511_fu_177_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_76;
        end if; 
    end process;


    grp_xFapplygaussian3x3_15_s_fu_141_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp132)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp132) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_xFapplygaussian3x3_15_s_fu_141_ap_ce <= ap_const_logic_1;
        else 
            grp_xFapplygaussian3x3_15_s_fu_141_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_xFapplygaussian3x3_15_s_fu_581_p_ce <= grp_xFapplygaussian3x3_15_s_fu_141_ap_ce;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din1 <= srcbuf10_V_reg_1024;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din10 <= p_read;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din11 <= p_read1;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din2 <= srcbuf11_V_reg_1029;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din3 <= ap_const_lv8_0;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din4 <= srcbuf20_V_reg_1034;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din5 <= srcbuf21_V_reg_1039;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din6 <= ap_const_lv8_0;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din7 <= srcbuf30_V_reg_1044;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din8 <= srcbuf31_V_reg_1049;
    grp_xFapplygaussian3x3_15_s_fu_581_p_din9 <= ap_const_lv8_0;
    i_2_fu_183_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    icmp_ln414_fu_712_p2 <= "1" when (unsigned(k_load_reg_906_pp0_iter9_reg) > unsigned(or_ln512_reg_933_pp0_iter9_reg)) else "0";
    icmp_ln511_fu_177_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_3) else "0";
    icmp_ln674_1_fu_210_p2 <= "1" when (unsigned(ap_sig_allocacmp_k_load) > unsigned(or_ln512_fu_192_p2)) else "0";
    icmp_ln674_2_fu_222_p2 <= "1" when (unsigned(ap_sig_allocacmp_k_load) > unsigned(or_ln512_fu_192_p2)) else "0";
    icmp_ln674_3_fu_234_p2 <= "1" when (unsigned(ap_sig_allocacmp_k_load) > unsigned(or_ln512_fu_192_p2)) else "0";
    icmp_ln674_4_fu_246_p2 <= "1" when (unsigned(ap_sig_allocacmp_k_load) > unsigned(or_ln512_fu_192_p2)) else "0";
    icmp_ln674_5_fu_258_p2 <= "1" when (unsigned(ap_sig_allocacmp_k_load) > unsigned(or_ln512_fu_192_p2)) else "0";
    icmp_ln674_fu_198_p2 <= "1" when (unsigned(ap_sig_allocacmp_k_load) > unsigned(or_ln512_fu_192_p2)) else "0";
    k_1_fu_270_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_load) + unsigned(ap_const_lv5_8));
    lshr_ln414_fu_789_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln414_2_fu_756_p1(24-1 downto 0)))));
    lshr_ln674_10_fu_690_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_16_fu_665_p3),to_integer(unsigned('0' & zext_ln674_10_fu_682_p1(24-1 downto 0)))));
    lshr_ln674_11_fu_696_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln674_11_fu_686_p1(24-1 downto 0)))));
    lshr_ln674_1_fu_341_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln674_1_fu_331_p1(24-1 downto 0)))));
    lshr_ln674_2_fu_406_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_4_fu_381_p3),to_integer(unsigned('0' & zext_ln674_2_fu_398_p1(24-1 downto 0)))));
    lshr_ln674_3_fu_412_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln674_3_fu_402_p1(24-1 downto 0)))));
    lshr_ln674_4_fu_477_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_7_fu_452_p3),to_integer(unsigned('0' & zext_ln674_4_fu_469_p1(24-1 downto 0)))));
    lshr_ln674_5_fu_483_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln674_5_fu_473_p1(24-1 downto 0)))));
    lshr_ln674_6_fu_548_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_10_fu_523_p3),to_integer(unsigned('0' & zext_ln674_6_fu_540_p1(24-1 downto 0)))));
    lshr_ln674_7_fu_554_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln674_7_fu_544_p1(24-1 downto 0)))));
    lshr_ln674_8_fu_619_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_13_fu_594_p3),to_integer(unsigned('0' & zext_ln674_8_fu_611_p1(24-1 downto 0)))));
    lshr_ln674_9_fu_625_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln674_9_fu_615_p1(24-1 downto 0)))));
    lshr_ln674_fu_335_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_310_p3),to_integer(unsigned('0' & zext_ln674_fu_327_p1(24-1 downto 0)))));
    or_ln512_fu_192_p2 <= (ap_sig_allocacmp_k_load or ap_const_lv5_7);
    out_val1_V_4_out <= p_Val2_s_fu_68;

    out_val1_V_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln511_reg_902_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln511_reg_902_pp0_iter9_reg = ap_const_lv1_1))) then 
            out_val1_V_4_out_ap_vld <= ap_const_logic_1;
        else 
            out_val1_V_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_70_fu_418_p2 <= (lshr_ln674_3_fu_412_p2 and lshr_ln674_2_fu_406_p2);
    p_Result_71_fu_489_p2 <= (lshr_ln674_5_fu_483_p2 and lshr_ln674_4_fu_477_p2);
    p_Result_72_fu_560_p2 <= (lshr_ln674_7_fu_554_p2 and lshr_ln674_6_fu_548_p2);
    p_Result_73_fu_631_p2 <= (lshr_ln674_9_fu_625_p2 and lshr_ln674_8_fu_619_p2);
    p_Result_74_fu_702_p2 <= (lshr_ln674_11_fu_696_p2 and lshr_ln674_10_fu_690_p2);
    p_Result_75_fu_819_p2 <= (and_ln414_2_fu_813_p2 or and_ln414_1_fu_807_p2);
    p_Result_s_fu_347_p2 <= (lshr_ln674_fu_335_p2 and lshr_ln674_1_fu_341_p2);
    select_ln414_1_fu_732_p3 <= 
        or_ln512_reg_933_pp0_iter10_reg when (icmp_ln414_reg_1059(0) = '1') else 
        k_load_reg_906_pp0_iter10_reg;
    select_ln414_2_fu_737_p3 <= 
        sub_ln414_reg_1067 when (icmp_ln414_reg_1059(0) = '1') else 
        k_load_reg_906_pp0_iter10_reg;
    select_ln414_3_fu_776_p3 <= 
        tmp_70_fu_766_p4 when (icmp_ln414_reg_1059(0) = '1') else 
        shl_ln414_fu_760_p2;
    select_ln414_fu_727_p3 <= 
        k_load_reg_906_pp0_iter10_reg when (icmp_ln414_reg_1059(0) = '1') else 
        or_ln512_reg_933_pp0_iter10_reg;
    select_ln674_10_fu_523_p3 <= 
        tmp_67_fu_499_p4 when (icmp_ln674_3_reg_988(0) = '1') else 
        p_Val2_258_reload;
    select_ln674_11_fu_529_p3 <= 
        sub_ln674_13_reg_995 when (icmp_ln674_3_reg_988(0) = '1') else 
        k_load_reg_906;
    select_ln674_12_fu_587_p3 <= 
        sub_ln674_16_fu_579_p2 when (icmp_ln674_4_reg_1000(0) = '1') else 
        sub_ln674_18_fu_583_p2;
    select_ln674_13_fu_594_p3 <= 
        tmp_68_fu_570_p4 when (icmp_ln674_4_reg_1000(0) = '1') else 
        p_Val2_259_reload;
    select_ln674_14_fu_600_p3 <= 
        sub_ln674_17_reg_1007 when (icmp_ln674_4_reg_1000(0) = '1') else 
        k_load_reg_906;
    select_ln674_15_fu_658_p3 <= 
        sub_ln674_20_fu_650_p2 when (icmp_ln674_5_reg_1012(0) = '1') else 
        sub_ln674_22_fu_654_p2;
    select_ln674_16_fu_665_p3 <= 
        tmp_69_fu_641_p4 when (icmp_ln674_5_reg_1012(0) = '1') else 
        p_Val2_260_reload;
    select_ln674_17_fu_671_p3 <= 
        sub_ln674_21_reg_1019 when (icmp_ln674_5_reg_1012(0) = '1') else 
        k_load_reg_906;
    select_ln674_1_fu_310_p3 <= 
        tmp_fu_286_p4 when (icmp_ln674_reg_952(0) = '1') else 
        p_Val2_reload;
    select_ln674_2_fu_316_p3 <= 
        sub_ln674_1_reg_959 when (icmp_ln674_reg_952(0) = '1') else 
        k_load_reg_906;
    select_ln674_3_fu_374_p3 <= 
        sub_ln674_4_fu_366_p2 when (icmp_ln674_1_reg_964(0) = '1') else 
        sub_ln674_6_fu_370_p2;
    select_ln674_4_fu_381_p3 <= 
        tmp_65_fu_357_p4 when (icmp_ln674_1_reg_964(0) = '1') else 
        p_Val2_256_reload;
    select_ln674_5_fu_387_p3 <= 
        sub_ln674_5_reg_971 when (icmp_ln674_1_reg_964(0) = '1') else 
        k_load_reg_906;
    select_ln674_6_fu_445_p3 <= 
        sub_ln674_8_fu_437_p2 when (icmp_ln674_2_reg_976(0) = '1') else 
        sub_ln674_10_fu_441_p2;
    select_ln674_7_fu_452_p3 <= 
        tmp_66_fu_428_p4 when (icmp_ln674_2_reg_976(0) = '1') else 
        p_Val2_257_reload;
    select_ln674_8_fu_458_p3 <= 
        sub_ln674_9_reg_983 when (icmp_ln674_2_reg_976(0) = '1') else 
        k_load_reg_906;
    select_ln674_9_fu_516_p3 <= 
        sub_ln674_12_fu_508_p2 when (icmp_ln674_3_reg_988(0) = '1') else 
        sub_ln674_14_fu_512_p2;
    select_ln674_fu_303_p3 <= 
        sub_ln674_fu_295_p2 when (icmp_ln674_reg_952(0) = '1') else 
        sub_ln674_2_fu_299_p2;
    shl_ln414_1_fu_783_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln414_1_fu_752_p1(24-1 downto 0)))));
    shl_ln414_fu_760_p2 <= std_logic_vector(shift_left(unsigned(zext_ln413_fu_724_p1),to_integer(unsigned('0' & zext_ln414_fu_748_p1(24-1 downto 0)))));
    srcbuf10_V_fu_353_p1 <= p_Result_s_fu_347_p2(8 - 1 downto 0);
    srcbuf11_V_fu_424_p1 <= p_Result_70_fu_418_p2(8 - 1 downto 0);
    srcbuf20_V_fu_495_p1 <= p_Result_71_fu_489_p2(8 - 1 downto 0);
    srcbuf21_V_fu_566_p1 <= p_Result_72_fu_560_p2(8 - 1 downto 0);
    srcbuf30_V_fu_637_p1 <= p_Result_73_fu_631_p2(8 - 1 downto 0);
    srcbuf31_V_fu_708_p1 <= p_Result_74_fu_702_p2(8 - 1 downto 0);
    sub_ln414_1_fu_742_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln414_fu_727_p3));
    sub_ln414_fu_716_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(k_load_reg_906_pp0_iter9_reg));
    sub_ln674_10_fu_441_p2 <= std_logic_vector(unsigned(or_ln512_reg_933) - unsigned(k_load_reg_906));
    sub_ln674_11_fu_463_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln674_6_fu_445_p3));
    sub_ln674_12_fu_508_p2 <= std_logic_vector(unsigned(k_load_reg_906) - unsigned(or_ln512_reg_933));
    sub_ln674_13_fu_240_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(ap_sig_allocacmp_k_load));
    sub_ln674_14_fu_512_p2 <= std_logic_vector(unsigned(or_ln512_reg_933) - unsigned(k_load_reg_906));
    sub_ln674_15_fu_534_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln674_9_fu_516_p3));
    sub_ln674_16_fu_579_p2 <= std_logic_vector(unsigned(k_load_reg_906) - unsigned(or_ln512_reg_933));
    sub_ln674_17_fu_252_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(ap_sig_allocacmp_k_load));
    sub_ln674_18_fu_583_p2 <= std_logic_vector(unsigned(or_ln512_reg_933) - unsigned(k_load_reg_906));
    sub_ln674_19_fu_605_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln674_12_fu_587_p3));
    sub_ln674_1_fu_204_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(ap_sig_allocacmp_k_load));
    sub_ln674_20_fu_650_p2 <= std_logic_vector(unsigned(k_load_reg_906) - unsigned(or_ln512_reg_933));
    sub_ln674_21_fu_264_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(ap_sig_allocacmp_k_load));
    sub_ln674_22_fu_654_p2 <= std_logic_vector(unsigned(or_ln512_reg_933) - unsigned(k_load_reg_906));
    sub_ln674_23_fu_676_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln674_15_fu_658_p3));
    sub_ln674_2_fu_299_p2 <= std_logic_vector(unsigned(or_ln512_reg_933) - unsigned(k_load_reg_906));
    sub_ln674_3_fu_321_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln674_fu_303_p3));
    sub_ln674_4_fu_366_p2 <= std_logic_vector(unsigned(k_load_reg_906) - unsigned(or_ln512_reg_933));
    sub_ln674_5_fu_216_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(ap_sig_allocacmp_k_load));
    sub_ln674_6_fu_370_p2 <= std_logic_vector(unsigned(or_ln512_reg_933) - unsigned(k_load_reg_906));
    sub_ln674_7_fu_392_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln674_3_fu_374_p3));
    sub_ln674_8_fu_437_p2 <= std_logic_vector(unsigned(k_load_reg_906) - unsigned(or_ln512_reg_933));
    sub_ln674_9_fu_228_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(ap_sig_allocacmp_k_load));
    sub_ln674_fu_295_p2 <= std_logic_vector(unsigned(k_load_reg_906) - unsigned(or_ln512_reg_933));
    
    tmp_65_fu_357_p4_proc : process(p_Val2_256_reload)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_65_fu_357_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_256_reload;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_65_fu_357_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_65_fu_357_p4_i) := p_Val2_256_reload(24-1-tmp_65_fu_357_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_65_fu_357_p4 <= resvalue(24-1 downto 0);
    end process;

    
    tmp_66_fu_428_p4_proc : process(p_Val2_257_reload)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_66_fu_428_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_257_reload;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_66_fu_428_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_66_fu_428_p4_i) := p_Val2_257_reload(24-1-tmp_66_fu_428_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_66_fu_428_p4 <= resvalue(24-1 downto 0);
    end process;

    
    tmp_67_fu_499_p4_proc : process(p_Val2_258_reload)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_67_fu_499_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_258_reload;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_67_fu_499_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_67_fu_499_p4_i) := p_Val2_258_reload(24-1-tmp_67_fu_499_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_67_fu_499_p4 <= resvalue(24-1 downto 0);
    end process;

    
    tmp_68_fu_570_p4_proc : process(p_Val2_259_reload)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_68_fu_570_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_259_reload;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_68_fu_570_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_68_fu_570_p4_i) := p_Val2_259_reload(24-1-tmp_68_fu_570_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_68_fu_570_p4 <= resvalue(24-1 downto 0);
    end process;

    
    tmp_69_fu_641_p4_proc : process(p_Val2_260_reload)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_69_fu_641_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_260_reload;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_69_fu_641_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_69_fu_641_p4_i) := p_Val2_260_reload(24-1-tmp_69_fu_641_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_69_fu_641_p4 <= resvalue(24-1 downto 0);
    end process;

    
    tmp_70_fu_766_p4_proc : process(shl_ln414_fu_760_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_70_fu_766_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln414_fu_760_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_70_fu_766_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_70_fu_766_p4_i) := shl_ln414_fu_760_p2(24-1-tmp_70_fu_766_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_70_fu_766_p4 <= resvalue(24-1 downto 0);
    end process;

    
    tmp_fu_286_p4_proc : process(p_Val2_reload)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_fu_286_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_reload;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_fu_286_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_fu_286_p4_i) := p_Val2_reload(24-1-tmp_fu_286_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_286_p4 <= resvalue(24-1 downto 0);
    end process;

    xor_ln414_fu_801_p2 <= (ap_const_lv24_FFFFFF xor and_ln414_fu_795_p2);
    zext_ln413_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_1054),24));
    zext_ln414_1_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_732_p3),24));
    zext_ln414_2_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_1_fu_742_p2),24));
    zext_ln414_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_737_p3),24));
    zext_ln674_10_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_17_fu_671_p3),24));
    zext_ln674_11_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_23_fu_676_p2),24));
    zext_ln674_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_3_fu_321_p2),24));
    zext_ln674_2_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_5_fu_387_p3),24));
    zext_ln674_3_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_7_fu_392_p2),24));
    zext_ln674_4_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_8_fu_458_p3),24));
    zext_ln674_5_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_11_fu_463_p2),24));
    zext_ln674_6_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_11_fu_529_p3),24));
    zext_ln674_7_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_15_fu_534_p2),24));
    zext_ln674_8_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_14_fu_600_p3),24));
    zext_ln674_9_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_19_fu_605_p2),24));
    zext_ln674_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_316_p3),24));
end behav;
