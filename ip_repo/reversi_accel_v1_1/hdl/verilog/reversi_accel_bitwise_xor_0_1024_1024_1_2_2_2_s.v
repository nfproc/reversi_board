// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_bitwise_xor_0_1024_1024_1_2_2_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        mat_lap1_data335_dout,
        mat_lap1_data335_num_data_valid,
        mat_lap1_data335_fifo_cap,
        mat_lap1_data335_empty_n,
        mat_lap1_data335_read,
        mat_lap2_data336_dout,
        mat_lap2_data336_num_data_valid,
        mat_lap2_data336_fifo_cap,
        mat_lap2_data336_empty_n,
        mat_lap2_data336_read,
        mat_lap_data337_din,
        mat_lap_data337_num_data_valid,
        mat_lap_data337_fifo_cap,
        mat_lap_data337_full_n,
        mat_lap_data337_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] mat_lap1_data335_dout;
input  [1:0] mat_lap1_data335_num_data_valid;
input  [1:0] mat_lap1_data335_fifo_cap;
input   mat_lap1_data335_empty_n;
output   mat_lap1_data335_read;
input  [7:0] mat_lap2_data336_dout;
input  [1:0] mat_lap2_data336_num_data_valid;
input  [1:0] mat_lap2_data336_fifo_cap;
input   mat_lap2_data336_empty_n;
output   mat_lap2_data336_read;
output  [7:0] mat_lap_data337_din;
input  [1:0] mat_lap_data337_num_data_valid;
input  [1:0] mat_lap_data337_fifo_cap;
input   mat_lap_data337_full_n;
output   mat_lap_data337_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_lap1_data335_read;
reg mat_lap2_data336_read;
reg mat_lap_data337_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] image_width_fu_67_p1;
reg   [15:0] image_width_reg_110;
wire   [15:0] image_height_fu_71_p1;
reg   [15:0] image_height_reg_115;
wire    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start;
wire    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_done;
wire    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_idle;
wire    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_ready;
wire    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap1_data335_read;
wire    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap2_data336_read;
wire   [7:0] grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap_data337_din;
wire    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap_data337_write;
reg    grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1073_fu_87_p2;
wire    ap_CS_fsm_state3;
reg   [12:0] i_V_fu_40;
wire   [12:0] i_V_6_fu_92_p2;
reg    ap_block_state1;
wire   [15:0] zext_ln1073_fu_83_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start_reg = 1'b0;
end

reversi_accel_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start),
    .ap_done(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_done),
    .ap_idle(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_idle),
    .ap_ready(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_ready),
    .mat_lap1_data335_dout(mat_lap1_data335_dout),
    .mat_lap1_data335_num_data_valid(2'd0),
    .mat_lap1_data335_fifo_cap(2'd0),
    .mat_lap1_data335_empty_n(mat_lap1_data335_empty_n),
    .mat_lap1_data335_read(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap1_data335_read),
    .mat_lap2_data336_dout(mat_lap2_data336_dout),
    .mat_lap2_data336_num_data_valid(2'd0),
    .mat_lap2_data336_fifo_cap(2'd0),
    .mat_lap2_data336_empty_n(mat_lap2_data336_empty_n),
    .mat_lap2_data336_read(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap2_data336_read),
    .mat_lap_data337_din(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap_data337_din),
    .mat_lap_data337_num_data_valid(2'd0),
    .mat_lap_data337_fifo_cap(2'd0),
    .mat_lap_data337_full_n(mat_lap_data337_full_n),
    .mat_lap_data337_write(grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap_data337_write),
    .image_width(image_width_reg_110)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln1073_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln1073_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_ready == 1'b1)) begin
            grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_fu_40 <= 13'd0;
    end else if (((icmp_ln1073_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_V_fu_40 <= i_V_6_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        image_height_reg_115 <= image_height_fu_71_p1;
        image_width_reg_110 <= image_width_fu_67_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1073_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1073_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mat_lap1_data335_read = grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap1_data335_read;
    end else begin
        mat_lap1_data335_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mat_lap2_data336_read = grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap2_data336_read;
    end else begin
        mat_lap2_data336_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mat_lap_data337_write = grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap_data337_write;
    end else begin
        mat_lap_data337_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1073_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start = grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_ap_start_reg;

assign i_V_6_fu_92_p2 = (i_V_fu_40 + 13'd1);

assign icmp_ln1073_fu_87_p2 = ((zext_ln1073_fu_83_p1 < image_height_reg_115) ? 1'b1 : 1'b0);

assign image_height_fu_71_p1 = p_read[15:0];

assign image_width_fu_67_p1 = p_read1[15:0];

assign mat_lap_data337_din = grp_bitwise_xor_0_1024_1024_1_2_2_2_Pipeline_colLoop_fu_56_mat_lap_data337_din;

assign zext_ln1073_fu_83_p1 = i_V_fu_40;

endmodule //reversi_accel_bitwise_xor_0_1024_1024_1_2_2_2_s
