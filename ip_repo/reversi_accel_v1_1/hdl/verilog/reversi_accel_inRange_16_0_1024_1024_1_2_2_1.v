// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_inRange_16_0_1024_1024_1_2_2_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        mat_hsv2_data327_dout,
        mat_hsv2_data327_num_data_valid,
        mat_hsv2_data327_fifo_cap,
        mat_hsv2_data327_empty_n,
        mat_hsv2_data327_read,
        mat_green2_data329_din,
        mat_green2_data329_num_data_valid,
        mat_green2_data329_fifo_cap,
        mat_green2_data329_full_n,
        mat_green2_data329_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [23:0] mat_hsv2_data327_dout;
input  [1:0] mat_hsv2_data327_num_data_valid;
input  [1:0] mat_hsv2_data327_fifo_cap;
input   mat_hsv2_data327_empty_n;
output   mat_hsv2_data327_read;
output  [7:0] mat_green2_data329_din;
input  [1:0] mat_green2_data329_num_data_valid;
input  [1:0] mat_green2_data329_fifo_cap;
input   mat_green2_data329_full_n;
output   mat_green2_data329_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_hsv2_data327_read;
reg mat_green2_data329_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] lower_thresh2_q0;
wire   [15:0] width_fu_48_p1;
reg   [15:0] width_reg_58;
wire   [15:0] height_fu_53_p1;
reg   [15:0] height_reg_63;
wire    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start;
wire    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_done;
wire    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_idle;
wire    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_ready;
wire    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_hsv2_data327_read;
wire   [7:0] grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_green2_data329_din;
wire    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_green2_data329_write;
wire   [1:0] grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_lower_thresh_address0;
wire    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_lower_thresh_ce0;
reg    grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start_reg;
reg    ap_block_state1_ignore_call6;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start_reg = 1'b0;
end

reversi_accel_inRange_16_0_1024_1024_1_2_2_1_lower_thresh2_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
lower_thresh2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_lower_thresh_address0),
    .ce0(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_lower_thresh_ce0),
    .q0(lower_thresh2_q0)
);

reversi_accel_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start),
    .ap_done(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_done),
    .ap_idle(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_idle),
    .ap_ready(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_ready),
    .mat_hsv2_data327_dout(mat_hsv2_data327_dout),
    .mat_hsv2_data327_num_data_valid(2'd0),
    .mat_hsv2_data327_fifo_cap(2'd0),
    .mat_hsv2_data327_empty_n(mat_hsv2_data327_empty_n),
    .mat_hsv2_data327_read(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_hsv2_data327_read),
    .mat_green2_data329_din(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_green2_data329_din),
    .mat_green2_data329_num_data_valid(2'd0),
    .mat_green2_data329_fifo_cap(2'd0),
    .mat_green2_data329_full_n(mat_green2_data329_full_n),
    .mat_green2_data329_write(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_green2_data329_write),
    .lower_thresh_address0(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_lower_thresh_address0),
    .lower_thresh_ce0(grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_lower_thresh_ce0),
    .lower_thresh_q0(lower_thresh2_q0),
    .height(height_reg_63),
    .width(width_reg_58)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_ready == 1'b1)) begin
            grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        height_reg_63 <= height_fu_53_p1;
        width_reg_58 <= width_fu_48_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mat_green2_data329_write = grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_green2_data329_write;
    end else begin
        mat_green2_data329_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mat_hsv2_data327_read = grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_hsv2_data327_read;
    end else begin
        mat_hsv2_data327_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call6 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start = grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_ap_start_reg;

assign height_fu_53_p1 = p_read[15:0];

assign mat_green2_data329_din = grp_xFinRangeKernel_16_0_1024_1024_16_0_1_2_2_10_1_1024_s_fu_36_mat_green2_data329_din;

assign width_fu_48_p1 = p_read1[15:0];

endmodule //reversi_accel_inRange_16_0_1024_1024_1_2_2_1
