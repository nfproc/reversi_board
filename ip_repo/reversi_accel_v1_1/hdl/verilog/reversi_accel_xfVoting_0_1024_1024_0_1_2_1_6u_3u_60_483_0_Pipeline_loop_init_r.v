// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reversi_accel_xfVoting_0_1024_1024_0_1_2_1_6u_3u_60_483_0_Pipeline_loop_init_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        accum_60_address0,
        accum_60_ce0,
        accum_60_we0,
        accum_60_d0,
        accum_59_address0,
        accum_59_ce0,
        accum_59_we0,
        accum_59_d0,
        accum_58_address0,
        accum_58_ce0,
        accum_58_we0,
        accum_58_d0,
        accum_57_address0,
        accum_57_ce0,
        accum_57_we0,
        accum_57_d0,
        accum_56_address0,
        accum_56_ce0,
        accum_56_we0,
        accum_56_d0,
        accum_55_address0,
        accum_55_ce0,
        accum_55_we0,
        accum_55_d0,
        accum_54_address0,
        accum_54_ce0,
        accum_54_we0,
        accum_54_d0,
        accum_53_address0,
        accum_53_ce0,
        accum_53_we0,
        accum_53_d0,
        accum_52_address0,
        accum_52_ce0,
        accum_52_we0,
        accum_52_d0,
        accum_51_address0,
        accum_51_ce0,
        accum_51_we0,
        accum_51_d0,
        accum_50_address0,
        accum_50_ce0,
        accum_50_we0,
        accum_50_d0,
        accum_49_address0,
        accum_49_ce0,
        accum_49_we0,
        accum_49_d0,
        accum_48_address0,
        accum_48_ce0,
        accum_48_we0,
        accum_48_d0,
        accum_47_address0,
        accum_47_ce0,
        accum_47_we0,
        accum_47_d0,
        accum_46_address0,
        accum_46_ce0,
        accum_46_we0,
        accum_46_d0,
        accum_45_address0,
        accum_45_ce0,
        accum_45_we0,
        accum_45_d0,
        accum_44_address0,
        accum_44_ce0,
        accum_44_we0,
        accum_44_d0,
        accum_43_address0,
        accum_43_ce0,
        accum_43_we0,
        accum_43_d0,
        accum_42_address0,
        accum_42_ce0,
        accum_42_we0,
        accum_42_d0,
        accum_41_address0,
        accum_41_ce0,
        accum_41_we0,
        accum_41_d0,
        accum_40_address0,
        accum_40_ce0,
        accum_40_we0,
        accum_40_d0,
        accum_39_address0,
        accum_39_ce0,
        accum_39_we0,
        accum_39_d0,
        accum_38_address0,
        accum_38_ce0,
        accum_38_we0,
        accum_38_d0,
        accum_37_address0,
        accum_37_ce0,
        accum_37_we0,
        accum_37_d0,
        accum_36_address0,
        accum_36_ce0,
        accum_36_we0,
        accum_36_d0,
        accum_35_address0,
        accum_35_ce0,
        accum_35_we0,
        accum_35_d0,
        accum_34_address0,
        accum_34_ce0,
        accum_34_we0,
        accum_34_d0,
        accum_33_address0,
        accum_33_ce0,
        accum_33_we0,
        accum_33_d0,
        accum_32_address0,
        accum_32_ce0,
        accum_32_we0,
        accum_32_d0,
        accum_31_address0,
        accum_31_ce0,
        accum_31_we0,
        accum_31_d0,
        accum_30_address0,
        accum_30_ce0,
        accum_30_we0,
        accum_30_d0,
        accum_29_address0,
        accum_29_ce0,
        accum_29_we0,
        accum_29_d0,
        accum_28_address0,
        accum_28_ce0,
        accum_28_we0,
        accum_28_d0,
        accum_27_address0,
        accum_27_ce0,
        accum_27_we0,
        accum_27_d0,
        accum_26_address0,
        accum_26_ce0,
        accum_26_we0,
        accum_26_d0,
        accum_25_address0,
        accum_25_ce0,
        accum_25_we0,
        accum_25_d0,
        accum_24_address0,
        accum_24_ce0,
        accum_24_we0,
        accum_24_d0,
        accum_23_address0,
        accum_23_ce0,
        accum_23_we0,
        accum_23_d0,
        accum_22_address0,
        accum_22_ce0,
        accum_22_we0,
        accum_22_d0,
        accum_21_address0,
        accum_21_ce0,
        accum_21_we0,
        accum_21_d0,
        accum_20_address0,
        accum_20_ce0,
        accum_20_we0,
        accum_20_d0,
        accum_19_address0,
        accum_19_ce0,
        accum_19_we0,
        accum_19_d0,
        accum_18_address0,
        accum_18_ce0,
        accum_18_we0,
        accum_18_d0,
        accum_17_address0,
        accum_17_ce0,
        accum_17_we0,
        accum_17_d0,
        accum_16_address0,
        accum_16_ce0,
        accum_16_we0,
        accum_16_d0,
        accum_15_address0,
        accum_15_ce0,
        accum_15_we0,
        accum_15_d0,
        accum_14_address0,
        accum_14_ce0,
        accum_14_we0,
        accum_14_d0,
        accum_13_address0,
        accum_13_ce0,
        accum_13_we0,
        accum_13_d0,
        accum_12_address0,
        accum_12_ce0,
        accum_12_we0,
        accum_12_d0,
        accum_11_address0,
        accum_11_ce0,
        accum_11_we0,
        accum_11_d0,
        accum_10_address0,
        accum_10_ce0,
        accum_10_we0,
        accum_10_d0,
        accum_9_address0,
        accum_9_ce0,
        accum_9_we0,
        accum_9_d0,
        accum_8_address0,
        accum_8_ce0,
        accum_8_we0,
        accum_8_d0,
        accum_7_address0,
        accum_7_ce0,
        accum_7_we0,
        accum_7_d0,
        accum_6_address0,
        accum_6_ce0,
        accum_6_we0,
        accum_6_d0,
        accum_5_address0,
        accum_5_ce0,
        accum_5_we0,
        accum_5_d0,
        accum_4_address0,
        accum_4_ce0,
        accum_4_we0,
        accum_4_d0,
        accum_3_address0,
        accum_3_ce0,
        accum_3_we0,
        accum_3_d0,
        accum_2_address0,
        accum_2_ce0,
        accum_2_we0,
        accum_2_d0,
        accum_1_address0,
        accum_1_ce0,
        accum_1_we0,
        accum_1_d0,
        accum_0_address0,
        accum_0_ce0,
        accum_0_we0,
        accum_0_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] accum_60_address0;
output   accum_60_ce0;
output   accum_60_we0;
output  [0:0] accum_60_d0;
output  [8:0] accum_59_address0;
output   accum_59_ce0;
output   accum_59_we0;
output  [11:0] accum_59_d0;
output  [8:0] accum_58_address0;
output   accum_58_ce0;
output   accum_58_we0;
output  [11:0] accum_58_d0;
output  [8:0] accum_57_address0;
output   accum_57_ce0;
output   accum_57_we0;
output  [11:0] accum_57_d0;
output  [8:0] accum_56_address0;
output   accum_56_ce0;
output   accum_56_we0;
output  [11:0] accum_56_d0;
output  [8:0] accum_55_address0;
output   accum_55_ce0;
output   accum_55_we0;
output  [11:0] accum_55_d0;
output  [8:0] accum_54_address0;
output   accum_54_ce0;
output   accum_54_we0;
output  [11:0] accum_54_d0;
output  [8:0] accum_53_address0;
output   accum_53_ce0;
output   accum_53_we0;
output  [11:0] accum_53_d0;
output  [8:0] accum_52_address0;
output   accum_52_ce0;
output   accum_52_we0;
output  [11:0] accum_52_d0;
output  [8:0] accum_51_address0;
output   accum_51_ce0;
output   accum_51_we0;
output  [11:0] accum_51_d0;
output  [8:0] accum_50_address0;
output   accum_50_ce0;
output   accum_50_we0;
output  [11:0] accum_50_d0;
output  [8:0] accum_49_address0;
output   accum_49_ce0;
output   accum_49_we0;
output  [11:0] accum_49_d0;
output  [8:0] accum_48_address0;
output   accum_48_ce0;
output   accum_48_we0;
output  [11:0] accum_48_d0;
output  [8:0] accum_47_address0;
output   accum_47_ce0;
output   accum_47_we0;
output  [11:0] accum_47_d0;
output  [8:0] accum_46_address0;
output   accum_46_ce0;
output   accum_46_we0;
output  [11:0] accum_46_d0;
output  [8:0] accum_45_address0;
output   accum_45_ce0;
output   accum_45_we0;
output  [11:0] accum_45_d0;
output  [8:0] accum_44_address0;
output   accum_44_ce0;
output   accum_44_we0;
output  [11:0] accum_44_d0;
output  [8:0] accum_43_address0;
output   accum_43_ce0;
output   accum_43_we0;
output  [11:0] accum_43_d0;
output  [8:0] accum_42_address0;
output   accum_42_ce0;
output   accum_42_we0;
output  [11:0] accum_42_d0;
output  [8:0] accum_41_address0;
output   accum_41_ce0;
output   accum_41_we0;
output  [11:0] accum_41_d0;
output  [8:0] accum_40_address0;
output   accum_40_ce0;
output   accum_40_we0;
output  [11:0] accum_40_d0;
output  [8:0] accum_39_address0;
output   accum_39_ce0;
output   accum_39_we0;
output  [11:0] accum_39_d0;
output  [8:0] accum_38_address0;
output   accum_38_ce0;
output   accum_38_we0;
output  [11:0] accum_38_d0;
output  [8:0] accum_37_address0;
output   accum_37_ce0;
output   accum_37_we0;
output  [11:0] accum_37_d0;
output  [8:0] accum_36_address0;
output   accum_36_ce0;
output   accum_36_we0;
output  [11:0] accum_36_d0;
output  [8:0] accum_35_address0;
output   accum_35_ce0;
output   accum_35_we0;
output  [11:0] accum_35_d0;
output  [8:0] accum_34_address0;
output   accum_34_ce0;
output   accum_34_we0;
output  [11:0] accum_34_d0;
output  [8:0] accum_33_address0;
output   accum_33_ce0;
output   accum_33_we0;
output  [11:0] accum_33_d0;
output  [8:0] accum_32_address0;
output   accum_32_ce0;
output   accum_32_we0;
output  [11:0] accum_32_d0;
output  [8:0] accum_31_address0;
output   accum_31_ce0;
output   accum_31_we0;
output  [11:0] accum_31_d0;
output  [8:0] accum_30_address0;
output   accum_30_ce0;
output   accum_30_we0;
output  [11:0] accum_30_d0;
output  [8:0] accum_29_address0;
output   accum_29_ce0;
output   accum_29_we0;
output  [11:0] accum_29_d0;
output  [8:0] accum_28_address0;
output   accum_28_ce0;
output   accum_28_we0;
output  [11:0] accum_28_d0;
output  [8:0] accum_27_address0;
output   accum_27_ce0;
output   accum_27_we0;
output  [11:0] accum_27_d0;
output  [8:0] accum_26_address0;
output   accum_26_ce0;
output   accum_26_we0;
output  [11:0] accum_26_d0;
output  [8:0] accum_25_address0;
output   accum_25_ce0;
output   accum_25_we0;
output  [11:0] accum_25_d0;
output  [8:0] accum_24_address0;
output   accum_24_ce0;
output   accum_24_we0;
output  [11:0] accum_24_d0;
output  [8:0] accum_23_address0;
output   accum_23_ce0;
output   accum_23_we0;
output  [11:0] accum_23_d0;
output  [8:0] accum_22_address0;
output   accum_22_ce0;
output   accum_22_we0;
output  [11:0] accum_22_d0;
output  [8:0] accum_21_address0;
output   accum_21_ce0;
output   accum_21_we0;
output  [11:0] accum_21_d0;
output  [8:0] accum_20_address0;
output   accum_20_ce0;
output   accum_20_we0;
output  [11:0] accum_20_d0;
output  [8:0] accum_19_address0;
output   accum_19_ce0;
output   accum_19_we0;
output  [11:0] accum_19_d0;
output  [8:0] accum_18_address0;
output   accum_18_ce0;
output   accum_18_we0;
output  [11:0] accum_18_d0;
output  [8:0] accum_17_address0;
output   accum_17_ce0;
output   accum_17_we0;
output  [11:0] accum_17_d0;
output  [8:0] accum_16_address0;
output   accum_16_ce0;
output   accum_16_we0;
output  [11:0] accum_16_d0;
output  [8:0] accum_15_address0;
output   accum_15_ce0;
output   accum_15_we0;
output  [11:0] accum_15_d0;
output  [8:0] accum_14_address0;
output   accum_14_ce0;
output   accum_14_we0;
output  [11:0] accum_14_d0;
output  [8:0] accum_13_address0;
output   accum_13_ce0;
output   accum_13_we0;
output  [11:0] accum_13_d0;
output  [8:0] accum_12_address0;
output   accum_12_ce0;
output   accum_12_we0;
output  [11:0] accum_12_d0;
output  [8:0] accum_11_address0;
output   accum_11_ce0;
output   accum_11_we0;
output  [11:0] accum_11_d0;
output  [8:0] accum_10_address0;
output   accum_10_ce0;
output   accum_10_we0;
output  [11:0] accum_10_d0;
output  [8:0] accum_9_address0;
output   accum_9_ce0;
output   accum_9_we0;
output  [11:0] accum_9_d0;
output  [8:0] accum_8_address0;
output   accum_8_ce0;
output   accum_8_we0;
output  [11:0] accum_8_d0;
output  [8:0] accum_7_address0;
output   accum_7_ce0;
output   accum_7_we0;
output  [11:0] accum_7_d0;
output  [8:0] accum_6_address0;
output   accum_6_ce0;
output   accum_6_we0;
output  [11:0] accum_6_d0;
output  [8:0] accum_5_address0;
output   accum_5_ce0;
output   accum_5_we0;
output  [11:0] accum_5_d0;
output  [8:0] accum_4_address0;
output   accum_4_ce0;
output   accum_4_we0;
output  [11:0] accum_4_d0;
output  [8:0] accum_3_address0;
output   accum_3_ce0;
output   accum_3_we0;
output  [11:0] accum_3_d0;
output  [8:0] accum_2_address0;
output   accum_2_ce0;
output   accum_2_we0;
output  [11:0] accum_2_d0;
output  [8:0] accum_1_address0;
output   accum_1_ce0;
output   accum_1_we0;
output  [11:0] accum_1_d0;
output  [8:0] accum_0_address0;
output   accum_0_ce0;
output   accum_0_we0;
output  [11:0] accum_0_d0;

reg ap_idle;
reg accum_60_ce0;
reg accum_60_we0;
reg accum_59_ce0;
reg accum_59_we0;
reg accum_58_ce0;
reg accum_58_we0;
reg accum_57_ce0;
reg accum_57_we0;
reg accum_56_ce0;
reg accum_56_we0;
reg accum_55_ce0;
reg accum_55_we0;
reg accum_54_ce0;
reg accum_54_we0;
reg accum_53_ce0;
reg accum_53_we0;
reg accum_52_ce0;
reg accum_52_we0;
reg accum_51_ce0;
reg accum_51_we0;
reg accum_50_ce0;
reg accum_50_we0;
reg accum_49_ce0;
reg accum_49_we0;
reg accum_48_ce0;
reg accum_48_we0;
reg accum_47_ce0;
reg accum_47_we0;
reg accum_46_ce0;
reg accum_46_we0;
reg accum_45_ce0;
reg accum_45_we0;
reg accum_44_ce0;
reg accum_44_we0;
reg accum_43_ce0;
reg accum_43_we0;
reg accum_42_ce0;
reg accum_42_we0;
reg accum_41_ce0;
reg accum_41_we0;
reg accum_40_ce0;
reg accum_40_we0;
reg accum_39_ce0;
reg accum_39_we0;
reg accum_38_ce0;
reg accum_38_we0;
reg accum_37_ce0;
reg accum_37_we0;
reg accum_36_ce0;
reg accum_36_we0;
reg accum_35_ce0;
reg accum_35_we0;
reg accum_34_ce0;
reg accum_34_we0;
reg accum_33_ce0;
reg accum_33_we0;
reg accum_32_ce0;
reg accum_32_we0;
reg accum_31_ce0;
reg accum_31_we0;
reg accum_30_ce0;
reg accum_30_we0;
reg accum_29_ce0;
reg accum_29_we0;
reg accum_28_ce0;
reg accum_28_we0;
reg accum_27_ce0;
reg accum_27_we0;
reg accum_26_ce0;
reg accum_26_we0;
reg accum_25_ce0;
reg accum_25_we0;
reg accum_24_ce0;
reg accum_24_we0;
reg accum_23_ce0;
reg accum_23_we0;
reg accum_22_ce0;
reg accum_22_we0;
reg accum_21_ce0;
reg accum_21_we0;
reg accum_20_ce0;
reg accum_20_we0;
reg accum_19_ce0;
reg accum_19_we0;
reg accum_18_ce0;
reg accum_18_we0;
reg accum_17_ce0;
reg accum_17_we0;
reg accum_16_ce0;
reg accum_16_we0;
reg accum_15_ce0;
reg accum_15_we0;
reg accum_14_ce0;
reg accum_14_we0;
reg accum_13_ce0;
reg accum_13_we0;
reg accum_12_ce0;
reg accum_12_we0;
reg accum_11_ce0;
reg accum_11_we0;
reg accum_10_ce0;
reg accum_10_we0;
reg accum_9_ce0;
reg accum_9_we0;
reg accum_8_ce0;
reg accum_8_we0;
reg accum_7_ce0;
reg accum_7_we0;
reg accum_6_ce0;
reg accum_6_we0;
reg accum_5_ce0;
reg accum_5_we0;
reg accum_4_ce0;
reg accum_4_we0;
reg accum_3_ce0;
reg accum_3_we0;
reg accum_2_ce0;
reg accum_2_we0;
reg accum_1_ce0;
reg accum_1_we0;
reg accum_0_ce0;
reg accum_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1073_fu_1026_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] conv_i1087_fu_1038_p1;
reg   [8:0] r_V_fu_160;
wire   [8:0] r_V_2_fu_1032_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_r_V_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

reversi_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln1073_fu_1026_p2 == 1'd0)) begin
            r_V_fu_160 <= r_V_2_fu_1032_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            r_V_fu_160 <= 9'd0;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_0_ce0 = 1'b1;
    end else begin
        accum_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_0_we0 = 1'b1;
    end else begin
        accum_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_10_ce0 = 1'b1;
    end else begin
        accum_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_10_we0 = 1'b1;
    end else begin
        accum_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_11_ce0 = 1'b1;
    end else begin
        accum_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_11_we0 = 1'b1;
    end else begin
        accum_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_12_ce0 = 1'b1;
    end else begin
        accum_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_12_we0 = 1'b1;
    end else begin
        accum_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_13_ce0 = 1'b1;
    end else begin
        accum_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_13_we0 = 1'b1;
    end else begin
        accum_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_14_ce0 = 1'b1;
    end else begin
        accum_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_14_we0 = 1'b1;
    end else begin
        accum_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_15_ce0 = 1'b1;
    end else begin
        accum_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_15_we0 = 1'b1;
    end else begin
        accum_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_16_ce0 = 1'b1;
    end else begin
        accum_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_16_we0 = 1'b1;
    end else begin
        accum_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_17_ce0 = 1'b1;
    end else begin
        accum_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_17_we0 = 1'b1;
    end else begin
        accum_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_18_ce0 = 1'b1;
    end else begin
        accum_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_18_we0 = 1'b1;
    end else begin
        accum_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_19_ce0 = 1'b1;
    end else begin
        accum_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_19_we0 = 1'b1;
    end else begin
        accum_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_1_ce0 = 1'b1;
    end else begin
        accum_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_1_we0 = 1'b1;
    end else begin
        accum_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_20_ce0 = 1'b1;
    end else begin
        accum_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_20_we0 = 1'b1;
    end else begin
        accum_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_21_ce0 = 1'b1;
    end else begin
        accum_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_21_we0 = 1'b1;
    end else begin
        accum_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_22_ce0 = 1'b1;
    end else begin
        accum_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_22_we0 = 1'b1;
    end else begin
        accum_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_23_ce0 = 1'b1;
    end else begin
        accum_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_23_we0 = 1'b1;
    end else begin
        accum_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_24_ce0 = 1'b1;
    end else begin
        accum_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_24_we0 = 1'b1;
    end else begin
        accum_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_25_ce0 = 1'b1;
    end else begin
        accum_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_25_we0 = 1'b1;
    end else begin
        accum_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_26_ce0 = 1'b1;
    end else begin
        accum_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_26_we0 = 1'b1;
    end else begin
        accum_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_27_ce0 = 1'b1;
    end else begin
        accum_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_27_we0 = 1'b1;
    end else begin
        accum_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_28_ce0 = 1'b1;
    end else begin
        accum_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_28_we0 = 1'b1;
    end else begin
        accum_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_29_ce0 = 1'b1;
    end else begin
        accum_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_29_we0 = 1'b1;
    end else begin
        accum_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_2_ce0 = 1'b1;
    end else begin
        accum_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_2_we0 = 1'b1;
    end else begin
        accum_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_30_ce0 = 1'b1;
    end else begin
        accum_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_30_we0 = 1'b1;
    end else begin
        accum_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_31_ce0 = 1'b1;
    end else begin
        accum_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_31_we0 = 1'b1;
    end else begin
        accum_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_32_ce0 = 1'b1;
    end else begin
        accum_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_32_we0 = 1'b1;
    end else begin
        accum_32_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_33_ce0 = 1'b1;
    end else begin
        accum_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_33_we0 = 1'b1;
    end else begin
        accum_33_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_34_ce0 = 1'b1;
    end else begin
        accum_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_34_we0 = 1'b1;
    end else begin
        accum_34_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_35_ce0 = 1'b1;
    end else begin
        accum_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_35_we0 = 1'b1;
    end else begin
        accum_35_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_36_ce0 = 1'b1;
    end else begin
        accum_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_36_we0 = 1'b1;
    end else begin
        accum_36_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_37_ce0 = 1'b1;
    end else begin
        accum_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_37_we0 = 1'b1;
    end else begin
        accum_37_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_38_ce0 = 1'b1;
    end else begin
        accum_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_38_we0 = 1'b1;
    end else begin
        accum_38_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_39_ce0 = 1'b1;
    end else begin
        accum_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_39_we0 = 1'b1;
    end else begin
        accum_39_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_3_ce0 = 1'b1;
    end else begin
        accum_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_3_we0 = 1'b1;
    end else begin
        accum_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_40_ce0 = 1'b1;
    end else begin
        accum_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_40_we0 = 1'b1;
    end else begin
        accum_40_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_41_ce0 = 1'b1;
    end else begin
        accum_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_41_we0 = 1'b1;
    end else begin
        accum_41_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_42_ce0 = 1'b1;
    end else begin
        accum_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_42_we0 = 1'b1;
    end else begin
        accum_42_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_43_ce0 = 1'b1;
    end else begin
        accum_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_43_we0 = 1'b1;
    end else begin
        accum_43_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_44_ce0 = 1'b1;
    end else begin
        accum_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_44_we0 = 1'b1;
    end else begin
        accum_44_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_45_ce0 = 1'b1;
    end else begin
        accum_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_45_we0 = 1'b1;
    end else begin
        accum_45_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_46_ce0 = 1'b1;
    end else begin
        accum_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_46_we0 = 1'b1;
    end else begin
        accum_46_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_47_ce0 = 1'b1;
    end else begin
        accum_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_47_we0 = 1'b1;
    end else begin
        accum_47_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_48_ce0 = 1'b1;
    end else begin
        accum_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_48_we0 = 1'b1;
    end else begin
        accum_48_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_49_ce0 = 1'b1;
    end else begin
        accum_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_49_we0 = 1'b1;
    end else begin
        accum_49_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_4_ce0 = 1'b1;
    end else begin
        accum_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_4_we0 = 1'b1;
    end else begin
        accum_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_50_ce0 = 1'b1;
    end else begin
        accum_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_50_we0 = 1'b1;
    end else begin
        accum_50_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_51_ce0 = 1'b1;
    end else begin
        accum_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_51_we0 = 1'b1;
    end else begin
        accum_51_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_52_ce0 = 1'b1;
    end else begin
        accum_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_52_we0 = 1'b1;
    end else begin
        accum_52_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_53_ce0 = 1'b1;
    end else begin
        accum_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_53_we0 = 1'b1;
    end else begin
        accum_53_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_54_ce0 = 1'b1;
    end else begin
        accum_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_54_we0 = 1'b1;
    end else begin
        accum_54_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_55_ce0 = 1'b1;
    end else begin
        accum_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_55_we0 = 1'b1;
    end else begin
        accum_55_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_56_ce0 = 1'b1;
    end else begin
        accum_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_56_we0 = 1'b1;
    end else begin
        accum_56_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_57_ce0 = 1'b1;
    end else begin
        accum_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_57_we0 = 1'b1;
    end else begin
        accum_57_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_58_ce0 = 1'b1;
    end else begin
        accum_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_58_we0 = 1'b1;
    end else begin
        accum_58_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_59_ce0 = 1'b1;
    end else begin
        accum_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_59_we0 = 1'b1;
    end else begin
        accum_59_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_5_ce0 = 1'b1;
    end else begin
        accum_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_5_we0 = 1'b1;
    end else begin
        accum_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_60_ce0 = 1'b1;
    end else begin
        accum_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_60_we0 = 1'b1;
    end else begin
        accum_60_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_6_ce0 = 1'b1;
    end else begin
        accum_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_6_we0 = 1'b1;
    end else begin
        accum_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_7_ce0 = 1'b1;
    end else begin
        accum_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_7_we0 = 1'b1;
    end else begin
        accum_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_8_ce0 = 1'b1;
    end else begin
        accum_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_8_we0 = 1'b1;
    end else begin
        accum_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_9_ce0 = 1'b1;
    end else begin
        accum_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_9_we0 = 1'b1;
    end else begin
        accum_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_1026_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_r_V_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_r_V_1 = r_V_fu_160;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_0_address0 = conv_i1087_fu_1038_p1;

assign accum_0_d0 = 12'd0;

assign accum_10_address0 = conv_i1087_fu_1038_p1;

assign accum_10_d0 = 12'd0;

assign accum_11_address0 = conv_i1087_fu_1038_p1;

assign accum_11_d0 = 12'd0;

assign accum_12_address0 = conv_i1087_fu_1038_p1;

assign accum_12_d0 = 12'd0;

assign accum_13_address0 = conv_i1087_fu_1038_p1;

assign accum_13_d0 = 12'd0;

assign accum_14_address0 = conv_i1087_fu_1038_p1;

assign accum_14_d0 = 12'd0;

assign accum_15_address0 = conv_i1087_fu_1038_p1;

assign accum_15_d0 = 12'd0;

assign accum_16_address0 = conv_i1087_fu_1038_p1;

assign accum_16_d0 = 12'd0;

assign accum_17_address0 = conv_i1087_fu_1038_p1;

assign accum_17_d0 = 12'd0;

assign accum_18_address0 = conv_i1087_fu_1038_p1;

assign accum_18_d0 = 12'd0;

assign accum_19_address0 = conv_i1087_fu_1038_p1;

assign accum_19_d0 = 12'd0;

assign accum_1_address0 = conv_i1087_fu_1038_p1;

assign accum_1_d0 = 12'd0;

assign accum_20_address0 = conv_i1087_fu_1038_p1;

assign accum_20_d0 = 12'd0;

assign accum_21_address0 = conv_i1087_fu_1038_p1;

assign accum_21_d0 = 12'd0;

assign accum_22_address0 = conv_i1087_fu_1038_p1;

assign accum_22_d0 = 12'd0;

assign accum_23_address0 = conv_i1087_fu_1038_p1;

assign accum_23_d0 = 12'd0;

assign accum_24_address0 = conv_i1087_fu_1038_p1;

assign accum_24_d0 = 12'd0;

assign accum_25_address0 = conv_i1087_fu_1038_p1;

assign accum_25_d0 = 12'd0;

assign accum_26_address0 = conv_i1087_fu_1038_p1;

assign accum_26_d0 = 12'd0;

assign accum_27_address0 = conv_i1087_fu_1038_p1;

assign accum_27_d0 = 12'd0;

assign accum_28_address0 = conv_i1087_fu_1038_p1;

assign accum_28_d0 = 12'd0;

assign accum_29_address0 = conv_i1087_fu_1038_p1;

assign accum_29_d0 = 12'd0;

assign accum_2_address0 = conv_i1087_fu_1038_p1;

assign accum_2_d0 = 12'd0;

assign accum_30_address0 = conv_i1087_fu_1038_p1;

assign accum_30_d0 = 12'd0;

assign accum_31_address0 = conv_i1087_fu_1038_p1;

assign accum_31_d0 = 12'd0;

assign accum_32_address0 = conv_i1087_fu_1038_p1;

assign accum_32_d0 = 12'd0;

assign accum_33_address0 = conv_i1087_fu_1038_p1;

assign accum_33_d0 = 12'd0;

assign accum_34_address0 = conv_i1087_fu_1038_p1;

assign accum_34_d0 = 12'd0;

assign accum_35_address0 = conv_i1087_fu_1038_p1;

assign accum_35_d0 = 12'd0;

assign accum_36_address0 = conv_i1087_fu_1038_p1;

assign accum_36_d0 = 12'd0;

assign accum_37_address0 = conv_i1087_fu_1038_p1;

assign accum_37_d0 = 12'd0;

assign accum_38_address0 = conv_i1087_fu_1038_p1;

assign accum_38_d0 = 12'd0;

assign accum_39_address0 = conv_i1087_fu_1038_p1;

assign accum_39_d0 = 12'd0;

assign accum_3_address0 = conv_i1087_fu_1038_p1;

assign accum_3_d0 = 12'd0;

assign accum_40_address0 = conv_i1087_fu_1038_p1;

assign accum_40_d0 = 12'd0;

assign accum_41_address0 = conv_i1087_fu_1038_p1;

assign accum_41_d0 = 12'd0;

assign accum_42_address0 = conv_i1087_fu_1038_p1;

assign accum_42_d0 = 12'd0;

assign accum_43_address0 = conv_i1087_fu_1038_p1;

assign accum_43_d0 = 12'd0;

assign accum_44_address0 = conv_i1087_fu_1038_p1;

assign accum_44_d0 = 12'd0;

assign accum_45_address0 = conv_i1087_fu_1038_p1;

assign accum_45_d0 = 12'd0;

assign accum_46_address0 = conv_i1087_fu_1038_p1;

assign accum_46_d0 = 12'd0;

assign accum_47_address0 = conv_i1087_fu_1038_p1;

assign accum_47_d0 = 12'd0;

assign accum_48_address0 = conv_i1087_fu_1038_p1;

assign accum_48_d0 = 12'd0;

assign accum_49_address0 = conv_i1087_fu_1038_p1;

assign accum_49_d0 = 12'd0;

assign accum_4_address0 = conv_i1087_fu_1038_p1;

assign accum_4_d0 = 12'd0;

assign accum_50_address0 = conv_i1087_fu_1038_p1;

assign accum_50_d0 = 12'd0;

assign accum_51_address0 = conv_i1087_fu_1038_p1;

assign accum_51_d0 = 12'd0;

assign accum_52_address0 = conv_i1087_fu_1038_p1;

assign accum_52_d0 = 12'd0;

assign accum_53_address0 = conv_i1087_fu_1038_p1;

assign accum_53_d0 = 12'd0;

assign accum_54_address0 = conv_i1087_fu_1038_p1;

assign accum_54_d0 = 12'd0;

assign accum_55_address0 = conv_i1087_fu_1038_p1;

assign accum_55_d0 = 12'd0;

assign accum_56_address0 = conv_i1087_fu_1038_p1;

assign accum_56_d0 = 12'd0;

assign accum_57_address0 = conv_i1087_fu_1038_p1;

assign accum_57_d0 = 12'd0;

assign accum_58_address0 = conv_i1087_fu_1038_p1;

assign accum_58_d0 = 12'd0;

assign accum_59_address0 = conv_i1087_fu_1038_p1;

assign accum_59_d0 = 12'd0;

assign accum_5_address0 = conv_i1087_fu_1038_p1;

assign accum_5_d0 = 12'd0;

assign accum_60_address0 = conv_i1087_fu_1038_p1;

assign accum_60_d0 = 1'd0;

assign accum_6_address0 = conv_i1087_fu_1038_p1;

assign accum_6_d0 = 12'd0;

assign accum_7_address0 = conv_i1087_fu_1038_p1;

assign accum_7_d0 = 12'd0;

assign accum_8_address0 = conv_i1087_fu_1038_p1;

assign accum_8_d0 = 12'd0;

assign accum_9_address0 = conv_i1087_fu_1038_p1;

assign accum_9_d0 = 12'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_i1087_fu_1038_p1 = ap_sig_allocacmp_r_V_1;

assign icmp_ln1073_fu_1026_p2 = ((ap_sig_allocacmp_r_V_1 == 9'd484) ? 1'b1 : 1'b0);

assign r_V_2_fu_1032_p2 = (ap_sig_allocacmp_r_V_1 + 9'd1);

endmodule //reversi_accel_xfVoting_0_1024_1024_0_1_2_1_6u_3u_60_483_0_Pipeline_loop_init_r
