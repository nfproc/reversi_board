-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RHO_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_RHO_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RHO_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RHO_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RHO_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RHO_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RHO_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RHO_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_THETA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_THETA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_THETA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_THETA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_THETA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_THETA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_THETA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_THETA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_RHO_USER_VALUE : INTEGER := 0;
    C_M_AXI_RHO_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RHO_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_THETA_USER_VALUE : INTEGER := 0;
    C_M_AXI_THETA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_THETA_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_data_AWVALID : OUT STD_LOGIC;
    m_axi_data_AWREADY : IN STD_LOGIC;
    m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_data_WVALID : OUT STD_LOGIC;
    m_axi_data_WREADY : IN STD_LOGIC;
    m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_data_WLAST : OUT STD_LOGIC;
    m_axi_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_data_ARVALID : OUT STD_LOGIC;
    m_axi_data_ARREADY : IN STD_LOGIC;
    m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_data_RVALID : IN STD_LOGIC;
    m_axi_data_RREADY : OUT STD_LOGIC;
    m_axi_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_DATA_WIDTH-1 downto 0);
    m_axi_data_RLAST : IN STD_LOGIC;
    m_axi_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BVALID : IN STD_LOGIC;
    m_axi_data_BREADY : OUT STD_LOGIC;
    m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_ID_WIDTH-1 downto 0);
    m_axi_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BUSER_WIDTH-1 downto 0);
    m_axi_rho_AWVALID : OUT STD_LOGIC;
    m_axi_rho_AWREADY : IN STD_LOGIC;
    m_axi_rho_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_ADDR_WIDTH-1 downto 0);
    m_axi_rho_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_ID_WIDTH-1 downto 0);
    m_axi_rho_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_rho_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_AWUSER_WIDTH-1 downto 0);
    m_axi_rho_WVALID : OUT STD_LOGIC;
    m_axi_rho_WREADY : IN STD_LOGIC;
    m_axi_rho_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_DATA_WIDTH-1 downto 0);
    m_axi_rho_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_DATA_WIDTH/8-1 downto 0);
    m_axi_rho_WLAST : OUT STD_LOGIC;
    m_axi_rho_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_ID_WIDTH-1 downto 0);
    m_axi_rho_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_WUSER_WIDTH-1 downto 0);
    m_axi_rho_ARVALID : OUT STD_LOGIC;
    m_axi_rho_ARREADY : IN STD_LOGIC;
    m_axi_rho_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_ADDR_WIDTH-1 downto 0);
    m_axi_rho_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_ID_WIDTH-1 downto 0);
    m_axi_rho_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_rho_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RHO_ARUSER_WIDTH-1 downto 0);
    m_axi_rho_RVALID : IN STD_LOGIC;
    m_axi_rho_RREADY : OUT STD_LOGIC;
    m_axi_rho_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RHO_DATA_WIDTH-1 downto 0);
    m_axi_rho_RLAST : IN STD_LOGIC;
    m_axi_rho_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RHO_ID_WIDTH-1 downto 0);
    m_axi_rho_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RHO_RUSER_WIDTH-1 downto 0);
    m_axi_rho_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_BVALID : IN STD_LOGIC;
    m_axi_rho_BREADY : OUT STD_LOGIC;
    m_axi_rho_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RHO_ID_WIDTH-1 downto 0);
    m_axi_rho_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RHO_BUSER_WIDTH-1 downto 0);
    m_axi_theta_AWVALID : OUT STD_LOGIC;
    m_axi_theta_AWREADY : IN STD_LOGIC;
    m_axi_theta_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_ADDR_WIDTH-1 downto 0);
    m_axi_theta_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_ID_WIDTH-1 downto 0);
    m_axi_theta_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_theta_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_AWUSER_WIDTH-1 downto 0);
    m_axi_theta_WVALID : OUT STD_LOGIC;
    m_axi_theta_WREADY : IN STD_LOGIC;
    m_axi_theta_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_DATA_WIDTH-1 downto 0);
    m_axi_theta_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_DATA_WIDTH/8-1 downto 0);
    m_axi_theta_WLAST : OUT STD_LOGIC;
    m_axi_theta_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_ID_WIDTH-1 downto 0);
    m_axi_theta_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_WUSER_WIDTH-1 downto 0);
    m_axi_theta_ARVALID : OUT STD_LOGIC;
    m_axi_theta_ARREADY : IN STD_LOGIC;
    m_axi_theta_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_ADDR_WIDTH-1 downto 0);
    m_axi_theta_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_ID_WIDTH-1 downto 0);
    m_axi_theta_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_theta_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_THETA_ARUSER_WIDTH-1 downto 0);
    m_axi_theta_RVALID : IN STD_LOGIC;
    m_axi_theta_RREADY : OUT STD_LOGIC;
    m_axi_theta_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_THETA_DATA_WIDTH-1 downto 0);
    m_axi_theta_RLAST : IN STD_LOGIC;
    m_axi_theta_RID : IN STD_LOGIC_VECTOR (C_M_AXI_THETA_ID_WIDTH-1 downto 0);
    m_axi_theta_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_THETA_RUSER_WIDTH-1 downto 0);
    m_axi_theta_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_BVALID : IN STD_LOGIC;
    m_axi_theta_BREADY : OUT STD_LOGIC;
    m_axi_theta_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_BID : IN STD_LOGIC_VECTOR (C_M_AXI_THETA_ID_WIDTH-1 downto 0);
    m_axi_theta_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_THETA_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of reversi_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "reversi_accel_reversi_accel,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.654000,HLS_SYN_LAT=1082526,HLS_SYN_TPT=1082527,HLS_SYN_MEM=93,HLS_SYN_DSP=0,HLS_SYN_FF=40289,HLS_SYN_LUT=87001,HLS_VERSION=2022_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal rho_out : STD_LOGIC_VECTOR (63 downto 0);
    signal theta_out : STD_LOGIC_VECTOR (63 downto 0);
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal stride : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal data_AWREADY : STD_LOGIC;
    signal data_WREADY : STD_LOGIC;
    signal data_ARREADY : STD_LOGIC;
    signal data_RVALID : STD_LOGIC;
    signal data_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data_RLAST : STD_LOGIC;
    signal data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_BVALID : STD_LOGIC;
    signal rho_AWREADY : STD_LOGIC;
    signal rho_WREADY : STD_LOGIC;
    signal rho_ARREADY : STD_LOGIC;
    signal rho_RVALID : STD_LOGIC;
    signal rho_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal rho_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal rho_BVALID : STD_LOGIC;
    signal rho_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal rho_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal rho_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal theta_AWREADY : STD_LOGIC;
    signal theta_WREADY : STD_LOGIC;
    signal theta_ARREADY : STD_LOGIC;
    signal theta_RVALID : STD_LOGIC;
    signal theta_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal theta_BVALID : STD_LOGIC;
    signal theta_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal theta_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal theta_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc19_U0_ap_start : STD_LOGIC;
    signal entry_proc19_U0_ap_done : STD_LOGIC;
    signal entry_proc19_U0_ap_continue : STD_LOGIC;
    signal entry_proc19_U0_ap_idle : STD_LOGIC;
    signal entry_proc19_U0_ap_ready : STD_LOGIC;
    signal entry_proc19_U0_rho_out_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc19_U0_rho_out_c_write : STD_LOGIC;
    signal entry_proc19_U0_theta_out_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc19_U0_theta_out_c_write : STD_LOGIC;
    signal Block_entry4_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry4_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry4_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry4_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry4_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry4_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_25 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_26 : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_entry4_proc_U0_ap_return_27 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry4_proc_U0_ap_return_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_mat_in_cols_c37_channel : STD_LOGIC;
    signal mat_in_cols_c37_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_in_cols_c37_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_in_cols_c37_channel : STD_LOGIC;
    signal ap_channel_done_mat_in_rows_c36_channel : STD_LOGIC;
    signal mat_in_rows_c36_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_in_rows_c36_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_in_rows_c36_channel : STD_LOGIC;
    signal ap_channel_done_add_ln22_loc_channel : STD_LOGIC;
    signal add_ln22_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_add_ln22_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_add_ln22_loc_channel : STD_LOGIC;
    signal ap_channel_done_mat_dil_b_cols_channel : STD_LOGIC;
    signal mat_dil_b_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_dil_b_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_dil_b_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_dil_b_rows_channel : STD_LOGIC;
    signal mat_dil_b_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_dil_b_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_dil_b_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_lap_cols_channel : STD_LOGIC;
    signal mat_lap_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_lap_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_lap_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_lap_rows_channel : STD_LOGIC;
    signal mat_lap_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_lap_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_lap_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_lap1_cols_channel : STD_LOGIC;
    signal mat_lap1_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_lap1_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_lap1_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_lap1_rows_channel : STD_LOGIC;
    signal mat_lap1_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_lap1_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_lap1_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_ero2_cols_channel : STD_LOGIC;
    signal mat_ero2_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_ero2_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_ero2_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_ero2_rows_channel : STD_LOGIC;
    signal mat_ero2_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_ero2_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_ero2_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_ero1_cols_channel : STD_LOGIC;
    signal mat_ero1_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_ero1_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_ero1_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_ero1_rows_channel : STD_LOGIC;
    signal mat_ero1_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_ero1_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_ero1_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_ero_cols_channel : STD_LOGIC;
    signal mat_ero_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_ero_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_ero_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_ero_rows_channel : STD_LOGIC;
    signal mat_ero_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_ero_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_ero_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_dil_a_cols_channel : STD_LOGIC;
    signal mat_dil_a_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_dil_a_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_dil_a_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_dil_a_rows_channel : STD_LOGIC;
    signal mat_dil_a_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_dil_a_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_dil_a_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_green_cols_channel : STD_LOGIC;
    signal mat_green_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_green_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_green_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_green_rows_channel : STD_LOGIC;
    signal mat_green_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_green_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_green_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_green1_cols_channel : STD_LOGIC;
    signal mat_green1_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_green1_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_green1_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_green1_rows_channel : STD_LOGIC;
    signal mat_green1_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_green1_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_green1_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_hsv2_cols_channel : STD_LOGIC;
    signal mat_hsv2_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_hsv2_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_hsv2_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_hsv2_rows_channel : STD_LOGIC;
    signal mat_hsv2_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_hsv2_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_hsv2_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_hsv1_cols_channel : STD_LOGIC;
    signal mat_hsv1_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_hsv1_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_hsv1_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_hsv1_rows_channel : STD_LOGIC;
    signal mat_hsv1_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_hsv1_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_hsv1_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_hsv_cols_channel : STD_LOGIC;
    signal mat_hsv_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_hsv_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_hsv_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_hsv_rows_channel : STD_LOGIC;
    signal mat_hsv_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_hsv_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_hsv_rows_channel : STD_LOGIC;
    signal ap_channel_done_mat_blur_cols_channel : STD_LOGIC;
    signal mat_blur_cols_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_blur_cols_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_blur_cols_channel : STD_LOGIC;
    signal ap_channel_done_mat_blur_rows_channel : STD_LOGIC;
    signal mat_blur_rows_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_mat_blur_rows_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_mat_blur_rows_channel : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_ap_start : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_ap_done : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_ap_continue : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_ap_idle : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_start_out : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_start_write : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWVALID : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WVALID : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WLAST : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARVALID : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_RREADY : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_BREADY : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_data_din : STD_LOGIC_VECTOR (23 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_data_write : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_rows_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_rows_c_write : STD_LOGIC;
    signal Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_cols_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_cols_c_write : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_start : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_done : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_continue : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_idle : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_ready : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_p_src_rows_read : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_p_src_cols_read : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_in_data323_read : STD_LOGIC;
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_blur_data324_din : STD_LOGIC_VECTOR (23 downto 0);
    signal GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_blur_data324_write : STD_LOGIC;
    signal bgr2hsv_16_1024_1024_1_2_2_U0_ap_start : STD_LOGIC;
    signal bgr2hsv_16_1024_1024_1_2_2_U0_ap_done : STD_LOGIC;
    signal bgr2hsv_16_1024_1024_1_2_2_U0_ap_continue : STD_LOGIC;
    signal bgr2hsv_16_1024_1024_1_2_2_U0_ap_idle : STD_LOGIC;
    signal bgr2hsv_16_1024_1024_1_2_2_U0_ap_ready : STD_LOGIC;
    signal bgr2hsv_16_1024_1024_1_2_2_U0_mat_blur_data324_read : STD_LOGIC;
    signal bgr2hsv_16_1024_1024_1_2_2_U0_mat_hsv_data325_din : STD_LOGIC_VECTOR (23 downto 0);
    signal bgr2hsv_16_1024_1024_1_2_2_U0_mat_hsv_data325_write : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_ap_start : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_ap_done : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_ap_continue : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_ap_idle : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_ap_ready : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv_data325_read : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv1_data326_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv1_data326_write : STD_LOGIC;
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv2_data327_din : STD_LOGIC_VECTOR (23 downto 0);
    signal duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv2_data327_write : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_U0_ap_start : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_U0_ap_done : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_U0_ap_continue : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_U0_ap_idle : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_U0_ap_ready : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_U0_mat_hsv1_data326_read : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_U0_mat_green1_data328_din : STD_LOGIC_VECTOR (7 downto 0);
    signal inRange_16_0_1024_1024_1_2_2_U0_mat_green1_data328_write : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_1_U0_ap_start : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_1_U0_ap_done : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_1_U0_ap_continue : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_1_U0_ap_idle : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_1_U0_ap_ready : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_1_U0_mat_hsv2_data327_read : STD_LOGIC;
    signal inRange_16_0_1024_1024_1_2_2_1_U0_mat_green2_data329_din : STD_LOGIC_VECTOR (7 downto 0);
    signal inRange_16_0_1024_1024_1_2_2_1_U0_mat_green2_data329_write : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_ap_start : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_ap_done : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_ap_continue : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_ap_idle : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_ap_ready : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green1_data328_read : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green2_data329_read : STD_LOGIC;
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green_data330_din : STD_LOGIC_VECTOR (7 downto 0);
    signal bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green_data330_write : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_start : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_done : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_continue : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_idle : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_green_data330_read : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_write : STD_LOGIC;
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_start : STD_LOGIC;
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_done : STD_LOGIC;
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_continue : STD_LOGIC;
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_idle : STD_LOGIC;
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready : STD_LOGIC;
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_read : STD_LOGIC;
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_ero_data332_din : STD_LOGIC_VECTOR (7 downto 0);
    signal erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_ero_data332_write : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_ap_start : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_ap_done : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_ap_continue : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_ap_idle : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_ap_ready : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero_data332_read : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero1_data333_din : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero1_data333_write : STD_LOGIC;
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero2_data334_din : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero2_data334_write : STD_LOGIC;
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_start : STD_LOGIC;
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_done : STD_LOGIC;
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_continue : STD_LOGIC;
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_idle : STD_LOGIC;
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready : STD_LOGIC;
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_ero1_data333_read : STD_LOGIC;
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap1_data335_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap1_data335_write : STD_LOGIC;
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_start : STD_LOGIC;
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_done : STD_LOGIC;
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_continue : STD_LOGIC;
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_idle : STD_LOGIC;
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready : STD_LOGIC;
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_ero2_data334_read : STD_LOGIC;
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap2_data336_din : STD_LOGIC_VECTOR (7 downto 0);
    signal erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap2_data336_write : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_start : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_done : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_continue : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_idle : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_ready : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap1_data335_read : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap2_data336_read : STD_LOGIC;
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap_data337_din : STD_LOGIC_VECTOR (7 downto 0);
    signal bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap_data337_write : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_start : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_done : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_continue : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_idle : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_ready : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_lap_data337_read : STD_LOGIC;
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_dil_b_data338_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_dil_b_data338_write : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_start : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_done : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_continue : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_idle : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_mat_dil_b_data338_read : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWVALID : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WVALID : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WLAST : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARVALID : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_RREADY : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_BREADY : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_outputrho_read : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWVALID : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WVALID : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WLAST : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARVALID : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_RREADY : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_BREADY : STD_LOGIC;
    signal HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_outputtheta_read : STD_LOGIC;
    signal rho_out_c_full_n : STD_LOGIC;
    signal rho_out_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal rho_out_c_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal rho_out_c_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal rho_out_c_empty_n : STD_LOGIC;
    signal theta_out_c_full_n : STD_LOGIC;
    signal theta_out_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal theta_out_c_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal theta_out_c_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal theta_out_c_empty_n : STD_LOGIC;
    signal mat_blur_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_blur_rows_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal mat_blur_rows_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal mat_blur_rows_channel_empty_n : STD_LOGIC;
    signal mat_blur_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_blur_cols_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal mat_blur_cols_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal mat_blur_cols_channel_empty_n : STD_LOGIC;
    signal mat_hsv_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_hsv_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv_rows_channel_empty_n : STD_LOGIC;
    signal mat_hsv_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_hsv_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv_cols_channel_empty_n : STD_LOGIC;
    signal mat_hsv1_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_hsv1_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv1_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv1_rows_channel_empty_n : STD_LOGIC;
    signal mat_hsv1_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_hsv1_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv1_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv1_cols_channel_empty_n : STD_LOGIC;
    signal mat_hsv2_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_hsv2_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv2_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv2_rows_channel_empty_n : STD_LOGIC;
    signal mat_hsv2_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_hsv2_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv2_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_hsv2_cols_channel_empty_n : STD_LOGIC;
    signal mat_green1_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_green1_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green1_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green1_rows_channel_empty_n : STD_LOGIC;
    signal mat_green1_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_green1_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green1_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green1_cols_channel_empty_n : STD_LOGIC;
    signal mat_green_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_green_rows_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green_rows_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green_rows_channel_empty_n : STD_LOGIC;
    signal mat_green_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_green_cols_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green_cols_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_green_cols_channel_empty_n : STD_LOGIC;
    signal mat_dil_a_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_dil_a_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_a_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_a_rows_channel_empty_n : STD_LOGIC;
    signal mat_dil_a_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_dil_a_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_a_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_a_cols_channel_empty_n : STD_LOGIC;
    signal mat_ero_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_ero_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero_rows_channel_empty_n : STD_LOGIC;
    signal mat_ero_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_ero_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero_cols_channel_empty_n : STD_LOGIC;
    signal mat_ero1_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_ero1_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero1_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero1_rows_channel_empty_n : STD_LOGIC;
    signal mat_ero1_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_ero1_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero1_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero1_cols_channel_empty_n : STD_LOGIC;
    signal mat_ero2_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_ero2_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero2_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero2_rows_channel_empty_n : STD_LOGIC;
    signal mat_ero2_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_ero2_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero2_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_ero2_cols_channel_empty_n : STD_LOGIC;
    signal mat_lap1_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_lap1_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap1_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap1_rows_channel_empty_n : STD_LOGIC;
    signal mat_lap1_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_lap1_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap1_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap1_cols_channel_empty_n : STD_LOGIC;
    signal mat_lap_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_lap_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap_rows_channel_empty_n : STD_LOGIC;
    signal mat_lap_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_lap_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_lap_cols_channel_empty_n : STD_LOGIC;
    signal mat_dil_b_rows_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_dil_b_rows_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_b_rows_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_b_rows_channel_empty_n : STD_LOGIC;
    signal mat_dil_b_cols_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_dil_b_cols_channel_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_b_cols_channel_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal mat_dil_b_cols_channel_empty_n : STD_LOGIC;
    signal add_ln22_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln22_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln22_loc_channel_empty_n : STD_LOGIC;
    signal mat_in_rows_c36_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_in_rows_c36_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_rows_c36_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_rows_c36_channel_empty_n : STD_LOGIC;
    signal mat_in_cols_c37_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_in_cols_c37_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_cols_c37_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_cols_c37_channel_empty_n : STD_LOGIC;
    signal mat_in_data_full_n : STD_LOGIC;
    signal mat_in_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal mat_in_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_data_empty_n : STD_LOGIC;
    signal mat_in_rows_c_full_n : STD_LOGIC;
    signal mat_in_rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_in_rows_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_rows_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_rows_c_empty_n : STD_LOGIC;
    signal mat_in_cols_c_full_n : STD_LOGIC;
    signal mat_in_cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_in_cols_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_cols_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_in_cols_c_empty_n : STD_LOGIC;
    signal mat_blur_data_full_n : STD_LOGIC;
    signal mat_blur_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal mat_blur_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_blur_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_blur_data_empty_n : STD_LOGIC;
    signal mat_hsv_data_full_n : STD_LOGIC;
    signal mat_hsv_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal mat_hsv_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_hsv_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_hsv_data_empty_n : STD_LOGIC;
    signal mat_hsv1_data_full_n : STD_LOGIC;
    signal mat_hsv1_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal mat_hsv1_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_hsv1_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_hsv1_data_empty_n : STD_LOGIC;
    signal mat_hsv2_data_full_n : STD_LOGIC;
    signal mat_hsv2_data_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal mat_hsv2_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_hsv2_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_hsv2_data_empty_n : STD_LOGIC;
    signal mat_green1_data_full_n : STD_LOGIC;
    signal mat_green1_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_green1_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_green1_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_green1_data_empty_n : STD_LOGIC;
    signal mat_green2_data_full_n : STD_LOGIC;
    signal mat_green2_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_green2_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_green2_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_green2_data_empty_n : STD_LOGIC;
    signal mat_green_data_full_n : STD_LOGIC;
    signal mat_green_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_green_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_green_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_green_data_empty_n : STD_LOGIC;
    signal mat_dil_a_data_full_n : STD_LOGIC;
    signal mat_dil_a_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_dil_a_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_dil_a_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_dil_a_data_empty_n : STD_LOGIC;
    signal mat_ero_data_full_n : STD_LOGIC;
    signal mat_ero_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_ero_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_ero_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_ero_data_empty_n : STD_LOGIC;
    signal mat_ero1_data_full_n : STD_LOGIC;
    signal mat_ero1_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_ero1_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_ero1_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_ero1_data_empty_n : STD_LOGIC;
    signal mat_ero2_data_full_n : STD_LOGIC;
    signal mat_ero2_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_ero2_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_ero2_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_ero2_data_empty_n : STD_LOGIC;
    signal mat_lap1_data_full_n : STD_LOGIC;
    signal mat_lap1_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_lap1_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_lap1_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_lap1_data_empty_n : STD_LOGIC;
    signal mat_lap2_data_full_n : STD_LOGIC;
    signal mat_lap2_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_lap2_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_lap2_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_lap2_data_empty_n : STD_LOGIC;
    signal mat_lap_data_full_n : STD_LOGIC;
    signal mat_lap_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_lap_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_lap_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_lap_data_empty_n : STD_LOGIC;
    signal mat_dil_b_data_full_n : STD_LOGIC;
    signal mat_dil_b_data_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_dil_b_data_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_dil_b_data_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_dil_b_data_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc19_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc19_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry4_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry4_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready : STD_LOGIC;
    signal start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_full_n : STD_LOGIC;
    signal start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_entry_proc19 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rho_out : IN STD_LOGIC_VECTOR (63 downto 0);
        rho_out_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        rho_out_c_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        rho_out_c_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        rho_out_c_full_n : IN STD_LOGIC;
        rho_out_c_write : OUT STD_LOGIC;
        theta_out : IN STD_LOGIC_VECTOR (63 downto 0);
        theta_out_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        theta_out_c_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        theta_out_c_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        theta_out_c_full_n : IN STD_LOGIC;
        theta_out_c_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_Block_entry4_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        stride : IN STD_LOGIC_VECTOR (31 downto 0);
        data_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reversi_accel_Array2xfMat_32_16_1024_1024_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_data_AWVALID : OUT STD_LOGIC;
        m_axi_data_AWREADY : IN STD_LOGIC;
        m_axi_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WVALID : OUT STD_LOGIC;
        m_axi_data_WREADY : IN STD_LOGIC;
        m_axi_data_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_WLAST : OUT STD_LOGIC;
        m_axi_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARVALID : OUT STD_LOGIC;
        m_axi_data_ARREADY : IN STD_LOGIC;
        m_axi_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RVALID : IN STD_LOGIC;
        m_axi_data_RREADY : OUT STD_LOGIC;
        m_axi_data_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_data_RLAST : IN STD_LOGIC;
        m_axi_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BVALID : IN STD_LOGIC;
        m_axi_data_BREADY : OUT STD_LOGIC;
        m_axi_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_in_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        mat_in_data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_data_full_n : IN STD_LOGIC;
        mat_in_data_write : OUT STD_LOGIC;
        stride : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_in_rows_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mat_in_rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_rows_c_full_n : IN STD_LOGIC;
        mat_in_rows_c_write : OUT STD_LOGIC;
        mat_in_cols_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mat_in_cols_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_cols_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_cols_c_full_n : IN STD_LOGIC;
        mat_in_cols_c_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_GaussianBlur_3_0_16_1024_1024_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        mat_in_data323_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        mat_in_data323_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_data323_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_in_data323_empty_n : IN STD_LOGIC;
        mat_in_data323_read : OUT STD_LOGIC;
        mat_blur_data324_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        mat_blur_data324_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_blur_data324_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_blur_data324_full_n : IN STD_LOGIC;
        mat_blur_data324_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_bgr2hsv_16_1024_1024_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_blur_data324_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        mat_blur_data324_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_blur_data324_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_blur_data324_empty_n : IN STD_LOGIC;
        mat_blur_data324_read : OUT STD_LOGIC;
        mat_hsv_data325_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        mat_hsv_data325_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv_data325_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv_data325_full_n : IN STD_LOGIC;
        mat_hsv_data325_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_duplicateMat_16_1024_1024_1_2_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_hsv_data325_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        mat_hsv_data325_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv_data325_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv_data325_empty_n : IN STD_LOGIC;
        mat_hsv_data325_read : OUT STD_LOGIC;
        mat_hsv1_data326_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        mat_hsv1_data326_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv1_data326_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv1_data326_full_n : IN STD_LOGIC;
        mat_hsv1_data326_write : OUT STD_LOGIC;
        mat_hsv2_data327_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        mat_hsv2_data327_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv2_data327_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv2_data327_full_n : IN STD_LOGIC;
        mat_hsv2_data327_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_inRange_16_0_1024_1024_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_hsv1_data326_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        mat_hsv1_data326_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv1_data326_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv1_data326_empty_n : IN STD_LOGIC;
        mat_hsv1_data326_read : OUT STD_LOGIC;
        mat_green1_data328_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_green1_data328_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green1_data328_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green1_data328_full_n : IN STD_LOGIC;
        mat_green1_data328_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_inRange_16_0_1024_1024_1_2_2_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_hsv2_data327_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        mat_hsv2_data327_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv2_data327_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_hsv2_data327_empty_n : IN STD_LOGIC;
        mat_hsv2_data327_read : OUT STD_LOGIC;
        mat_green2_data329_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_green2_data329_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green2_data329_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green2_data329_full_n : IN STD_LOGIC;
        mat_green2_data329_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_bitwise_or_0_1024_1024_1_2_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_green1_data328_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_green1_data328_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green1_data328_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green1_data328_empty_n : IN STD_LOGIC;
        mat_green1_data328_read : OUT STD_LOGIC;
        mat_green2_data329_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_green2_data329_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green2_data329_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green2_data329_empty_n : IN STD_LOGIC;
        mat_green2_data329_read : OUT STD_LOGIC;
        mat_green_data330_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_green_data330_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green_data330_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green_data330_full_n : IN STD_LOGIC;
        mat_green_data330_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_dilate_0_0_1024_1024_0_7_7_1_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_green_data330_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_green_data330_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green_data330_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_green_data330_empty_n : IN STD_LOGIC;
        mat_green_data330_read : OUT STD_LOGIC;
        mat_dil_a_data331_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_dil_a_data331_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_a_data331_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_a_data331_full_n : IN STD_LOGIC;
        mat_dil_a_data331_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_erode_0_0_1024_1024_0_7_7_1_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_dil_a_data331_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_dil_a_data331_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_a_data331_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_a_data331_empty_n : IN STD_LOGIC;
        mat_dil_a_data331_read : OUT STD_LOGIC;
        mat_ero_data332_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_ero_data332_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero_data332_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero_data332_full_n : IN STD_LOGIC;
        mat_ero_data332_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_duplicateMat_0_1024_1024_1_2_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_ero_data332_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_ero_data332_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero_data332_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero_data332_empty_n : IN STD_LOGIC;
        mat_ero_data332_read : OUT STD_LOGIC;
        mat_ero1_data333_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_ero1_data333_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero1_data333_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero1_data333_full_n : IN STD_LOGIC;
        mat_ero1_data333_write : OUT STD_LOGIC;
        mat_ero2_data334_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_ero2_data334_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero2_data334_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero2_data334_full_n : IN STD_LOGIC;
        mat_ero2_data334_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_dilate_0_0_1024_1024_2_3_3_1_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_ero1_data333_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_ero1_data333_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero1_data333_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero1_data333_empty_n : IN STD_LOGIC;
        mat_ero1_data333_read : OUT STD_LOGIC;
        mat_lap1_data335_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_lap1_data335_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap1_data335_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap1_data335_full_n : IN STD_LOGIC;
        mat_lap1_data335_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_erode_0_0_1024_1024_2_3_3_1_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_ero2_data334_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_ero2_data334_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero2_data334_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_ero2_data334_empty_n : IN STD_LOGIC;
        mat_ero2_data334_read : OUT STD_LOGIC;
        mat_lap2_data336_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_lap2_data336_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap2_data336_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap2_data336_full_n : IN STD_LOGIC;
        mat_lap2_data336_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_bitwise_xor_0_1024_1024_1_2_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_lap1_data335_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_lap1_data335_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap1_data335_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap1_data335_empty_n : IN STD_LOGIC;
        mat_lap1_data335_read : OUT STD_LOGIC;
        mat_lap2_data336_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_lap2_data336_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap2_data336_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap2_data336_empty_n : IN STD_LOGIC;
        mat_lap2_data336_read : OUT STD_LOGIC;
        mat_lap_data337_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_lap_data337_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap_data337_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap_data337_full_n : IN STD_LOGIC;
        mat_lap_data337_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_dilate_0_0_1024_1024_0_3_3_1_1_2_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_lap_data337_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_lap_data337_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap_data337_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_lap_data337_empty_n : IN STD_LOGIC;
        mat_lap_data337_read : OUT STD_LOGIC;
        mat_dil_b_data338_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mat_dil_b_data338_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_b_data338_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_b_data338_full_n : IN STD_LOGIC;
        mat_dil_b_data338_write : OUT STD_LOGIC );
    end component;


    component reversi_accel_HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_dil_b_data338_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_dil_b_data338_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_b_data338_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_b_data338_empty_n : IN STD_LOGIC;
        mat_dil_b_data338_read : OUT STD_LOGIC;
        m_axi_rho_AWVALID : OUT STD_LOGIC;
        m_axi_rho_AWREADY : IN STD_LOGIC;
        m_axi_rho_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rho_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_WVALID : OUT STD_LOGIC;
        m_axi_rho_WREADY : IN STD_LOGIC;
        m_axi_rho_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_WLAST : OUT STD_LOGIC;
        m_axi_rho_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_ARVALID : OUT STD_LOGIC;
        m_axi_rho_ARREADY : IN STD_LOGIC;
        m_axi_rho_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rho_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_RVALID : IN STD_LOGIC;
        m_axi_rho_RREADY : OUT STD_LOGIC;
        m_axi_rho_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_RLAST : IN STD_LOGIC;
        m_axi_rho_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_rho_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_BVALID : IN STD_LOGIC;
        m_axi_rho_BREADY : OUT STD_LOGIC;
        m_axi_rho_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputrho_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        outputrho_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        outputrho_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        outputrho_empty_n : IN STD_LOGIC;
        outputrho_read : OUT STD_LOGIC;
        m_axi_theta_AWVALID : OUT STD_LOGIC;
        m_axi_theta_AWREADY : IN STD_LOGIC;
        m_axi_theta_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_theta_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_WVALID : OUT STD_LOGIC;
        m_axi_theta_WREADY : IN STD_LOGIC;
        m_axi_theta_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_WLAST : OUT STD_LOGIC;
        m_axi_theta_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_ARVALID : OUT STD_LOGIC;
        m_axi_theta_ARREADY : IN STD_LOGIC;
        m_axi_theta_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_theta_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_RVALID : IN STD_LOGIC;
        m_axi_theta_RREADY : OUT STD_LOGIC;
        m_axi_theta_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_RLAST : IN STD_LOGIC;
        m_axi_theta_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_theta_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_BVALID : IN STD_LOGIC;
        m_axi_theta_BREADY : OUT STD_LOGIC;
        m_axi_theta_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputtheta_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        outputtheta_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        outputtheta_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        outputtheta_empty_n : IN STD_LOGIC;
        outputtheta_read : OUT STD_LOGIC );
    end component;


    component reversi_accel_fifo_w64_d15_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d9_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d11_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d12_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d13_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d14_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w32_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w24_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component reversi_accel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        data_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        rho_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        theta_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component reversi_accel_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component reversi_accel_rho_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component reversi_accel_theta_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component reversi_accel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        data_in => data_in,
        rho_out => rho_out,
        theta_out => theta_out,
        height => height,
        width => width,
        stride => stride,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    data_m_axi_U : component reversi_accel_data_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_data_AWVALID,
        AWREADY => m_axi_data_AWREADY,
        AWADDR => m_axi_data_AWADDR,
        AWID => m_axi_data_AWID,
        AWLEN => m_axi_data_AWLEN,
        AWSIZE => m_axi_data_AWSIZE,
        AWBURST => m_axi_data_AWBURST,
        AWLOCK => m_axi_data_AWLOCK,
        AWCACHE => m_axi_data_AWCACHE,
        AWPROT => m_axi_data_AWPROT,
        AWQOS => m_axi_data_AWQOS,
        AWREGION => m_axi_data_AWREGION,
        AWUSER => m_axi_data_AWUSER,
        WVALID => m_axi_data_WVALID,
        WREADY => m_axi_data_WREADY,
        WDATA => m_axi_data_WDATA,
        WSTRB => m_axi_data_WSTRB,
        WLAST => m_axi_data_WLAST,
        WID => m_axi_data_WID,
        WUSER => m_axi_data_WUSER,
        ARVALID => m_axi_data_ARVALID,
        ARREADY => m_axi_data_ARREADY,
        ARADDR => m_axi_data_ARADDR,
        ARID => m_axi_data_ARID,
        ARLEN => m_axi_data_ARLEN,
        ARSIZE => m_axi_data_ARSIZE,
        ARBURST => m_axi_data_ARBURST,
        ARLOCK => m_axi_data_ARLOCK,
        ARCACHE => m_axi_data_ARCACHE,
        ARPROT => m_axi_data_ARPROT,
        ARQOS => m_axi_data_ARQOS,
        ARREGION => m_axi_data_ARREGION,
        ARUSER => m_axi_data_ARUSER,
        RVALID => m_axi_data_RVALID,
        RREADY => m_axi_data_RREADY,
        RDATA => m_axi_data_RDATA,
        RLAST => m_axi_data_RLAST,
        RID => m_axi_data_RID,
        RUSER => m_axi_data_RUSER,
        RRESP => m_axi_data_RRESP,
        BVALID => m_axi_data_BVALID,
        BREADY => m_axi_data_BREADY,
        BRESP => m_axi_data_BRESP,
        BID => m_axi_data_BID,
        BUSER => m_axi_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARVALID,
        I_ARREADY => data_ARREADY,
        I_ARADDR => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARADDR,
        I_ARLEN => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARLEN,
        I_RVALID => data_RVALID,
        I_RREADY => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_RREADY,
        I_RDATA => data_RDATA,
        I_RFIFONUM => data_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => data_BVALID,
        I_BREADY => ap_const_logic_0);

    rho_m_axi_U : component reversi_accel_rho_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_RHO_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RHO_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RHO_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RHO_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RHO_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RHO_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RHO_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RHO_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RHO_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RHO_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RHO_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_rho_AWVALID,
        AWREADY => m_axi_rho_AWREADY,
        AWADDR => m_axi_rho_AWADDR,
        AWID => m_axi_rho_AWID,
        AWLEN => m_axi_rho_AWLEN,
        AWSIZE => m_axi_rho_AWSIZE,
        AWBURST => m_axi_rho_AWBURST,
        AWLOCK => m_axi_rho_AWLOCK,
        AWCACHE => m_axi_rho_AWCACHE,
        AWPROT => m_axi_rho_AWPROT,
        AWQOS => m_axi_rho_AWQOS,
        AWREGION => m_axi_rho_AWREGION,
        AWUSER => m_axi_rho_AWUSER,
        WVALID => m_axi_rho_WVALID,
        WREADY => m_axi_rho_WREADY,
        WDATA => m_axi_rho_WDATA,
        WSTRB => m_axi_rho_WSTRB,
        WLAST => m_axi_rho_WLAST,
        WID => m_axi_rho_WID,
        WUSER => m_axi_rho_WUSER,
        ARVALID => m_axi_rho_ARVALID,
        ARREADY => m_axi_rho_ARREADY,
        ARADDR => m_axi_rho_ARADDR,
        ARID => m_axi_rho_ARID,
        ARLEN => m_axi_rho_ARLEN,
        ARSIZE => m_axi_rho_ARSIZE,
        ARBURST => m_axi_rho_ARBURST,
        ARLOCK => m_axi_rho_ARLOCK,
        ARCACHE => m_axi_rho_ARCACHE,
        ARPROT => m_axi_rho_ARPROT,
        ARQOS => m_axi_rho_ARQOS,
        ARREGION => m_axi_rho_ARREGION,
        ARUSER => m_axi_rho_ARUSER,
        RVALID => m_axi_rho_RVALID,
        RREADY => m_axi_rho_RREADY,
        RDATA => m_axi_rho_RDATA,
        RLAST => m_axi_rho_RLAST,
        RID => m_axi_rho_RID,
        RUSER => m_axi_rho_RUSER,
        RRESP => m_axi_rho_RRESP,
        BVALID => m_axi_rho_BVALID,
        BREADY => m_axi_rho_BREADY,
        BRESP => m_axi_rho_BRESP,
        BID => m_axi_rho_BID,
        BUSER => m_axi_rho_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => rho_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => rho_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => rho_RDATA,
        I_RFIFONUM => rho_RFIFONUM,
        I_AWVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWVALID,
        I_AWREADY => rho_AWREADY,
        I_AWADDR => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWADDR,
        I_AWLEN => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWLEN,
        I_WVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WVALID,
        I_WREADY => rho_WREADY,
        I_WDATA => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WDATA,
        I_WSTRB => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WSTRB,
        I_BVALID => rho_BVALID,
        I_BREADY => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_BREADY);

    theta_m_axi_U : component reversi_accel_theta_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_THETA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_THETA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_THETA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_THETA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_THETA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_THETA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_THETA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_THETA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_THETA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_THETA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_THETA_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_theta_AWVALID,
        AWREADY => m_axi_theta_AWREADY,
        AWADDR => m_axi_theta_AWADDR,
        AWID => m_axi_theta_AWID,
        AWLEN => m_axi_theta_AWLEN,
        AWSIZE => m_axi_theta_AWSIZE,
        AWBURST => m_axi_theta_AWBURST,
        AWLOCK => m_axi_theta_AWLOCK,
        AWCACHE => m_axi_theta_AWCACHE,
        AWPROT => m_axi_theta_AWPROT,
        AWQOS => m_axi_theta_AWQOS,
        AWREGION => m_axi_theta_AWREGION,
        AWUSER => m_axi_theta_AWUSER,
        WVALID => m_axi_theta_WVALID,
        WREADY => m_axi_theta_WREADY,
        WDATA => m_axi_theta_WDATA,
        WSTRB => m_axi_theta_WSTRB,
        WLAST => m_axi_theta_WLAST,
        WID => m_axi_theta_WID,
        WUSER => m_axi_theta_WUSER,
        ARVALID => m_axi_theta_ARVALID,
        ARREADY => m_axi_theta_ARREADY,
        ARADDR => m_axi_theta_ARADDR,
        ARID => m_axi_theta_ARID,
        ARLEN => m_axi_theta_ARLEN,
        ARSIZE => m_axi_theta_ARSIZE,
        ARBURST => m_axi_theta_ARBURST,
        ARLOCK => m_axi_theta_ARLOCK,
        ARCACHE => m_axi_theta_ARCACHE,
        ARPROT => m_axi_theta_ARPROT,
        ARQOS => m_axi_theta_ARQOS,
        ARREGION => m_axi_theta_ARREGION,
        ARUSER => m_axi_theta_ARUSER,
        RVALID => m_axi_theta_RVALID,
        RREADY => m_axi_theta_RREADY,
        RDATA => m_axi_theta_RDATA,
        RLAST => m_axi_theta_RLAST,
        RID => m_axi_theta_RID,
        RUSER => m_axi_theta_RUSER,
        RRESP => m_axi_theta_RRESP,
        BVALID => m_axi_theta_BVALID,
        BREADY => m_axi_theta_BREADY,
        BRESP => m_axi_theta_BRESP,
        BID => m_axi_theta_BID,
        BUSER => m_axi_theta_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => theta_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => theta_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => theta_RDATA,
        I_RFIFONUM => theta_RFIFONUM,
        I_AWVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWVALID,
        I_AWREADY => theta_AWREADY,
        I_AWADDR => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWADDR,
        I_AWLEN => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWLEN,
        I_WVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WVALID,
        I_WREADY => theta_WREADY,
        I_WDATA => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WDATA,
        I_WSTRB => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WSTRB,
        I_BVALID => theta_BVALID,
        I_BREADY => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_BREADY);

    entry_proc19_U0 : component reversi_accel_entry_proc19
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc19_U0_ap_start,
        ap_done => entry_proc19_U0_ap_done,
        ap_continue => entry_proc19_U0_ap_continue,
        ap_idle => entry_proc19_U0_ap_idle,
        ap_ready => entry_proc19_U0_ap_ready,
        rho_out => rho_out,
        rho_out_c_din => entry_proc19_U0_rho_out_c_din,
        rho_out_c_num_data_valid => rho_out_c_num_data_valid,
        rho_out_c_fifo_cap => rho_out_c_fifo_cap,
        rho_out_c_full_n => rho_out_c_full_n,
        rho_out_c_write => entry_proc19_U0_rho_out_c_write,
        theta_out => theta_out,
        theta_out_c_din => entry_proc19_U0_theta_out_c_din,
        theta_out_c_num_data_valid => theta_out_c_num_data_valid,
        theta_out_c_fifo_cap => theta_out_c_fifo_cap,
        theta_out_c_full_n => theta_out_c_full_n,
        theta_out_c_write => entry_proc19_U0_theta_out_c_write);

    Block_entry4_proc_U0 : component reversi_accel_Block_entry4_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry4_proc_U0_ap_start,
        ap_done => Block_entry4_proc_U0_ap_done,
        ap_continue => Block_entry4_proc_U0_ap_continue,
        ap_idle => Block_entry4_proc_U0_ap_idle,
        ap_ready => Block_entry4_proc_U0_ap_ready,
        height => height,
        width => width,
        stride => stride,
        data_in => data_in,
        ap_return_0 => Block_entry4_proc_U0_ap_return_0,
        ap_return_1 => Block_entry4_proc_U0_ap_return_1,
        ap_return_2 => Block_entry4_proc_U0_ap_return_2,
        ap_return_3 => Block_entry4_proc_U0_ap_return_3,
        ap_return_4 => Block_entry4_proc_U0_ap_return_4,
        ap_return_5 => Block_entry4_proc_U0_ap_return_5,
        ap_return_6 => Block_entry4_proc_U0_ap_return_6,
        ap_return_7 => Block_entry4_proc_U0_ap_return_7,
        ap_return_8 => Block_entry4_proc_U0_ap_return_8,
        ap_return_9 => Block_entry4_proc_U0_ap_return_9,
        ap_return_10 => Block_entry4_proc_U0_ap_return_10,
        ap_return_11 => Block_entry4_proc_U0_ap_return_11,
        ap_return_12 => Block_entry4_proc_U0_ap_return_12,
        ap_return_13 => Block_entry4_proc_U0_ap_return_13,
        ap_return_14 => Block_entry4_proc_U0_ap_return_14,
        ap_return_15 => Block_entry4_proc_U0_ap_return_15,
        ap_return_16 => Block_entry4_proc_U0_ap_return_16,
        ap_return_17 => Block_entry4_proc_U0_ap_return_17,
        ap_return_18 => Block_entry4_proc_U0_ap_return_18,
        ap_return_19 => Block_entry4_proc_U0_ap_return_19,
        ap_return_20 => Block_entry4_proc_U0_ap_return_20,
        ap_return_21 => Block_entry4_proc_U0_ap_return_21,
        ap_return_22 => Block_entry4_proc_U0_ap_return_22,
        ap_return_23 => Block_entry4_proc_U0_ap_return_23,
        ap_return_24 => Block_entry4_proc_U0_ap_return_24,
        ap_return_25 => Block_entry4_proc_U0_ap_return_25,
        ap_return_26 => Block_entry4_proc_U0_ap_return_26,
        ap_return_27 => Block_entry4_proc_U0_ap_return_27,
        ap_return_28 => Block_entry4_proc_U0_ap_return_28);

    Array2xfMat_32_16_1024_1024_1_2_U0 : component reversi_accel_Array2xfMat_32_16_1024_1024_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Array2xfMat_32_16_1024_1024_1_2_U0_ap_start,
        start_full_n => start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_full_n,
        ap_done => Array2xfMat_32_16_1024_1024_1_2_U0_ap_done,
        ap_continue => Array2xfMat_32_16_1024_1024_1_2_U0_ap_continue,
        ap_idle => Array2xfMat_32_16_1024_1024_1_2_U0_ap_idle,
        ap_ready => Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready,
        start_out => Array2xfMat_32_16_1024_1024_1_2_U0_start_out,
        start_write => Array2xfMat_32_16_1024_1024_1_2_U0_start_write,
        m_axi_data_AWVALID => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWVALID,
        m_axi_data_AWREADY => ap_const_logic_0,
        m_axi_data_AWADDR => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWADDR,
        m_axi_data_AWID => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWID,
        m_axi_data_AWLEN => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWLEN,
        m_axi_data_AWSIZE => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWSIZE,
        m_axi_data_AWBURST => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWBURST,
        m_axi_data_AWLOCK => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWLOCK,
        m_axi_data_AWCACHE => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWCACHE,
        m_axi_data_AWPROT => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWPROT,
        m_axi_data_AWQOS => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWQOS,
        m_axi_data_AWREGION => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWREGION,
        m_axi_data_AWUSER => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_AWUSER,
        m_axi_data_WVALID => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WVALID,
        m_axi_data_WREADY => ap_const_logic_0,
        m_axi_data_WDATA => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WDATA,
        m_axi_data_WSTRB => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WSTRB,
        m_axi_data_WLAST => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WLAST,
        m_axi_data_WID => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WID,
        m_axi_data_WUSER => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_WUSER,
        m_axi_data_ARVALID => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARVALID,
        m_axi_data_ARREADY => data_ARREADY,
        m_axi_data_ARADDR => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARADDR,
        m_axi_data_ARID => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARID,
        m_axi_data_ARLEN => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARLEN,
        m_axi_data_ARSIZE => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARSIZE,
        m_axi_data_ARBURST => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARBURST,
        m_axi_data_ARLOCK => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARLOCK,
        m_axi_data_ARCACHE => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARCACHE,
        m_axi_data_ARPROT => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARPROT,
        m_axi_data_ARQOS => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARQOS,
        m_axi_data_ARREGION => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARREGION,
        m_axi_data_ARUSER => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_ARUSER,
        m_axi_data_RVALID => data_RVALID,
        m_axi_data_RREADY => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_RREADY,
        m_axi_data_RDATA => data_RDATA,
        m_axi_data_RLAST => data_RLAST,
        m_axi_data_RID => data_RID,
        m_axi_data_RFIFONUM => data_RFIFONUM,
        m_axi_data_RUSER => data_RUSER,
        m_axi_data_RRESP => data_RRESP,
        m_axi_data_BVALID => ap_const_logic_0,
        m_axi_data_BREADY => Array2xfMat_32_16_1024_1024_1_2_U0_m_axi_data_BREADY,
        m_axi_data_BRESP => ap_const_lv2_0,
        m_axi_data_BID => ap_const_lv1_0,
        m_axi_data_BUSER => ap_const_lv1_0,
        p_read => add_ln22_loc_channel_dout,
        p_read1 => mat_in_rows_c36_channel_dout,
        p_read2 => mat_in_cols_c37_channel_dout,
        mat_in_data_din => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_data_din,
        mat_in_data_num_data_valid => mat_in_data_num_data_valid,
        mat_in_data_fifo_cap => mat_in_data_fifo_cap,
        mat_in_data_full_n => mat_in_data_full_n,
        mat_in_data_write => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_data_write,
        stride => stride,
        mat_in_rows_c_din => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_rows_c_din,
        mat_in_rows_c_num_data_valid => mat_in_rows_c_num_data_valid,
        mat_in_rows_c_fifo_cap => mat_in_rows_c_fifo_cap,
        mat_in_rows_c_full_n => mat_in_rows_c_full_n,
        mat_in_rows_c_write => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_rows_c_write,
        mat_in_cols_c_din => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_cols_c_din,
        mat_in_cols_c_num_data_valid => mat_in_cols_c_num_data_valid,
        mat_in_cols_c_fifo_cap => mat_in_cols_c_fifo_cap,
        mat_in_cols_c_full_n => mat_in_cols_c_full_n,
        mat_in_cols_c_write => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_cols_c_write);

    GaussianBlur_3_0_16_1024_1024_1_2_2_U0 : component reversi_accel_GaussianBlur_3_0_16_1024_1024_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_start,
        ap_done => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_done,
        ap_continue => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_continue,
        ap_idle => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_idle,
        ap_ready => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_ready,
        p_src_rows_dout => mat_in_rows_c_dout,
        p_src_rows_num_data_valid => mat_in_rows_c_num_data_valid,
        p_src_rows_fifo_cap => mat_in_rows_c_fifo_cap,
        p_src_rows_empty_n => mat_in_rows_c_empty_n,
        p_src_rows_read => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_p_src_rows_read,
        p_src_cols_dout => mat_in_cols_c_dout,
        p_src_cols_num_data_valid => mat_in_cols_c_num_data_valid,
        p_src_cols_fifo_cap => mat_in_cols_c_fifo_cap,
        p_src_cols_empty_n => mat_in_cols_c_empty_n,
        p_src_cols_read => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_p_src_cols_read,
        mat_in_data323_dout => mat_in_data_dout,
        mat_in_data323_num_data_valid => mat_in_data_num_data_valid,
        mat_in_data323_fifo_cap => mat_in_data_fifo_cap,
        mat_in_data323_empty_n => mat_in_data_empty_n,
        mat_in_data323_read => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_in_data323_read,
        mat_blur_data324_din => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_blur_data324_din,
        mat_blur_data324_num_data_valid => mat_blur_data_num_data_valid,
        mat_blur_data324_fifo_cap => mat_blur_data_fifo_cap,
        mat_blur_data324_full_n => mat_blur_data_full_n,
        mat_blur_data324_write => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_blur_data324_write);

    bgr2hsv_16_1024_1024_1_2_2_U0 : component reversi_accel_bgr2hsv_16_1024_1024_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bgr2hsv_16_1024_1024_1_2_2_U0_ap_start,
        ap_done => bgr2hsv_16_1024_1024_1_2_2_U0_ap_done,
        ap_continue => bgr2hsv_16_1024_1024_1_2_2_U0_ap_continue,
        ap_idle => bgr2hsv_16_1024_1024_1_2_2_U0_ap_idle,
        ap_ready => bgr2hsv_16_1024_1024_1_2_2_U0_ap_ready,
        p_read => mat_blur_rows_channel_dout,
        p_read1 => mat_blur_cols_channel_dout,
        mat_blur_data324_dout => mat_blur_data_dout,
        mat_blur_data324_num_data_valid => mat_blur_data_num_data_valid,
        mat_blur_data324_fifo_cap => mat_blur_data_fifo_cap,
        mat_blur_data324_empty_n => mat_blur_data_empty_n,
        mat_blur_data324_read => bgr2hsv_16_1024_1024_1_2_2_U0_mat_blur_data324_read,
        mat_hsv_data325_din => bgr2hsv_16_1024_1024_1_2_2_U0_mat_hsv_data325_din,
        mat_hsv_data325_num_data_valid => mat_hsv_data_num_data_valid,
        mat_hsv_data325_fifo_cap => mat_hsv_data_fifo_cap,
        mat_hsv_data325_full_n => mat_hsv_data_full_n,
        mat_hsv_data325_write => bgr2hsv_16_1024_1024_1_2_2_U0_mat_hsv_data325_write);

    duplicateMat_16_1024_1024_1_2_2_2_U0 : component reversi_accel_duplicateMat_16_1024_1024_1_2_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => duplicateMat_16_1024_1024_1_2_2_2_U0_ap_start,
        ap_done => duplicateMat_16_1024_1024_1_2_2_2_U0_ap_done,
        ap_continue => duplicateMat_16_1024_1024_1_2_2_2_U0_ap_continue,
        ap_idle => duplicateMat_16_1024_1024_1_2_2_2_U0_ap_idle,
        ap_ready => duplicateMat_16_1024_1024_1_2_2_2_U0_ap_ready,
        p_read => mat_hsv_rows_channel_dout,
        p_read1 => mat_hsv_cols_channel_dout,
        mat_hsv_data325_dout => mat_hsv_data_dout,
        mat_hsv_data325_num_data_valid => mat_hsv_data_num_data_valid,
        mat_hsv_data325_fifo_cap => mat_hsv_data_fifo_cap,
        mat_hsv_data325_empty_n => mat_hsv_data_empty_n,
        mat_hsv_data325_read => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv_data325_read,
        mat_hsv1_data326_din => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv1_data326_din,
        mat_hsv1_data326_num_data_valid => mat_hsv1_data_num_data_valid,
        mat_hsv1_data326_fifo_cap => mat_hsv1_data_fifo_cap,
        mat_hsv1_data326_full_n => mat_hsv1_data_full_n,
        mat_hsv1_data326_write => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv1_data326_write,
        mat_hsv2_data327_din => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv2_data327_din,
        mat_hsv2_data327_num_data_valid => mat_hsv2_data_num_data_valid,
        mat_hsv2_data327_fifo_cap => mat_hsv2_data_fifo_cap,
        mat_hsv2_data327_full_n => mat_hsv2_data_full_n,
        mat_hsv2_data327_write => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv2_data327_write);

    inRange_16_0_1024_1024_1_2_2_U0 : component reversi_accel_inRange_16_0_1024_1024_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inRange_16_0_1024_1024_1_2_2_U0_ap_start,
        ap_done => inRange_16_0_1024_1024_1_2_2_U0_ap_done,
        ap_continue => inRange_16_0_1024_1024_1_2_2_U0_ap_continue,
        ap_idle => inRange_16_0_1024_1024_1_2_2_U0_ap_idle,
        ap_ready => inRange_16_0_1024_1024_1_2_2_U0_ap_ready,
        p_read => mat_hsv1_rows_channel_dout,
        p_read1 => mat_hsv1_cols_channel_dout,
        mat_hsv1_data326_dout => mat_hsv1_data_dout,
        mat_hsv1_data326_num_data_valid => mat_hsv1_data_num_data_valid,
        mat_hsv1_data326_fifo_cap => mat_hsv1_data_fifo_cap,
        mat_hsv1_data326_empty_n => mat_hsv1_data_empty_n,
        mat_hsv1_data326_read => inRange_16_0_1024_1024_1_2_2_U0_mat_hsv1_data326_read,
        mat_green1_data328_din => inRange_16_0_1024_1024_1_2_2_U0_mat_green1_data328_din,
        mat_green1_data328_num_data_valid => mat_green1_data_num_data_valid,
        mat_green1_data328_fifo_cap => mat_green1_data_fifo_cap,
        mat_green1_data328_full_n => mat_green1_data_full_n,
        mat_green1_data328_write => inRange_16_0_1024_1024_1_2_2_U0_mat_green1_data328_write);

    inRange_16_0_1024_1024_1_2_2_1_U0 : component reversi_accel_inRange_16_0_1024_1024_1_2_2_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inRange_16_0_1024_1024_1_2_2_1_U0_ap_start,
        ap_done => inRange_16_0_1024_1024_1_2_2_1_U0_ap_done,
        ap_continue => inRange_16_0_1024_1024_1_2_2_1_U0_ap_continue,
        ap_idle => inRange_16_0_1024_1024_1_2_2_1_U0_ap_idle,
        ap_ready => inRange_16_0_1024_1024_1_2_2_1_U0_ap_ready,
        p_read => mat_hsv2_rows_channel_dout,
        p_read1 => mat_hsv2_cols_channel_dout,
        mat_hsv2_data327_dout => mat_hsv2_data_dout,
        mat_hsv2_data327_num_data_valid => mat_hsv2_data_num_data_valid,
        mat_hsv2_data327_fifo_cap => mat_hsv2_data_fifo_cap,
        mat_hsv2_data327_empty_n => mat_hsv2_data_empty_n,
        mat_hsv2_data327_read => inRange_16_0_1024_1024_1_2_2_1_U0_mat_hsv2_data327_read,
        mat_green2_data329_din => inRange_16_0_1024_1024_1_2_2_1_U0_mat_green2_data329_din,
        mat_green2_data329_num_data_valid => mat_green2_data_num_data_valid,
        mat_green2_data329_fifo_cap => mat_green2_data_fifo_cap,
        mat_green2_data329_full_n => mat_green2_data_full_n,
        mat_green2_data329_write => inRange_16_0_1024_1024_1_2_2_1_U0_mat_green2_data329_write);

    bitwise_or_0_1024_1024_1_2_2_2_U0 : component reversi_accel_bitwise_or_0_1024_1024_1_2_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bitwise_or_0_1024_1024_1_2_2_2_U0_ap_start,
        ap_done => bitwise_or_0_1024_1024_1_2_2_2_U0_ap_done,
        ap_continue => bitwise_or_0_1024_1024_1_2_2_2_U0_ap_continue,
        ap_idle => bitwise_or_0_1024_1024_1_2_2_2_U0_ap_idle,
        ap_ready => bitwise_or_0_1024_1024_1_2_2_2_U0_ap_ready,
        p_read => mat_green1_rows_channel_dout,
        p_read1 => mat_green1_cols_channel_dout,
        mat_green1_data328_dout => mat_green1_data_dout,
        mat_green1_data328_num_data_valid => mat_green1_data_num_data_valid,
        mat_green1_data328_fifo_cap => mat_green1_data_fifo_cap,
        mat_green1_data328_empty_n => mat_green1_data_empty_n,
        mat_green1_data328_read => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green1_data328_read,
        mat_green2_data329_dout => mat_green2_data_dout,
        mat_green2_data329_num_data_valid => mat_green2_data_num_data_valid,
        mat_green2_data329_fifo_cap => mat_green2_data_fifo_cap,
        mat_green2_data329_empty_n => mat_green2_data_empty_n,
        mat_green2_data329_read => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green2_data329_read,
        mat_green_data330_din => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green_data330_din,
        mat_green_data330_num_data_valid => mat_green_data_num_data_valid,
        mat_green_data330_fifo_cap => mat_green_data_fifo_cap,
        mat_green_data330_full_n => mat_green_data_full_n,
        mat_green_data330_write => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green_data330_write);

    dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0 : component reversi_accel_dilate_0_0_1024_1024_0_7_7_1_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_start,
        ap_done => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_done,
        ap_continue => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_continue,
        ap_idle => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_idle,
        ap_ready => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready,
        p_read => mat_green_rows_channel_dout,
        p_read1 => mat_green_cols_channel_dout,
        mat_green_data330_dout => mat_green_data_dout,
        mat_green_data330_num_data_valid => mat_green_data_num_data_valid,
        mat_green_data330_fifo_cap => mat_green_data_fifo_cap,
        mat_green_data330_empty_n => mat_green_data_empty_n,
        mat_green_data330_read => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_green_data330_read,
        mat_dil_a_data331_din => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_din,
        mat_dil_a_data331_num_data_valid => mat_dil_a_data_num_data_valid,
        mat_dil_a_data331_fifo_cap => mat_dil_a_data_fifo_cap,
        mat_dil_a_data331_full_n => mat_dil_a_data_full_n,
        mat_dil_a_data331_write => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_write);

    erode_0_0_1024_1024_0_7_7_1_1_2_2_U0 : component reversi_accel_erode_0_0_1024_1024_0_7_7_1_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_start,
        ap_done => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_done,
        ap_continue => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_continue,
        ap_idle => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_idle,
        ap_ready => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready,
        p_read => mat_dil_a_rows_channel_dout,
        p_read1 => mat_dil_a_cols_channel_dout,
        mat_dil_a_data331_dout => mat_dil_a_data_dout,
        mat_dil_a_data331_num_data_valid => mat_dil_a_data_num_data_valid,
        mat_dil_a_data331_fifo_cap => mat_dil_a_data_fifo_cap,
        mat_dil_a_data331_empty_n => mat_dil_a_data_empty_n,
        mat_dil_a_data331_read => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_read,
        mat_ero_data332_din => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_ero_data332_din,
        mat_ero_data332_num_data_valid => mat_ero_data_num_data_valid,
        mat_ero_data332_fifo_cap => mat_ero_data_fifo_cap,
        mat_ero_data332_full_n => mat_ero_data_full_n,
        mat_ero_data332_write => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_ero_data332_write);

    duplicateMat_0_1024_1024_1_2_2_2_U0 : component reversi_accel_duplicateMat_0_1024_1024_1_2_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => duplicateMat_0_1024_1024_1_2_2_2_U0_ap_start,
        ap_done => duplicateMat_0_1024_1024_1_2_2_2_U0_ap_done,
        ap_continue => duplicateMat_0_1024_1024_1_2_2_2_U0_ap_continue,
        ap_idle => duplicateMat_0_1024_1024_1_2_2_2_U0_ap_idle,
        ap_ready => duplicateMat_0_1024_1024_1_2_2_2_U0_ap_ready,
        p_read => mat_ero_rows_channel_dout,
        p_read1 => mat_ero_cols_channel_dout,
        mat_ero_data332_dout => mat_ero_data_dout,
        mat_ero_data332_num_data_valid => mat_ero_data_num_data_valid,
        mat_ero_data332_fifo_cap => mat_ero_data_fifo_cap,
        mat_ero_data332_empty_n => mat_ero_data_empty_n,
        mat_ero_data332_read => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero_data332_read,
        mat_ero1_data333_din => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero1_data333_din,
        mat_ero1_data333_num_data_valid => mat_ero1_data_num_data_valid,
        mat_ero1_data333_fifo_cap => mat_ero1_data_fifo_cap,
        mat_ero1_data333_full_n => mat_ero1_data_full_n,
        mat_ero1_data333_write => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero1_data333_write,
        mat_ero2_data334_din => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero2_data334_din,
        mat_ero2_data334_num_data_valid => mat_ero2_data_num_data_valid,
        mat_ero2_data334_fifo_cap => mat_ero2_data_fifo_cap,
        mat_ero2_data334_full_n => mat_ero2_data_full_n,
        mat_ero2_data334_write => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero2_data334_write);

    dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0 : component reversi_accel_dilate_0_0_1024_1024_2_3_3_1_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_start,
        ap_done => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_done,
        ap_continue => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_continue,
        ap_idle => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_idle,
        ap_ready => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready,
        p_read => mat_ero1_rows_channel_dout,
        p_read1 => mat_ero1_cols_channel_dout,
        mat_ero1_data333_dout => mat_ero1_data_dout,
        mat_ero1_data333_num_data_valid => mat_ero1_data_num_data_valid,
        mat_ero1_data333_fifo_cap => mat_ero1_data_fifo_cap,
        mat_ero1_data333_empty_n => mat_ero1_data_empty_n,
        mat_ero1_data333_read => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_ero1_data333_read,
        mat_lap1_data335_din => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap1_data335_din,
        mat_lap1_data335_num_data_valid => mat_lap1_data_num_data_valid,
        mat_lap1_data335_fifo_cap => mat_lap1_data_fifo_cap,
        mat_lap1_data335_full_n => mat_lap1_data_full_n,
        mat_lap1_data335_write => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap1_data335_write);

    erode_0_0_1024_1024_2_3_3_1_1_2_2_U0 : component reversi_accel_erode_0_0_1024_1024_2_3_3_1_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_start,
        ap_done => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_done,
        ap_continue => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_continue,
        ap_idle => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_idle,
        ap_ready => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready,
        p_read => mat_ero2_rows_channel_dout,
        p_read1 => mat_ero2_cols_channel_dout,
        mat_ero2_data334_dout => mat_ero2_data_dout,
        mat_ero2_data334_num_data_valid => mat_ero2_data_num_data_valid,
        mat_ero2_data334_fifo_cap => mat_ero2_data_fifo_cap,
        mat_ero2_data334_empty_n => mat_ero2_data_empty_n,
        mat_ero2_data334_read => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_ero2_data334_read,
        mat_lap2_data336_din => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap2_data336_din,
        mat_lap2_data336_num_data_valid => mat_lap2_data_num_data_valid,
        mat_lap2_data336_fifo_cap => mat_lap2_data_fifo_cap,
        mat_lap2_data336_full_n => mat_lap2_data_full_n,
        mat_lap2_data336_write => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap2_data336_write);

    bitwise_xor_0_1024_1024_1_2_2_2_U0 : component reversi_accel_bitwise_xor_0_1024_1024_1_2_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_start,
        ap_done => bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_done,
        ap_continue => bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_continue,
        ap_idle => bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_idle,
        ap_ready => bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_ready,
        p_read => mat_lap1_rows_channel_dout,
        p_read1 => mat_lap1_cols_channel_dout,
        mat_lap1_data335_dout => mat_lap1_data_dout,
        mat_lap1_data335_num_data_valid => mat_lap1_data_num_data_valid,
        mat_lap1_data335_fifo_cap => mat_lap1_data_fifo_cap,
        mat_lap1_data335_empty_n => mat_lap1_data_empty_n,
        mat_lap1_data335_read => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap1_data335_read,
        mat_lap2_data336_dout => mat_lap2_data_dout,
        mat_lap2_data336_num_data_valid => mat_lap2_data_num_data_valid,
        mat_lap2_data336_fifo_cap => mat_lap2_data_fifo_cap,
        mat_lap2_data336_empty_n => mat_lap2_data_empty_n,
        mat_lap2_data336_read => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap2_data336_read,
        mat_lap_data337_din => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap_data337_din,
        mat_lap_data337_num_data_valid => mat_lap_data_num_data_valid,
        mat_lap_data337_fifo_cap => mat_lap_data_fifo_cap,
        mat_lap_data337_full_n => mat_lap_data_full_n,
        mat_lap_data337_write => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap_data337_write);

    dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0 : component reversi_accel_dilate_0_0_1024_1024_0_3_3_1_1_2_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_start,
        ap_done => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_done,
        ap_continue => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_continue,
        ap_idle => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_idle,
        ap_ready => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_ready,
        p_read => mat_lap_rows_channel_dout,
        p_read1 => mat_lap_cols_channel_dout,
        mat_lap_data337_dout => mat_lap_data_dout,
        mat_lap_data337_num_data_valid => mat_lap_data_num_data_valid,
        mat_lap_data337_fifo_cap => mat_lap_data_fifo_cap,
        mat_lap_data337_empty_n => mat_lap_data_empty_n,
        mat_lap_data337_read => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_lap_data337_read,
        mat_dil_b_data338_din => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_dil_b_data338_din,
        mat_dil_b_data338_num_data_valid => mat_dil_b_data_num_data_valid,
        mat_dil_b_data338_fifo_cap => mat_dil_b_data_fifo_cap,
        mat_dil_b_data338_full_n => mat_dil_b_data_full_n,
        mat_dil_b_data338_write => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_dil_b_data338_write);

    HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0 : component reversi_accel_HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_start,
        ap_done => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_done,
        ap_continue => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_continue,
        ap_idle => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_idle,
        ap_ready => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_ready,
        p_read => mat_dil_b_rows_channel_dout,
        p_read1 => mat_dil_b_cols_channel_dout,
        mat_dil_b_data338_dout => mat_dil_b_data_dout,
        mat_dil_b_data338_num_data_valid => mat_dil_b_data_num_data_valid,
        mat_dil_b_data338_fifo_cap => mat_dil_b_data_fifo_cap,
        mat_dil_b_data338_empty_n => mat_dil_b_data_empty_n,
        mat_dil_b_data338_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_mat_dil_b_data338_read,
        m_axi_rho_AWVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWVALID,
        m_axi_rho_AWREADY => rho_AWREADY,
        m_axi_rho_AWADDR => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWADDR,
        m_axi_rho_AWID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWID,
        m_axi_rho_AWLEN => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWLEN,
        m_axi_rho_AWSIZE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWSIZE,
        m_axi_rho_AWBURST => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWBURST,
        m_axi_rho_AWLOCK => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWLOCK,
        m_axi_rho_AWCACHE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWCACHE,
        m_axi_rho_AWPROT => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWPROT,
        m_axi_rho_AWQOS => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWQOS,
        m_axi_rho_AWREGION => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWREGION,
        m_axi_rho_AWUSER => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_AWUSER,
        m_axi_rho_WVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WVALID,
        m_axi_rho_WREADY => rho_WREADY,
        m_axi_rho_WDATA => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WDATA,
        m_axi_rho_WSTRB => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WSTRB,
        m_axi_rho_WLAST => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WLAST,
        m_axi_rho_WID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WID,
        m_axi_rho_WUSER => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_WUSER,
        m_axi_rho_ARVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARVALID,
        m_axi_rho_ARREADY => ap_const_logic_0,
        m_axi_rho_ARADDR => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARADDR,
        m_axi_rho_ARID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARID,
        m_axi_rho_ARLEN => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARLEN,
        m_axi_rho_ARSIZE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARSIZE,
        m_axi_rho_ARBURST => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARBURST,
        m_axi_rho_ARLOCK => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARLOCK,
        m_axi_rho_ARCACHE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARCACHE,
        m_axi_rho_ARPROT => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARPROT,
        m_axi_rho_ARQOS => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARQOS,
        m_axi_rho_ARREGION => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARREGION,
        m_axi_rho_ARUSER => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_ARUSER,
        m_axi_rho_RVALID => ap_const_logic_0,
        m_axi_rho_RREADY => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_RREADY,
        m_axi_rho_RDATA => ap_const_lv32_0,
        m_axi_rho_RLAST => ap_const_logic_0,
        m_axi_rho_RID => ap_const_lv1_0,
        m_axi_rho_RFIFONUM => ap_const_lv9_0,
        m_axi_rho_RUSER => ap_const_lv1_0,
        m_axi_rho_RRESP => ap_const_lv2_0,
        m_axi_rho_BVALID => rho_BVALID,
        m_axi_rho_BREADY => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_rho_BREADY,
        m_axi_rho_BRESP => rho_BRESP,
        m_axi_rho_BID => rho_BID,
        m_axi_rho_BUSER => rho_BUSER,
        outputrho_dout => rho_out_c_dout,
        outputrho_num_data_valid => rho_out_c_num_data_valid,
        outputrho_fifo_cap => rho_out_c_fifo_cap,
        outputrho_empty_n => rho_out_c_empty_n,
        outputrho_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_outputrho_read,
        m_axi_theta_AWVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWVALID,
        m_axi_theta_AWREADY => theta_AWREADY,
        m_axi_theta_AWADDR => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWADDR,
        m_axi_theta_AWID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWID,
        m_axi_theta_AWLEN => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWLEN,
        m_axi_theta_AWSIZE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWSIZE,
        m_axi_theta_AWBURST => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWBURST,
        m_axi_theta_AWLOCK => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWLOCK,
        m_axi_theta_AWCACHE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWCACHE,
        m_axi_theta_AWPROT => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWPROT,
        m_axi_theta_AWQOS => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWQOS,
        m_axi_theta_AWREGION => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWREGION,
        m_axi_theta_AWUSER => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_AWUSER,
        m_axi_theta_WVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WVALID,
        m_axi_theta_WREADY => theta_WREADY,
        m_axi_theta_WDATA => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WDATA,
        m_axi_theta_WSTRB => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WSTRB,
        m_axi_theta_WLAST => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WLAST,
        m_axi_theta_WID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WID,
        m_axi_theta_WUSER => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_WUSER,
        m_axi_theta_ARVALID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARVALID,
        m_axi_theta_ARREADY => ap_const_logic_0,
        m_axi_theta_ARADDR => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARADDR,
        m_axi_theta_ARID => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARID,
        m_axi_theta_ARLEN => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARLEN,
        m_axi_theta_ARSIZE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARSIZE,
        m_axi_theta_ARBURST => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARBURST,
        m_axi_theta_ARLOCK => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARLOCK,
        m_axi_theta_ARCACHE => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARCACHE,
        m_axi_theta_ARPROT => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARPROT,
        m_axi_theta_ARQOS => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARQOS,
        m_axi_theta_ARREGION => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARREGION,
        m_axi_theta_ARUSER => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_ARUSER,
        m_axi_theta_RVALID => ap_const_logic_0,
        m_axi_theta_RREADY => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_RREADY,
        m_axi_theta_RDATA => ap_const_lv32_0,
        m_axi_theta_RLAST => ap_const_logic_0,
        m_axi_theta_RID => ap_const_lv1_0,
        m_axi_theta_RFIFONUM => ap_const_lv9_0,
        m_axi_theta_RUSER => ap_const_lv1_0,
        m_axi_theta_RRESP => ap_const_lv2_0,
        m_axi_theta_BVALID => theta_BVALID,
        m_axi_theta_BREADY => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_m_axi_theta_BREADY,
        m_axi_theta_BRESP => theta_BRESP,
        m_axi_theta_BID => theta_BID,
        m_axi_theta_BUSER => theta_BUSER,
        outputtheta_dout => theta_out_c_dout,
        outputtheta_num_data_valid => theta_out_c_num_data_valid,
        outputtheta_fifo_cap => theta_out_c_fifo_cap,
        outputtheta_empty_n => theta_out_c_empty_n,
        outputtheta_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_outputtheta_read);

    rho_out_c_U : component reversi_accel_fifo_w64_d15_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc19_U0_rho_out_c_din,
        if_full_n => rho_out_c_full_n,
        if_write => entry_proc19_U0_rho_out_c_write,
        if_dout => rho_out_c_dout,
        if_num_data_valid => rho_out_c_num_data_valid,
        if_fifo_cap => rho_out_c_fifo_cap,
        if_empty_n => rho_out_c_empty_n,
        if_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_outputrho_read);

    theta_out_c_U : component reversi_accel_fifo_w64_d15_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc19_U0_theta_out_c_din,
        if_full_n => theta_out_c_full_n,
        if_write => entry_proc19_U0_theta_out_c_write,
        if_dout => theta_out_c_dout,
        if_num_data_valid => theta_out_c_num_data_valid,
        if_fifo_cap => theta_out_c_fifo_cap,
        if_empty_n => theta_out_c_empty_n,
        if_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_outputtheta_read);

    mat_blur_rows_channel_U : component reversi_accel_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_0,
        if_full_n => mat_blur_rows_channel_full_n,
        if_write => ap_channel_done_mat_blur_rows_channel,
        if_dout => mat_blur_rows_channel_dout,
        if_num_data_valid => mat_blur_rows_channel_num_data_valid,
        if_fifo_cap => mat_blur_rows_channel_fifo_cap,
        if_empty_n => mat_blur_rows_channel_empty_n,
        if_read => bgr2hsv_16_1024_1024_1_2_2_U0_ap_ready);

    mat_blur_cols_channel_U : component reversi_accel_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_1,
        if_full_n => mat_blur_cols_channel_full_n,
        if_write => ap_channel_done_mat_blur_cols_channel,
        if_dout => mat_blur_cols_channel_dout,
        if_num_data_valid => mat_blur_cols_channel_num_data_valid,
        if_fifo_cap => mat_blur_cols_channel_fifo_cap,
        if_empty_n => mat_blur_cols_channel_empty_n,
        if_read => bgr2hsv_16_1024_1024_1_2_2_U0_ap_ready);

    mat_hsv_rows_channel_U : component reversi_accel_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_2,
        if_full_n => mat_hsv_rows_channel_full_n,
        if_write => ap_channel_done_mat_hsv_rows_channel,
        if_dout => mat_hsv_rows_channel_dout,
        if_num_data_valid => mat_hsv_rows_channel_num_data_valid,
        if_fifo_cap => mat_hsv_rows_channel_fifo_cap,
        if_empty_n => mat_hsv_rows_channel_empty_n,
        if_read => duplicateMat_16_1024_1024_1_2_2_2_U0_ap_ready);

    mat_hsv_cols_channel_U : component reversi_accel_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_3,
        if_full_n => mat_hsv_cols_channel_full_n,
        if_write => ap_channel_done_mat_hsv_cols_channel,
        if_dout => mat_hsv_cols_channel_dout,
        if_num_data_valid => mat_hsv_cols_channel_num_data_valid,
        if_fifo_cap => mat_hsv_cols_channel_fifo_cap,
        if_empty_n => mat_hsv_cols_channel_empty_n,
        if_read => duplicateMat_16_1024_1024_1_2_2_2_U0_ap_ready);

    mat_hsv1_rows_channel_U : component reversi_accel_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_4,
        if_full_n => mat_hsv1_rows_channel_full_n,
        if_write => ap_channel_done_mat_hsv1_rows_channel,
        if_dout => mat_hsv1_rows_channel_dout,
        if_num_data_valid => mat_hsv1_rows_channel_num_data_valid,
        if_fifo_cap => mat_hsv1_rows_channel_fifo_cap,
        if_empty_n => mat_hsv1_rows_channel_empty_n,
        if_read => inRange_16_0_1024_1024_1_2_2_U0_ap_ready);

    mat_hsv1_cols_channel_U : component reversi_accel_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_5,
        if_full_n => mat_hsv1_cols_channel_full_n,
        if_write => ap_channel_done_mat_hsv1_cols_channel,
        if_dout => mat_hsv1_cols_channel_dout,
        if_num_data_valid => mat_hsv1_cols_channel_num_data_valid,
        if_fifo_cap => mat_hsv1_cols_channel_fifo_cap,
        if_empty_n => mat_hsv1_cols_channel_empty_n,
        if_read => inRange_16_0_1024_1024_1_2_2_U0_ap_ready);

    mat_hsv2_rows_channel_U : component reversi_accel_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_6,
        if_full_n => mat_hsv2_rows_channel_full_n,
        if_write => ap_channel_done_mat_hsv2_rows_channel,
        if_dout => mat_hsv2_rows_channel_dout,
        if_num_data_valid => mat_hsv2_rows_channel_num_data_valid,
        if_fifo_cap => mat_hsv2_rows_channel_fifo_cap,
        if_empty_n => mat_hsv2_rows_channel_empty_n,
        if_read => inRange_16_0_1024_1024_1_2_2_1_U0_ap_ready);

    mat_hsv2_cols_channel_U : component reversi_accel_fifo_w32_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_7,
        if_full_n => mat_hsv2_cols_channel_full_n,
        if_write => ap_channel_done_mat_hsv2_cols_channel,
        if_dout => mat_hsv2_cols_channel_dout,
        if_num_data_valid => mat_hsv2_cols_channel_num_data_valid,
        if_fifo_cap => mat_hsv2_cols_channel_fifo_cap,
        if_empty_n => mat_hsv2_cols_channel_empty_n,
        if_read => inRange_16_0_1024_1024_1_2_2_1_U0_ap_ready);

    mat_green1_rows_channel_U : component reversi_accel_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_8,
        if_full_n => mat_green1_rows_channel_full_n,
        if_write => ap_channel_done_mat_green1_rows_channel,
        if_dout => mat_green1_rows_channel_dout,
        if_num_data_valid => mat_green1_rows_channel_num_data_valid,
        if_fifo_cap => mat_green1_rows_channel_fifo_cap,
        if_empty_n => mat_green1_rows_channel_empty_n,
        if_read => bitwise_or_0_1024_1024_1_2_2_2_U0_ap_ready);

    mat_green1_cols_channel_U : component reversi_accel_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_9,
        if_full_n => mat_green1_cols_channel_full_n,
        if_write => ap_channel_done_mat_green1_cols_channel,
        if_dout => mat_green1_cols_channel_dout,
        if_num_data_valid => mat_green1_cols_channel_num_data_valid,
        if_fifo_cap => mat_green1_cols_channel_fifo_cap,
        if_empty_n => mat_green1_cols_channel_empty_n,
        if_read => bitwise_or_0_1024_1024_1_2_2_2_U0_ap_ready);

    mat_green_rows_channel_U : component reversi_accel_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_10,
        if_full_n => mat_green_rows_channel_full_n,
        if_write => ap_channel_done_mat_green_rows_channel,
        if_dout => mat_green_rows_channel_dout,
        if_num_data_valid => mat_green_rows_channel_num_data_valid,
        if_fifo_cap => mat_green_rows_channel_fifo_cap,
        if_empty_n => mat_green_rows_channel_empty_n,
        if_read => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready);

    mat_green_cols_channel_U : component reversi_accel_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_11,
        if_full_n => mat_green_cols_channel_full_n,
        if_write => ap_channel_done_mat_green_cols_channel,
        if_dout => mat_green_cols_channel_dout,
        if_num_data_valid => mat_green_cols_channel_num_data_valid,
        if_fifo_cap => mat_green_cols_channel_fifo_cap,
        if_empty_n => mat_green_cols_channel_empty_n,
        if_read => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready);

    mat_dil_a_rows_channel_U : component reversi_accel_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_12,
        if_full_n => mat_dil_a_rows_channel_full_n,
        if_write => ap_channel_done_mat_dil_a_rows_channel,
        if_dout => mat_dil_a_rows_channel_dout,
        if_num_data_valid => mat_dil_a_rows_channel_num_data_valid,
        if_fifo_cap => mat_dil_a_rows_channel_fifo_cap,
        if_empty_n => mat_dil_a_rows_channel_empty_n,
        if_read => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready);

    mat_dil_a_cols_channel_U : component reversi_accel_fifo_w32_d9_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_13,
        if_full_n => mat_dil_a_cols_channel_full_n,
        if_write => ap_channel_done_mat_dil_a_cols_channel,
        if_dout => mat_dil_a_cols_channel_dout,
        if_num_data_valid => mat_dil_a_cols_channel_num_data_valid,
        if_fifo_cap => mat_dil_a_cols_channel_fifo_cap,
        if_empty_n => mat_dil_a_cols_channel_empty_n,
        if_read => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_ready);

    mat_ero_rows_channel_U : component reversi_accel_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_14,
        if_full_n => mat_ero_rows_channel_full_n,
        if_write => ap_channel_done_mat_ero_rows_channel,
        if_dout => mat_ero_rows_channel_dout,
        if_num_data_valid => mat_ero_rows_channel_num_data_valid,
        if_fifo_cap => mat_ero_rows_channel_fifo_cap,
        if_empty_n => mat_ero_rows_channel_empty_n,
        if_read => duplicateMat_0_1024_1024_1_2_2_2_U0_ap_ready);

    mat_ero_cols_channel_U : component reversi_accel_fifo_w32_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_15,
        if_full_n => mat_ero_cols_channel_full_n,
        if_write => ap_channel_done_mat_ero_cols_channel,
        if_dout => mat_ero_cols_channel_dout,
        if_num_data_valid => mat_ero_cols_channel_num_data_valid,
        if_fifo_cap => mat_ero_cols_channel_fifo_cap,
        if_empty_n => mat_ero_cols_channel_empty_n,
        if_read => duplicateMat_0_1024_1024_1_2_2_2_U0_ap_ready);

    mat_ero1_rows_channel_U : component reversi_accel_fifo_w32_d11_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_16,
        if_full_n => mat_ero1_rows_channel_full_n,
        if_write => ap_channel_done_mat_ero1_rows_channel,
        if_dout => mat_ero1_rows_channel_dout,
        if_num_data_valid => mat_ero1_rows_channel_num_data_valid,
        if_fifo_cap => mat_ero1_rows_channel_fifo_cap,
        if_empty_n => mat_ero1_rows_channel_empty_n,
        if_read => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready);

    mat_ero1_cols_channel_U : component reversi_accel_fifo_w32_d11_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_17,
        if_full_n => mat_ero1_cols_channel_full_n,
        if_write => ap_channel_done_mat_ero1_cols_channel,
        if_dout => mat_ero1_cols_channel_dout,
        if_num_data_valid => mat_ero1_cols_channel_num_data_valid,
        if_fifo_cap => mat_ero1_cols_channel_fifo_cap,
        if_empty_n => mat_ero1_cols_channel_empty_n,
        if_read => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready);

    mat_ero2_rows_channel_U : component reversi_accel_fifo_w32_d11_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_18,
        if_full_n => mat_ero2_rows_channel_full_n,
        if_write => ap_channel_done_mat_ero2_rows_channel,
        if_dout => mat_ero2_rows_channel_dout,
        if_num_data_valid => mat_ero2_rows_channel_num_data_valid,
        if_fifo_cap => mat_ero2_rows_channel_fifo_cap,
        if_empty_n => mat_ero2_rows_channel_empty_n,
        if_read => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready);

    mat_ero2_cols_channel_U : component reversi_accel_fifo_w32_d11_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_19,
        if_full_n => mat_ero2_cols_channel_full_n,
        if_write => ap_channel_done_mat_ero2_cols_channel,
        if_dout => mat_ero2_cols_channel_dout,
        if_num_data_valid => mat_ero2_cols_channel_num_data_valid,
        if_fifo_cap => mat_ero2_cols_channel_fifo_cap,
        if_empty_n => mat_ero2_cols_channel_empty_n,
        if_read => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_ready);

    mat_lap1_rows_channel_U : component reversi_accel_fifo_w32_d12_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_20,
        if_full_n => mat_lap1_rows_channel_full_n,
        if_write => ap_channel_done_mat_lap1_rows_channel,
        if_dout => mat_lap1_rows_channel_dout,
        if_num_data_valid => mat_lap1_rows_channel_num_data_valid,
        if_fifo_cap => mat_lap1_rows_channel_fifo_cap,
        if_empty_n => mat_lap1_rows_channel_empty_n,
        if_read => bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_ready);

    mat_lap1_cols_channel_U : component reversi_accel_fifo_w32_d12_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_21,
        if_full_n => mat_lap1_cols_channel_full_n,
        if_write => ap_channel_done_mat_lap1_cols_channel,
        if_dout => mat_lap1_cols_channel_dout,
        if_num_data_valid => mat_lap1_cols_channel_num_data_valid,
        if_fifo_cap => mat_lap1_cols_channel_fifo_cap,
        if_empty_n => mat_lap1_cols_channel_empty_n,
        if_read => bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_ready);

    mat_lap_rows_channel_U : component reversi_accel_fifo_w32_d13_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_22,
        if_full_n => mat_lap_rows_channel_full_n,
        if_write => ap_channel_done_mat_lap_rows_channel,
        if_dout => mat_lap_rows_channel_dout,
        if_num_data_valid => mat_lap_rows_channel_num_data_valid,
        if_fifo_cap => mat_lap_rows_channel_fifo_cap,
        if_empty_n => mat_lap_rows_channel_empty_n,
        if_read => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_ready);

    mat_lap_cols_channel_U : component reversi_accel_fifo_w32_d13_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_23,
        if_full_n => mat_lap_cols_channel_full_n,
        if_write => ap_channel_done_mat_lap_cols_channel,
        if_dout => mat_lap_cols_channel_dout,
        if_num_data_valid => mat_lap_cols_channel_num_data_valid,
        if_fifo_cap => mat_lap_cols_channel_fifo_cap,
        if_empty_n => mat_lap_cols_channel_empty_n,
        if_read => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_ready);

    mat_dil_b_rows_channel_U : component reversi_accel_fifo_w32_d14_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_24,
        if_full_n => mat_dil_b_rows_channel_full_n,
        if_write => ap_channel_done_mat_dil_b_rows_channel,
        if_dout => mat_dil_b_rows_channel_dout,
        if_num_data_valid => mat_dil_b_rows_channel_num_data_valid,
        if_fifo_cap => mat_dil_b_rows_channel_fifo_cap,
        if_empty_n => mat_dil_b_rows_channel_empty_n,
        if_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_ready);

    mat_dil_b_cols_channel_U : component reversi_accel_fifo_w32_d14_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_25,
        if_full_n => mat_dil_b_cols_channel_full_n,
        if_write => ap_channel_done_mat_dil_b_cols_channel,
        if_dout => mat_dil_b_cols_channel_dout,
        if_num_data_valid => mat_dil_b_cols_channel_num_data_valid,
        if_fifo_cap => mat_dil_b_cols_channel_fifo_cap,
        if_empty_n => mat_dil_b_cols_channel_empty_n,
        if_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_ready);

    add_ln22_loc_channel_U : component reversi_accel_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_26,
        if_full_n => add_ln22_loc_channel_full_n,
        if_write => ap_channel_done_add_ln22_loc_channel,
        if_dout => add_ln22_loc_channel_dout,
        if_num_data_valid => add_ln22_loc_channel_num_data_valid,
        if_fifo_cap => add_ln22_loc_channel_fifo_cap,
        if_empty_n => add_ln22_loc_channel_empty_n,
        if_read => Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready);

    mat_in_rows_c36_channel_U : component reversi_accel_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_27,
        if_full_n => mat_in_rows_c36_channel_full_n,
        if_write => ap_channel_done_mat_in_rows_c36_channel,
        if_dout => mat_in_rows_c36_channel_dout,
        if_num_data_valid => mat_in_rows_c36_channel_num_data_valid,
        if_fifo_cap => mat_in_rows_c36_channel_fifo_cap,
        if_empty_n => mat_in_rows_c36_channel_empty_n,
        if_read => Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready);

    mat_in_cols_c37_channel_U : component reversi_accel_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry4_proc_U0_ap_return_28,
        if_full_n => mat_in_cols_c37_channel_full_n,
        if_write => ap_channel_done_mat_in_cols_c37_channel,
        if_dout => mat_in_cols_c37_channel_dout,
        if_num_data_valid => mat_in_cols_c37_channel_num_data_valid,
        if_fifo_cap => mat_in_cols_c37_channel_fifo_cap,
        if_empty_n => mat_in_cols_c37_channel_empty_n,
        if_read => Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready);

    mat_in_data_U : component reversi_accel_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_data_din,
        if_full_n => mat_in_data_full_n,
        if_write => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_data_write,
        if_dout => mat_in_data_dout,
        if_num_data_valid => mat_in_data_num_data_valid,
        if_fifo_cap => mat_in_data_fifo_cap,
        if_empty_n => mat_in_data_empty_n,
        if_read => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_in_data323_read);

    mat_in_rows_c_U : component reversi_accel_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_rows_c_din,
        if_full_n => mat_in_rows_c_full_n,
        if_write => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_rows_c_write,
        if_dout => mat_in_rows_c_dout,
        if_num_data_valid => mat_in_rows_c_num_data_valid,
        if_fifo_cap => mat_in_rows_c_fifo_cap,
        if_empty_n => mat_in_rows_c_empty_n,
        if_read => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_p_src_rows_read);

    mat_in_cols_c_U : component reversi_accel_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_cols_c_din,
        if_full_n => mat_in_cols_c_full_n,
        if_write => Array2xfMat_32_16_1024_1024_1_2_U0_mat_in_cols_c_write,
        if_dout => mat_in_cols_c_dout,
        if_num_data_valid => mat_in_cols_c_num_data_valid,
        if_fifo_cap => mat_in_cols_c_fifo_cap,
        if_empty_n => mat_in_cols_c_empty_n,
        if_read => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_p_src_cols_read);

    mat_blur_data_U : component reversi_accel_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_blur_data324_din,
        if_full_n => mat_blur_data_full_n,
        if_write => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_mat_blur_data324_write,
        if_dout => mat_blur_data_dout,
        if_num_data_valid => mat_blur_data_num_data_valid,
        if_fifo_cap => mat_blur_data_fifo_cap,
        if_empty_n => mat_blur_data_empty_n,
        if_read => bgr2hsv_16_1024_1024_1_2_2_U0_mat_blur_data324_read);

    mat_hsv_data_U : component reversi_accel_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bgr2hsv_16_1024_1024_1_2_2_U0_mat_hsv_data325_din,
        if_full_n => mat_hsv_data_full_n,
        if_write => bgr2hsv_16_1024_1024_1_2_2_U0_mat_hsv_data325_write,
        if_dout => mat_hsv_data_dout,
        if_num_data_valid => mat_hsv_data_num_data_valid,
        if_fifo_cap => mat_hsv_data_fifo_cap,
        if_empty_n => mat_hsv_data_empty_n,
        if_read => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv_data325_read);

    mat_hsv1_data_U : component reversi_accel_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv1_data326_din,
        if_full_n => mat_hsv1_data_full_n,
        if_write => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv1_data326_write,
        if_dout => mat_hsv1_data_dout,
        if_num_data_valid => mat_hsv1_data_num_data_valid,
        if_fifo_cap => mat_hsv1_data_fifo_cap,
        if_empty_n => mat_hsv1_data_empty_n,
        if_read => inRange_16_0_1024_1024_1_2_2_U0_mat_hsv1_data326_read);

    mat_hsv2_data_U : component reversi_accel_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv2_data327_din,
        if_full_n => mat_hsv2_data_full_n,
        if_write => duplicateMat_16_1024_1024_1_2_2_2_U0_mat_hsv2_data327_write,
        if_dout => mat_hsv2_data_dout,
        if_num_data_valid => mat_hsv2_data_num_data_valid,
        if_fifo_cap => mat_hsv2_data_fifo_cap,
        if_empty_n => mat_hsv2_data_empty_n,
        if_read => inRange_16_0_1024_1024_1_2_2_1_U0_mat_hsv2_data327_read);

    mat_green1_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => inRange_16_0_1024_1024_1_2_2_U0_mat_green1_data328_din,
        if_full_n => mat_green1_data_full_n,
        if_write => inRange_16_0_1024_1024_1_2_2_U0_mat_green1_data328_write,
        if_dout => mat_green1_data_dout,
        if_num_data_valid => mat_green1_data_num_data_valid,
        if_fifo_cap => mat_green1_data_fifo_cap,
        if_empty_n => mat_green1_data_empty_n,
        if_read => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green1_data328_read);

    mat_green2_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => inRange_16_0_1024_1024_1_2_2_1_U0_mat_green2_data329_din,
        if_full_n => mat_green2_data_full_n,
        if_write => inRange_16_0_1024_1024_1_2_2_1_U0_mat_green2_data329_write,
        if_dout => mat_green2_data_dout,
        if_num_data_valid => mat_green2_data_num_data_valid,
        if_fifo_cap => mat_green2_data_fifo_cap,
        if_empty_n => mat_green2_data_empty_n,
        if_read => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green2_data329_read);

    mat_green_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green_data330_din,
        if_full_n => mat_green_data_full_n,
        if_write => bitwise_or_0_1024_1024_1_2_2_2_U0_mat_green_data330_write,
        if_dout => mat_green_data_dout,
        if_num_data_valid => mat_green_data_num_data_valid,
        if_fifo_cap => mat_green_data_fifo_cap,
        if_empty_n => mat_green_data_empty_n,
        if_read => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_green_data330_read);

    mat_dil_a_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_din,
        if_full_n => mat_dil_a_data_full_n,
        if_write => dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_write,
        if_dout => mat_dil_a_data_dout,
        if_num_data_valid => mat_dil_a_data_num_data_valid,
        if_fifo_cap => mat_dil_a_data_fifo_cap,
        if_empty_n => mat_dil_a_data_empty_n,
        if_read => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_dil_a_data331_read);

    mat_ero_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_ero_data332_din,
        if_full_n => mat_ero_data_full_n,
        if_write => erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_mat_ero_data332_write,
        if_dout => mat_ero_data_dout,
        if_num_data_valid => mat_ero_data_num_data_valid,
        if_fifo_cap => mat_ero_data_fifo_cap,
        if_empty_n => mat_ero_data_empty_n,
        if_read => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero_data332_read);

    mat_ero1_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero1_data333_din,
        if_full_n => mat_ero1_data_full_n,
        if_write => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero1_data333_write,
        if_dout => mat_ero1_data_dout,
        if_num_data_valid => mat_ero1_data_num_data_valid,
        if_fifo_cap => mat_ero1_data_fifo_cap,
        if_empty_n => mat_ero1_data_empty_n,
        if_read => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_ero1_data333_read);

    mat_ero2_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero2_data334_din,
        if_full_n => mat_ero2_data_full_n,
        if_write => duplicateMat_0_1024_1024_1_2_2_2_U0_mat_ero2_data334_write,
        if_dout => mat_ero2_data_dout,
        if_num_data_valid => mat_ero2_data_num_data_valid,
        if_fifo_cap => mat_ero2_data_fifo_cap,
        if_empty_n => mat_ero2_data_empty_n,
        if_read => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_ero2_data334_read);

    mat_lap1_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap1_data335_din,
        if_full_n => mat_lap1_data_full_n,
        if_write => dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap1_data335_write,
        if_dout => mat_lap1_data_dout,
        if_num_data_valid => mat_lap1_data_num_data_valid,
        if_fifo_cap => mat_lap1_data_fifo_cap,
        if_empty_n => mat_lap1_data_empty_n,
        if_read => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap1_data335_read);

    mat_lap2_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap2_data336_din,
        if_full_n => mat_lap2_data_full_n,
        if_write => erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_mat_lap2_data336_write,
        if_dout => mat_lap2_data_dout,
        if_num_data_valid => mat_lap2_data_num_data_valid,
        if_fifo_cap => mat_lap2_data_fifo_cap,
        if_empty_n => mat_lap2_data_empty_n,
        if_read => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap2_data336_read);

    mat_lap_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap_data337_din,
        if_full_n => mat_lap_data_full_n,
        if_write => bitwise_xor_0_1024_1024_1_2_2_2_U0_mat_lap_data337_write,
        if_dout => mat_lap_data_dout,
        if_num_data_valid => mat_lap_data_num_data_valid,
        if_fifo_cap => mat_lap_data_fifo_cap,
        if_empty_n => mat_lap_data_empty_n,
        if_read => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_lap_data337_read);

    mat_dil_b_data_U : component reversi_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_dil_b_data338_din,
        if_full_n => mat_dil_b_data_full_n,
        if_write => dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_mat_dil_b_data338_write,
        if_dout => mat_dil_b_data_dout,
        if_num_data_valid => mat_dil_b_data_num_data_valid,
        if_fifo_cap => mat_dil_b_data_fifo_cap,
        if_empty_n => mat_dil_b_data_empty_n,
        if_read => HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_mat_dil_b_data338_read);

    start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_U : component reversi_accel_start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_din,
        if_full_n => start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_full_n,
        if_write => Array2xfMat_32_16_1024_1024_1_2_U0_start_write,
        if_dout => start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_dout,
        if_empty_n => start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_empty_n,
        if_read => GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_ready);





    ap_sync_reg_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready <= ap_sync_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_entry4_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_entry4_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry4_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry4_proc_U0_ap_ready <= ap_sync_Block_entry4_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_add_ln22_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_add_ln22_loc_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_add_ln22_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_add_ln22_loc_channel <= ap_sync_channel_write_add_ln22_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_blur_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_blur_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_blur_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_blur_cols_channel <= ap_sync_channel_write_mat_blur_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_blur_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_blur_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_blur_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_blur_rows_channel <= ap_sync_channel_write_mat_blur_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_dil_a_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_dil_a_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_dil_a_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_dil_a_cols_channel <= ap_sync_channel_write_mat_dil_a_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_dil_a_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_dil_a_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_dil_a_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_dil_a_rows_channel <= ap_sync_channel_write_mat_dil_a_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_dil_b_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_dil_b_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_dil_b_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_dil_b_cols_channel <= ap_sync_channel_write_mat_dil_b_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_dil_b_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_dil_b_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_dil_b_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_dil_b_rows_channel <= ap_sync_channel_write_mat_dil_b_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_ero1_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_ero1_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_ero1_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_ero1_cols_channel <= ap_sync_channel_write_mat_ero1_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_ero1_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_ero1_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_ero1_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_ero1_rows_channel <= ap_sync_channel_write_mat_ero1_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_ero2_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_ero2_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_ero2_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_ero2_cols_channel <= ap_sync_channel_write_mat_ero2_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_ero2_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_ero2_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_ero2_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_ero2_rows_channel <= ap_sync_channel_write_mat_ero2_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_ero_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_ero_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_ero_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_ero_cols_channel <= ap_sync_channel_write_mat_ero_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_ero_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_ero_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_ero_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_ero_rows_channel <= ap_sync_channel_write_mat_ero_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_green1_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_green1_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_green1_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_green1_cols_channel <= ap_sync_channel_write_mat_green1_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_green1_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_green1_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_green1_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_green1_rows_channel <= ap_sync_channel_write_mat_green1_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_green_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_green_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_green_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_green_cols_channel <= ap_sync_channel_write_mat_green_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_green_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_green_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_green_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_green_rows_channel <= ap_sync_channel_write_mat_green_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_hsv1_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_hsv1_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_hsv1_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_hsv1_cols_channel <= ap_sync_channel_write_mat_hsv1_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_hsv1_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_hsv1_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_hsv1_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_hsv1_rows_channel <= ap_sync_channel_write_mat_hsv1_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_hsv2_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_hsv2_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_hsv2_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_hsv2_cols_channel <= ap_sync_channel_write_mat_hsv2_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_hsv2_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_hsv2_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_hsv2_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_hsv2_rows_channel <= ap_sync_channel_write_mat_hsv2_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_hsv_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_hsv_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_hsv_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_hsv_cols_channel <= ap_sync_channel_write_mat_hsv_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_hsv_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_hsv_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_hsv_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_hsv_rows_channel <= ap_sync_channel_write_mat_hsv_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_in_cols_c37_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_in_cols_c37_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_in_cols_c37_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_in_cols_c37_channel <= ap_sync_channel_write_mat_in_cols_c37_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_in_rows_c36_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_in_rows_c36_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_in_rows_c36_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_in_rows_c36_channel <= ap_sync_channel_write_mat_in_rows_c36_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_lap1_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_lap1_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_lap1_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_lap1_cols_channel <= ap_sync_channel_write_mat_lap1_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_lap1_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_lap1_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_lap1_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_lap1_rows_channel <= ap_sync_channel_write_mat_lap1_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_lap_cols_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_lap_cols_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_lap_cols_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_lap_cols_channel <= ap_sync_channel_write_mat_lap_cols_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_mat_lap_rows_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_mat_lap_rows_channel <= ap_const_logic_0;
            else
                if (((Block_entry4_proc_U0_ap_done and Block_entry4_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_mat_lap_rows_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_mat_lap_rows_channel <= ap_sync_channel_write_mat_lap_rows_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc19_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc19_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc19_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc19_U0_ap_ready <= ap_sync_entry_proc19_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Array2xfMat_32_16_1024_1024_1_2_U0_ap_continue <= ap_const_logic_1;
    Array2xfMat_32_16_1024_1024_1_2_U0_ap_start <= (mat_in_rows_c36_channel_empty_n and mat_in_cols_c37_channel_empty_n and (ap_sync_reg_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready xor ap_const_logic_1) and ap_start and add_ln22_loc_channel_empty_n);
    Block_entry4_proc_U0_ap_continue <= (ap_sync_channel_write_mat_lap_rows_channel and ap_sync_channel_write_mat_lap_cols_channel and ap_sync_channel_write_mat_lap1_rows_channel and ap_sync_channel_write_mat_lap1_cols_channel and ap_sync_channel_write_mat_in_rows_c36_channel and ap_sync_channel_write_mat_in_cols_c37_channel and ap_sync_channel_write_mat_hsv_rows_channel and ap_sync_channel_write_mat_hsv_cols_channel and ap_sync_channel_write_mat_hsv2_rows_channel and ap_sync_channel_write_mat_hsv2_cols_channel and ap_sync_channel_write_mat_hsv1_rows_channel and ap_sync_channel_write_mat_hsv1_cols_channel and ap_sync_channel_write_mat_green_rows_channel and ap_sync_channel_write_mat_green_cols_channel and ap_sync_channel_write_mat_green1_rows_channel and ap_sync_channel_write_mat_green1_cols_channel and ap_sync_channel_write_mat_ero_rows_channel and ap_sync_channel_write_mat_ero_cols_channel and ap_sync_channel_write_mat_ero2_rows_channel and ap_sync_channel_write_mat_ero2_cols_channel and ap_sync_channel_write_mat_ero1_rows_channel and ap_sync_channel_write_mat_ero1_cols_channel and ap_sync_channel_write_mat_dil_b_rows_channel and ap_sync_channel_write_mat_dil_b_cols_channel and ap_sync_channel_write_mat_dil_a_rows_channel and ap_sync_channel_write_mat_dil_a_cols_channel and ap_sync_channel_write_mat_blur_rows_channel and ap_sync_channel_write_mat_blur_cols_channel and ap_sync_channel_write_add_ln22_loc_channel);
    Block_entry4_proc_U0_ap_start <= ((ap_sync_reg_Block_entry4_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_continue <= ap_const_logic_1;
    GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_start <= start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_empty_n;
    HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_continue <= ap_const_logic_1;
    HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_start <= (mat_dil_b_rows_channel_empty_n and mat_dil_b_cols_channel_empty_n);
    ap_channel_done_add_ln22_loc_channel <= ((ap_sync_reg_channel_write_add_ln22_loc_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_blur_cols_channel <= ((ap_sync_reg_channel_write_mat_blur_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_blur_rows_channel <= ((ap_sync_reg_channel_write_mat_blur_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_dil_a_cols_channel <= ((ap_sync_reg_channel_write_mat_dil_a_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_dil_a_rows_channel <= ((ap_sync_reg_channel_write_mat_dil_a_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_dil_b_cols_channel <= ((ap_sync_reg_channel_write_mat_dil_b_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_dil_b_rows_channel <= ((ap_sync_reg_channel_write_mat_dil_b_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_ero1_cols_channel <= ((ap_sync_reg_channel_write_mat_ero1_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_ero1_rows_channel <= ((ap_sync_reg_channel_write_mat_ero1_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_ero2_cols_channel <= ((ap_sync_reg_channel_write_mat_ero2_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_ero2_rows_channel <= ((ap_sync_reg_channel_write_mat_ero2_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_ero_cols_channel <= ((ap_sync_reg_channel_write_mat_ero_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_ero_rows_channel <= ((ap_sync_reg_channel_write_mat_ero_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_green1_cols_channel <= ((ap_sync_reg_channel_write_mat_green1_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_green1_rows_channel <= ((ap_sync_reg_channel_write_mat_green1_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_green_cols_channel <= ((ap_sync_reg_channel_write_mat_green_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_green_rows_channel <= ((ap_sync_reg_channel_write_mat_green_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_hsv1_cols_channel <= ((ap_sync_reg_channel_write_mat_hsv1_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_hsv1_rows_channel <= ((ap_sync_reg_channel_write_mat_hsv1_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_hsv2_cols_channel <= ((ap_sync_reg_channel_write_mat_hsv2_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_hsv2_rows_channel <= ((ap_sync_reg_channel_write_mat_hsv2_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_hsv_cols_channel <= ((ap_sync_reg_channel_write_mat_hsv_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_hsv_rows_channel <= ((ap_sync_reg_channel_write_mat_hsv_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_in_cols_c37_channel <= ((ap_sync_reg_channel_write_mat_in_cols_c37_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_in_rows_c36_channel <= ((ap_sync_reg_channel_write_mat_in_rows_c36_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_lap1_cols_channel <= ((ap_sync_reg_channel_write_mat_lap1_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_lap1_rows_channel <= ((ap_sync_reg_channel_write_mat_lap1_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_lap_cols_channel <= ((ap_sync_reg_channel_write_mat_lap_cols_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_channel_done_mat_lap_rows_channel <= ((ap_sync_reg_channel_write_mat_lap_rows_channel xor ap_const_logic_1) and Block_entry4_proc_U0_ap_done);
    ap_done <= HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_done;
    ap_idle <= (inRange_16_0_1024_1024_1_2_2_U0_ap_idle and inRange_16_0_1024_1024_1_2_2_1_U0_ap_idle and (ap_const_logic_1 xor add_ln22_loc_channel_empty_n) and (mat_in_cols_c37_channel_empty_n xor ap_const_logic_1) and (mat_in_rows_c36_channel_empty_n xor ap_const_logic_1) and (mat_dil_b_cols_channel_empty_n xor ap_const_logic_1) and (mat_dil_b_rows_channel_empty_n xor ap_const_logic_1) and (mat_lap_cols_channel_empty_n xor ap_const_logic_1) and (mat_lap_rows_channel_empty_n xor ap_const_logic_1) and (mat_lap1_cols_channel_empty_n xor ap_const_logic_1) and (mat_lap1_rows_channel_empty_n xor ap_const_logic_1) and (mat_ero2_cols_channel_empty_n xor ap_const_logic_1) and (mat_ero2_rows_channel_empty_n xor ap_const_logic_1) and (mat_ero1_cols_channel_empty_n xor ap_const_logic_1) and (mat_ero1_rows_channel_empty_n xor ap_const_logic_1) and (mat_ero_cols_channel_empty_n xor ap_const_logic_1) and (mat_ero_rows_channel_empty_n xor ap_const_logic_1) and (mat_dil_a_cols_channel_empty_n xor ap_const_logic_1) and (mat_dil_a_rows_channel_empty_n xor ap_const_logic_1) and (mat_green_cols_channel_empty_n xor ap_const_logic_1) and (mat_green_rows_channel_empty_n xor ap_const_logic_1) and (mat_green1_cols_channel_empty_n xor ap_const_logic_1) and (mat_green1_rows_channel_empty_n xor ap_const_logic_1) and (mat_hsv2_cols_channel_empty_n xor ap_const_logic_1) and (mat_hsv2_rows_channel_empty_n xor ap_const_logic_1) and (mat_hsv1_cols_channel_empty_n xor ap_const_logic_1) and (mat_hsv1_rows_channel_empty_n xor ap_const_logic_1) and (mat_hsv_cols_channel_empty_n xor ap_const_logic_1) and (mat_hsv_rows_channel_empty_n xor ap_const_logic_1) and (mat_blur_cols_channel_empty_n xor ap_const_logic_1) and (mat_blur_rows_channel_empty_n xor ap_const_logic_1) and erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_idle and erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_idle and entry_proc19_U0_ap_idle and duplicateMat_16_1024_1024_1_2_2_2_U0_ap_idle and duplicateMat_0_1024_1024_1_2_2_2_U0_ap_idle and dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_idle and dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_idle and dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_idle and bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_idle and bitwise_or_0_1024_1024_1_2_2_2_U0_ap_idle and bgr2hsv_16_1024_1024_1_2_2_U0_ap_idle and HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_U0_ap_idle and GaussianBlur_3_0_16_1024_1024_1_2_2_U0_ap_idle and Block_entry4_proc_U0_ap_idle and Array2xfMat_32_16_1024_1024_1_2_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready <= (ap_sync_reg_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready or Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready);
    ap_sync_Block_entry4_proc_U0_ap_ready <= (ap_sync_reg_Block_entry4_proc_U0_ap_ready or Block_entry4_proc_U0_ap_ready);
    ap_sync_channel_write_add_ln22_loc_channel <= ((ap_channel_done_add_ln22_loc_channel and add_ln22_loc_channel_full_n) or ap_sync_reg_channel_write_add_ln22_loc_channel);
    ap_sync_channel_write_mat_blur_cols_channel <= ((mat_blur_cols_channel_full_n and ap_channel_done_mat_blur_cols_channel) or ap_sync_reg_channel_write_mat_blur_cols_channel);
    ap_sync_channel_write_mat_blur_rows_channel <= ((mat_blur_rows_channel_full_n and ap_channel_done_mat_blur_rows_channel) or ap_sync_reg_channel_write_mat_blur_rows_channel);
    ap_sync_channel_write_mat_dil_a_cols_channel <= ((mat_dil_a_cols_channel_full_n and ap_channel_done_mat_dil_a_cols_channel) or ap_sync_reg_channel_write_mat_dil_a_cols_channel);
    ap_sync_channel_write_mat_dil_a_rows_channel <= ((mat_dil_a_rows_channel_full_n and ap_channel_done_mat_dil_a_rows_channel) or ap_sync_reg_channel_write_mat_dil_a_rows_channel);
    ap_sync_channel_write_mat_dil_b_cols_channel <= ((mat_dil_b_cols_channel_full_n and ap_channel_done_mat_dil_b_cols_channel) or ap_sync_reg_channel_write_mat_dil_b_cols_channel);
    ap_sync_channel_write_mat_dil_b_rows_channel <= ((mat_dil_b_rows_channel_full_n and ap_channel_done_mat_dil_b_rows_channel) or ap_sync_reg_channel_write_mat_dil_b_rows_channel);
    ap_sync_channel_write_mat_ero1_cols_channel <= ((mat_ero1_cols_channel_full_n and ap_channel_done_mat_ero1_cols_channel) or ap_sync_reg_channel_write_mat_ero1_cols_channel);
    ap_sync_channel_write_mat_ero1_rows_channel <= ((mat_ero1_rows_channel_full_n and ap_channel_done_mat_ero1_rows_channel) or ap_sync_reg_channel_write_mat_ero1_rows_channel);
    ap_sync_channel_write_mat_ero2_cols_channel <= ((mat_ero2_cols_channel_full_n and ap_channel_done_mat_ero2_cols_channel) or ap_sync_reg_channel_write_mat_ero2_cols_channel);
    ap_sync_channel_write_mat_ero2_rows_channel <= ((mat_ero2_rows_channel_full_n and ap_channel_done_mat_ero2_rows_channel) or ap_sync_reg_channel_write_mat_ero2_rows_channel);
    ap_sync_channel_write_mat_ero_cols_channel <= ((mat_ero_cols_channel_full_n and ap_channel_done_mat_ero_cols_channel) or ap_sync_reg_channel_write_mat_ero_cols_channel);
    ap_sync_channel_write_mat_ero_rows_channel <= ((mat_ero_rows_channel_full_n and ap_channel_done_mat_ero_rows_channel) or ap_sync_reg_channel_write_mat_ero_rows_channel);
    ap_sync_channel_write_mat_green1_cols_channel <= ((mat_green1_cols_channel_full_n and ap_channel_done_mat_green1_cols_channel) or ap_sync_reg_channel_write_mat_green1_cols_channel);
    ap_sync_channel_write_mat_green1_rows_channel <= ((mat_green1_rows_channel_full_n and ap_channel_done_mat_green1_rows_channel) or ap_sync_reg_channel_write_mat_green1_rows_channel);
    ap_sync_channel_write_mat_green_cols_channel <= ((mat_green_cols_channel_full_n and ap_channel_done_mat_green_cols_channel) or ap_sync_reg_channel_write_mat_green_cols_channel);
    ap_sync_channel_write_mat_green_rows_channel <= ((mat_green_rows_channel_full_n and ap_channel_done_mat_green_rows_channel) or ap_sync_reg_channel_write_mat_green_rows_channel);
    ap_sync_channel_write_mat_hsv1_cols_channel <= ((mat_hsv1_cols_channel_full_n and ap_channel_done_mat_hsv1_cols_channel) or ap_sync_reg_channel_write_mat_hsv1_cols_channel);
    ap_sync_channel_write_mat_hsv1_rows_channel <= ((mat_hsv1_rows_channel_full_n and ap_channel_done_mat_hsv1_rows_channel) or ap_sync_reg_channel_write_mat_hsv1_rows_channel);
    ap_sync_channel_write_mat_hsv2_cols_channel <= ((mat_hsv2_cols_channel_full_n and ap_channel_done_mat_hsv2_cols_channel) or ap_sync_reg_channel_write_mat_hsv2_cols_channel);
    ap_sync_channel_write_mat_hsv2_rows_channel <= ((mat_hsv2_rows_channel_full_n and ap_channel_done_mat_hsv2_rows_channel) or ap_sync_reg_channel_write_mat_hsv2_rows_channel);
    ap_sync_channel_write_mat_hsv_cols_channel <= ((mat_hsv_cols_channel_full_n and ap_channel_done_mat_hsv_cols_channel) or ap_sync_reg_channel_write_mat_hsv_cols_channel);
    ap_sync_channel_write_mat_hsv_rows_channel <= ((mat_hsv_rows_channel_full_n and ap_channel_done_mat_hsv_rows_channel) or ap_sync_reg_channel_write_mat_hsv_rows_channel);
    ap_sync_channel_write_mat_in_cols_c37_channel <= ((mat_in_cols_c37_channel_full_n and ap_channel_done_mat_in_cols_c37_channel) or ap_sync_reg_channel_write_mat_in_cols_c37_channel);
    ap_sync_channel_write_mat_in_rows_c36_channel <= ((mat_in_rows_c36_channel_full_n and ap_channel_done_mat_in_rows_c36_channel) or ap_sync_reg_channel_write_mat_in_rows_c36_channel);
    ap_sync_channel_write_mat_lap1_cols_channel <= ((mat_lap1_cols_channel_full_n and ap_channel_done_mat_lap1_cols_channel) or ap_sync_reg_channel_write_mat_lap1_cols_channel);
    ap_sync_channel_write_mat_lap1_rows_channel <= ((mat_lap1_rows_channel_full_n and ap_channel_done_mat_lap1_rows_channel) or ap_sync_reg_channel_write_mat_lap1_rows_channel);
    ap_sync_channel_write_mat_lap_cols_channel <= ((mat_lap_cols_channel_full_n and ap_channel_done_mat_lap_cols_channel) or ap_sync_reg_channel_write_mat_lap_cols_channel);
    ap_sync_channel_write_mat_lap_rows_channel <= ((mat_lap_rows_channel_full_n and ap_channel_done_mat_lap_rows_channel) or ap_sync_reg_channel_write_mat_lap_rows_channel);
    ap_sync_entry_proc19_U0_ap_ready <= (entry_proc19_U0_ap_ready or ap_sync_reg_entry_proc19_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc19_U0_ap_ready and ap_sync_Block_entry4_proc_U0_ap_ready and ap_sync_Array2xfMat_32_16_1024_1024_1_2_U0_ap_ready);
    bgr2hsv_16_1024_1024_1_2_2_U0_ap_continue <= ap_const_logic_1;
    bgr2hsv_16_1024_1024_1_2_2_U0_ap_start <= (mat_blur_rows_channel_empty_n and mat_blur_cols_channel_empty_n);
    bitwise_or_0_1024_1024_1_2_2_2_U0_ap_continue <= ap_const_logic_1;
    bitwise_or_0_1024_1024_1_2_2_2_U0_ap_start <= (mat_green1_rows_channel_empty_n and mat_green1_cols_channel_empty_n);
    bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_continue <= ap_const_logic_1;
    bitwise_xor_0_1024_1024_1_2_2_2_U0_ap_start <= (mat_lap1_rows_channel_empty_n and mat_lap1_cols_channel_empty_n);
    data_RID <= ap_const_lv1_0;
    data_RLAST <= ap_const_logic_0;
    data_RRESP <= ap_const_lv2_0;
    data_RUSER <= ap_const_lv1_0;
    dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_continue <= ap_const_logic_1;
    dilate_0_0_1024_1024_0_3_3_1_1_2_2_U0_ap_start <= (mat_lap_rows_channel_empty_n and mat_lap_cols_channel_empty_n);
    dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_continue <= ap_const_logic_1;
    dilate_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_start <= (mat_green_rows_channel_empty_n and mat_green_cols_channel_empty_n);
    dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_continue <= ap_const_logic_1;
    dilate_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_start <= (mat_ero1_rows_channel_empty_n and mat_ero1_cols_channel_empty_n);
    duplicateMat_0_1024_1024_1_2_2_2_U0_ap_continue <= ap_const_logic_1;
    duplicateMat_0_1024_1024_1_2_2_2_U0_ap_start <= (mat_ero_rows_channel_empty_n and mat_ero_cols_channel_empty_n);
    duplicateMat_16_1024_1024_1_2_2_2_U0_ap_continue <= ap_const_logic_1;
    duplicateMat_16_1024_1024_1_2_2_2_U0_ap_start <= (mat_hsv_rows_channel_empty_n and mat_hsv_cols_channel_empty_n);
    entry_proc19_U0_ap_continue <= ap_const_logic_1;
    entry_proc19_U0_ap_start <= ((ap_sync_reg_entry_proc19_U0_ap_ready xor ap_const_logic_1) and ap_start);
    erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_continue <= ap_const_logic_1;
    erode_0_0_1024_1024_0_7_7_1_1_2_2_U0_ap_start <= (mat_dil_a_rows_channel_empty_n and mat_dil_a_cols_channel_empty_n);
    erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_continue <= ap_const_logic_1;
    erode_0_0_1024_1024_2_3_3_1_1_2_2_U0_ap_start <= (mat_ero2_rows_channel_empty_n and mat_ero2_cols_channel_empty_n);
    inRange_16_0_1024_1024_1_2_2_1_U0_ap_continue <= ap_const_logic_1;
    inRange_16_0_1024_1024_1_2_2_1_U0_ap_start <= (mat_hsv2_rows_channel_empty_n and mat_hsv2_cols_channel_empty_n);
    inRange_16_0_1024_1024_1_2_2_U0_ap_continue <= ap_const_logic_1;
    inRange_16_0_1024_1024_1_2_2_U0_ap_start <= (mat_hsv1_rows_channel_empty_n and mat_hsv1_cols_channel_empty_n);
    rho_BID <= ap_const_lv1_0;
    rho_BRESP <= ap_const_lv2_0;
    rho_BUSER <= ap_const_lv1_0;
    start_for_GaussianBlur_3_0_16_1024_1024_1_2_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    theta_BID <= ap_const_lv1_0;
    theta_BRESP <= ap_const_lv2_0;
    theta_BUSER <= ap_const_lv1_0;
end behav;
