-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_Block_entry4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    stride : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of reversi_accel_Block_entry4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln71_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln72_fu_62_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln72_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln72_1_reg_335 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln72_1_fu_68_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_fu_91_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln72_2_fu_100_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_84_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln72_2_fu_94_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_1_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln72_fu_113_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_121_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal select_ln71_fu_129_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln22_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_fu_140_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_16_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_17_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_18_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_19_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_20_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_21_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_22_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_23_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_24_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_25_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_26_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_27_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_28_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_0_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_10_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_11_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_12_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_13_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_14_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_15_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_16_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_16_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_16_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_17_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_17_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_17_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_18_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_18_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_18_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_19_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_19_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_19_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_1_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_20_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_20_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_20_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_21_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_21_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_21_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_22_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_22_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_22_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_23_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_23_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_23_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_24_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_24_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_24_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_25_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_25_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_25_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_26_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_26_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_26_preg <= add_ln22_fu_140_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_27_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_27_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_27_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_28_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_28_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_28_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_2_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_3_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_4_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_5_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_6_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_7_preg <= width;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_8_preg <= height;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_9_preg <= width;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln71_reg_324 <= icmp_ln71_fu_56_p2;
                lshr_ln72_1_reg_335 <= sub_ln72_1_fu_68_p2(31 downto 1);
                sub_ln72_reg_329 <= sub_ln72_fu_62_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln22_fu_140_p2 <= std_logic_vector(signed(sext_ln22_fu_136_p1) + signed(data_in));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(height, ap_CS_fsm_state2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_0 <= height;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(width, ap_CS_fsm_state2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_1 <= width;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(height, ap_CS_fsm_state2, ap_return_10_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_10 <= height;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(width, ap_CS_fsm_state2, ap_return_11_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_11 <= width;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(height, ap_CS_fsm_state2, ap_return_12_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_12 <= height;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(width, ap_CS_fsm_state2, ap_return_13_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_13 <= width;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(height, ap_CS_fsm_state2, ap_return_14_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_14 <= height;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(width, ap_CS_fsm_state2, ap_return_15_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_15 <= width;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_16_assign_proc : process(height, ap_CS_fsm_state2, ap_return_16_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_16 <= height;
        else 
            ap_return_16 <= ap_return_16_preg;
        end if; 
    end process;


    ap_return_17_assign_proc : process(width, ap_CS_fsm_state2, ap_return_17_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_17 <= width;
        else 
            ap_return_17 <= ap_return_17_preg;
        end if; 
    end process;


    ap_return_18_assign_proc : process(height, ap_CS_fsm_state2, ap_return_18_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_18 <= height;
        else 
            ap_return_18 <= ap_return_18_preg;
        end if; 
    end process;


    ap_return_19_assign_proc : process(width, ap_CS_fsm_state2, ap_return_19_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_19 <= width;
        else 
            ap_return_19 <= ap_return_19_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(height, ap_CS_fsm_state2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_2 <= height;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_20_assign_proc : process(height, ap_CS_fsm_state2, ap_return_20_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_20 <= height;
        else 
            ap_return_20 <= ap_return_20_preg;
        end if; 
    end process;


    ap_return_21_assign_proc : process(width, ap_CS_fsm_state2, ap_return_21_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_21 <= width;
        else 
            ap_return_21 <= ap_return_21_preg;
        end if; 
    end process;


    ap_return_22_assign_proc : process(height, ap_CS_fsm_state2, ap_return_22_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_22 <= height;
        else 
            ap_return_22 <= ap_return_22_preg;
        end if; 
    end process;


    ap_return_23_assign_proc : process(width, ap_CS_fsm_state2, ap_return_23_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_23 <= width;
        else 
            ap_return_23 <= ap_return_23_preg;
        end if; 
    end process;


    ap_return_24_assign_proc : process(height, ap_CS_fsm_state2, ap_return_24_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_24 <= height;
        else 
            ap_return_24 <= ap_return_24_preg;
        end if; 
    end process;


    ap_return_25_assign_proc : process(width, ap_CS_fsm_state2, ap_return_25_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_25 <= width;
        else 
            ap_return_25 <= ap_return_25_preg;
        end if; 
    end process;


    ap_return_26_assign_proc : process(ap_CS_fsm_state2, add_ln22_fu_140_p2, ap_return_26_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_26 <= add_ln22_fu_140_p2;
        else 
            ap_return_26 <= ap_return_26_preg;
        end if; 
    end process;


    ap_return_27_assign_proc : process(height, ap_CS_fsm_state2, ap_return_27_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_27 <= height;
        else 
            ap_return_27 <= ap_return_27_preg;
        end if; 
    end process;


    ap_return_28_assign_proc : process(width, ap_CS_fsm_state2, ap_return_28_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_28 <= width;
        else 
            ap_return_28 <= ap_return_28_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(width, ap_CS_fsm_state2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_3 <= width;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(height, ap_CS_fsm_state2, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_4 <= height;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(width, ap_CS_fsm_state2, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_5 <= width;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(height, ap_CS_fsm_state2, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_6 <= height;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(width, ap_CS_fsm_state2, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_7 <= width;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(height, ap_CS_fsm_state2, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_8 <= height;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(width, ap_CS_fsm_state2, ap_return_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_9 <= width;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    icmp_ln71_fu_56_p2 <= "1" when (stride = ap_const_lv32_FFFFFFFF) else "0";
    lshr_ln72_2_fu_100_p4 <= sub_ln72_reg_329(31 downto 1);
    select_ln71_fu_129_p3 <= 
        ap_const_lv34_0 when (icmp_ln71_reg_324(0) = '1') else 
        shl_ln_fu_121_p3;
    select_ln72_fu_113_p3 <= 
        sub_ln72_2_fu_94_p2 when (tmp_fu_84_p3(0) = '1') else 
        zext_ln72_1_fu_109_p1;
        sext_ln22_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln71_fu_129_p3),64));

    shl_ln_fu_121_p3 <= (select_ln72_fu_113_p3 & ap_const_lv2_0);
    sub_ln72_1_fu_68_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln72_fu_62_p2));
    sub_ln72_2_fu_94_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln72_fu_91_p1));
    sub_ln72_fu_62_p2 <= std_logic_vector(unsigned(stride) - unsigned(width));
    tmp_fu_84_p3 <= sub_ln72_reg_329(31 downto 31);
    zext_ln72_1_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_2_fu_100_p4),32));
    zext_ln72_fu_91_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln72_1_reg_335),32));
end behav;
