-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mat_dil_b_data338_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    mat_dil_b_data338_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mat_dil_b_data338_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mat_dil_b_data338_empty_n : IN STD_LOGIC;
    mat_dil_b_data338_read : OUT STD_LOGIC;
    m_axi_rho_AWVALID : OUT STD_LOGIC;
    m_axi_rho_AWREADY : IN STD_LOGIC;
    m_axi_rho_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rho_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rho_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_WVALID : OUT STD_LOGIC;
    m_axi_rho_WREADY : IN STD_LOGIC;
    m_axi_rho_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rho_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_WLAST : OUT STD_LOGIC;
    m_axi_rho_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_ARVALID : OUT STD_LOGIC;
    m_axi_rho_ARREADY : IN STD_LOGIC;
    m_axi_rho_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rho_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rho_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rho_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rho_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_RVALID : IN STD_LOGIC;
    m_axi_rho_RREADY : OUT STD_LOGIC;
    m_axi_rho_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rho_RLAST : IN STD_LOGIC;
    m_axi_rho_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_rho_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_BVALID : IN STD_LOGIC;
    m_axi_rho_BREADY : OUT STD_LOGIC;
    m_axi_rho_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rho_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rho_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outputrho_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    outputrho_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    outputrho_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    outputrho_empty_n : IN STD_LOGIC;
    outputrho_read : OUT STD_LOGIC;
    m_axi_theta_AWVALID : OUT STD_LOGIC;
    m_axi_theta_AWREADY : IN STD_LOGIC;
    m_axi_theta_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_theta_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_theta_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_WVALID : OUT STD_LOGIC;
    m_axi_theta_WREADY : IN STD_LOGIC;
    m_axi_theta_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_theta_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_WLAST : OUT STD_LOGIC;
    m_axi_theta_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_ARVALID : OUT STD_LOGIC;
    m_axi_theta_ARREADY : IN STD_LOGIC;
    m_axi_theta_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_theta_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_theta_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_theta_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_theta_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_RVALID : IN STD_LOGIC;
    m_axi_theta_RREADY : OUT STD_LOGIC;
    m_axi_theta_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_theta_RLAST : IN STD_LOGIC;
    m_axi_theta_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_theta_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_BVALID : IN STD_LOGIC;
    m_axi_theta_BREADY : OUT STD_LOGIC;
    m_axi_theta_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_theta_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_theta_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outputtheta_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    outputtheta_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    outputtheta_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    outputtheta_empty_n : IN STD_LOGIC;
    outputtheta_read : OUT STD_LOGIC );
end;


architecture behav of reversi_accel_HoughLines_3u_6u_32_483_0_180_0_1024_1024_1_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal outputrho_blk_n : STD_LOGIC;
    signal outputtheta_blk_n : STD_LOGIC;
    signal outputtheta_read_reg_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal outputrho_read_reg_101 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln260_fu_88_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln260_reg_106 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln260_1_fu_92_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln260_1_reg_111 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_idle : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_ready : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_mat_dil_b_data338_read : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWVALID : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WVALID : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WLAST : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARVALID : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_RREADY : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_BREADY : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWVALID : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WVALID : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WLAST : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARVALID : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_RREADY : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_BREADY : STD_LOGIC;
    signal grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat_dil_b_data338_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_dil_b_data338_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_b_data338_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        mat_dil_b_data338_empty_n : IN STD_LOGIC;
        mat_dil_b_data338_read : OUT STD_LOGIC;
        m_axi_rho_AWVALID : OUT STD_LOGIC;
        m_axi_rho_AWREADY : IN STD_LOGIC;
        m_axi_rho_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rho_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_WVALID : OUT STD_LOGIC;
        m_axi_rho_WREADY : IN STD_LOGIC;
        m_axi_rho_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_WLAST : OUT STD_LOGIC;
        m_axi_rho_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_ARVALID : OUT STD_LOGIC;
        m_axi_rho_ARREADY : IN STD_LOGIC;
        m_axi_rho_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rho_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rho_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rho_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_RVALID : IN STD_LOGIC;
        m_axi_rho_RREADY : OUT STD_LOGIC;
        m_axi_rho_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rho_RLAST : IN STD_LOGIC;
        m_axi_rho_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_rho_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_BVALID : IN STD_LOGIC;
        m_axi_rho_BREADY : OUT STD_LOGIC;
        m_axi_rho_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rho_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rho_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputrho : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_theta_AWVALID : OUT STD_LOGIC;
        m_axi_theta_AWREADY : IN STD_LOGIC;
        m_axi_theta_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_theta_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_WVALID : OUT STD_LOGIC;
        m_axi_theta_WREADY : IN STD_LOGIC;
        m_axi_theta_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_WLAST : OUT STD_LOGIC;
        m_axi_theta_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_ARVALID : OUT STD_LOGIC;
        m_axi_theta_ARREADY : IN STD_LOGIC;
        m_axi_theta_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_theta_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_theta_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_theta_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_RVALID : IN STD_LOGIC;
        m_axi_theta_RREADY : OUT STD_LOGIC;
        m_axi_theta_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_theta_RLAST : IN STD_LOGIC;
        m_axi_theta_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_theta_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_BVALID : IN STD_LOGIC;
        m_axi_theta_BREADY : OUT STD_LOGIC;
        m_axi_theta_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_theta_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_theta_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputtheta : IN STD_LOGIC_VECTOR (63 downto 0);
        height : IN STD_LOGIC_VECTOR (11 downto 0);
        width : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74 : component reversi_accel_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start,
        ap_done => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done,
        ap_idle => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_idle,
        ap_ready => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_ready,
        mat_dil_b_data338_dout => mat_dil_b_data338_dout,
        mat_dil_b_data338_num_data_valid => ap_const_lv2_0,
        mat_dil_b_data338_fifo_cap => ap_const_lv2_0,
        mat_dil_b_data338_empty_n => mat_dil_b_data338_empty_n,
        mat_dil_b_data338_read => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_mat_dil_b_data338_read,
        m_axi_rho_AWVALID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWVALID,
        m_axi_rho_AWREADY => m_axi_rho_AWREADY,
        m_axi_rho_AWADDR => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWADDR,
        m_axi_rho_AWID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWID,
        m_axi_rho_AWLEN => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWLEN,
        m_axi_rho_AWSIZE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWSIZE,
        m_axi_rho_AWBURST => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWBURST,
        m_axi_rho_AWLOCK => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWLOCK,
        m_axi_rho_AWCACHE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWCACHE,
        m_axi_rho_AWPROT => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWPROT,
        m_axi_rho_AWQOS => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWQOS,
        m_axi_rho_AWREGION => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWREGION,
        m_axi_rho_AWUSER => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWUSER,
        m_axi_rho_WVALID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WVALID,
        m_axi_rho_WREADY => m_axi_rho_WREADY,
        m_axi_rho_WDATA => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WDATA,
        m_axi_rho_WSTRB => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WSTRB,
        m_axi_rho_WLAST => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WLAST,
        m_axi_rho_WID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WID,
        m_axi_rho_WUSER => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WUSER,
        m_axi_rho_ARVALID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARVALID,
        m_axi_rho_ARREADY => ap_const_logic_0,
        m_axi_rho_ARADDR => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARADDR,
        m_axi_rho_ARID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARID,
        m_axi_rho_ARLEN => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARLEN,
        m_axi_rho_ARSIZE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARSIZE,
        m_axi_rho_ARBURST => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARBURST,
        m_axi_rho_ARLOCK => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARLOCK,
        m_axi_rho_ARCACHE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARCACHE,
        m_axi_rho_ARPROT => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARPROT,
        m_axi_rho_ARQOS => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARQOS,
        m_axi_rho_ARREGION => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARREGION,
        m_axi_rho_ARUSER => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_ARUSER,
        m_axi_rho_RVALID => ap_const_logic_0,
        m_axi_rho_RREADY => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_RREADY,
        m_axi_rho_RDATA => ap_const_lv32_0,
        m_axi_rho_RLAST => ap_const_logic_0,
        m_axi_rho_RID => ap_const_lv1_0,
        m_axi_rho_RFIFONUM => ap_const_lv9_0,
        m_axi_rho_RUSER => ap_const_lv1_0,
        m_axi_rho_RRESP => ap_const_lv2_0,
        m_axi_rho_BVALID => m_axi_rho_BVALID,
        m_axi_rho_BREADY => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_BREADY,
        m_axi_rho_BRESP => m_axi_rho_BRESP,
        m_axi_rho_BID => m_axi_rho_BID,
        m_axi_rho_BUSER => m_axi_rho_BUSER,
        outputrho => outputrho_read_reg_101,
        m_axi_theta_AWVALID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWVALID,
        m_axi_theta_AWREADY => m_axi_theta_AWREADY,
        m_axi_theta_AWADDR => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWADDR,
        m_axi_theta_AWID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWID,
        m_axi_theta_AWLEN => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWLEN,
        m_axi_theta_AWSIZE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWSIZE,
        m_axi_theta_AWBURST => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWBURST,
        m_axi_theta_AWLOCK => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWLOCK,
        m_axi_theta_AWCACHE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWCACHE,
        m_axi_theta_AWPROT => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWPROT,
        m_axi_theta_AWQOS => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWQOS,
        m_axi_theta_AWREGION => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWREGION,
        m_axi_theta_AWUSER => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWUSER,
        m_axi_theta_WVALID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WVALID,
        m_axi_theta_WREADY => m_axi_theta_WREADY,
        m_axi_theta_WDATA => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WDATA,
        m_axi_theta_WSTRB => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WSTRB,
        m_axi_theta_WLAST => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WLAST,
        m_axi_theta_WID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WID,
        m_axi_theta_WUSER => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WUSER,
        m_axi_theta_ARVALID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARVALID,
        m_axi_theta_ARREADY => ap_const_logic_0,
        m_axi_theta_ARADDR => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARADDR,
        m_axi_theta_ARID => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARID,
        m_axi_theta_ARLEN => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARLEN,
        m_axi_theta_ARSIZE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARSIZE,
        m_axi_theta_ARBURST => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARBURST,
        m_axi_theta_ARLOCK => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARLOCK,
        m_axi_theta_ARCACHE => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARCACHE,
        m_axi_theta_ARPROT => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARPROT,
        m_axi_theta_ARQOS => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARQOS,
        m_axi_theta_ARREGION => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARREGION,
        m_axi_theta_ARUSER => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_ARUSER,
        m_axi_theta_RVALID => ap_const_logic_0,
        m_axi_theta_RREADY => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_RREADY,
        m_axi_theta_RDATA => ap_const_lv32_0,
        m_axi_theta_RLAST => ap_const_logic_0,
        m_axi_theta_RID => ap_const_lv1_0,
        m_axi_theta_RFIFONUM => ap_const_lv9_0,
        m_axi_theta_RUSER => ap_const_lv1_0,
        m_axi_theta_RRESP => ap_const_lv2_0,
        m_axi_theta_BVALID => m_axi_theta_BVALID,
        m_axi_theta_BREADY => grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_BREADY,
        m_axi_theta_BRESP => m_axi_theta_BRESP,
        m_axi_theta_BID => m_axi_theta_BID,
        m_axi_theta_BUSER => m_axi_theta_BUSER,
        outputtheta => outputtheta_read_reg_96,
        height => trunc_ln260_reg_106,
        width => trunc_ln260_1_reg_111);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                outputrho_read_reg_101 <= outputrho_dout;
                outputtheta_read_reg_96 <= outputtheta_dout;
                trunc_ln260_1_reg_111 <= trunc_ln260_1_fu_92_p1;
                trunc_ln260_reg_106 <= trunc_ln260_fu_88_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, outputrho_empty_n, outputtheta_empty_n, grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((outputrho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (outputtheta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, outputrho_empty_n, outputtheta_empty_n)
    begin
        if (((outputrho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (outputtheta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done)
    begin
        if ((grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, outputrho_empty_n, outputtheta_empty_n)
    begin
                ap_block_state1 <= ((outputrho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (outputtheta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_ap_start_reg;
    m_axi_rho_ARADDR <= ap_const_lv64_0;
    m_axi_rho_ARBURST <= ap_const_lv2_0;
    m_axi_rho_ARCACHE <= ap_const_lv4_0;
    m_axi_rho_ARID <= ap_const_lv1_0;
    m_axi_rho_ARLEN <= ap_const_lv32_0;
    m_axi_rho_ARLOCK <= ap_const_lv2_0;
    m_axi_rho_ARPROT <= ap_const_lv3_0;
    m_axi_rho_ARQOS <= ap_const_lv4_0;
    m_axi_rho_ARREGION <= ap_const_lv4_0;
    m_axi_rho_ARSIZE <= ap_const_lv3_0;
    m_axi_rho_ARUSER <= ap_const_lv1_0;
    m_axi_rho_ARVALID <= ap_const_logic_0;
    m_axi_rho_AWADDR <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWADDR;
    m_axi_rho_AWBURST <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWBURST;
    m_axi_rho_AWCACHE <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWCACHE;
    m_axi_rho_AWID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWID;
    m_axi_rho_AWLEN <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWLEN;
    m_axi_rho_AWLOCK <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWLOCK;
    m_axi_rho_AWPROT <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWPROT;
    m_axi_rho_AWQOS <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWQOS;
    m_axi_rho_AWREGION <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWREGION;
    m_axi_rho_AWSIZE <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWSIZE;
    m_axi_rho_AWUSER <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWUSER;

    m_axi_rho_AWVALID_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_rho_AWVALID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_AWVALID;
        else 
            m_axi_rho_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_rho_BREADY_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_rho_BREADY <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_BREADY;
        else 
            m_axi_rho_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rho_RREADY <= ap_const_logic_0;
    m_axi_rho_WDATA <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WDATA;
    m_axi_rho_WID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WID;
    m_axi_rho_WLAST <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WLAST;
    m_axi_rho_WSTRB <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WSTRB;
    m_axi_rho_WUSER <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WUSER;

    m_axi_rho_WVALID_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_rho_WVALID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_rho_WVALID;
        else 
            m_axi_rho_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_theta_ARADDR <= ap_const_lv64_0;
    m_axi_theta_ARBURST <= ap_const_lv2_0;
    m_axi_theta_ARCACHE <= ap_const_lv4_0;
    m_axi_theta_ARID <= ap_const_lv1_0;
    m_axi_theta_ARLEN <= ap_const_lv32_0;
    m_axi_theta_ARLOCK <= ap_const_lv2_0;
    m_axi_theta_ARPROT <= ap_const_lv3_0;
    m_axi_theta_ARQOS <= ap_const_lv4_0;
    m_axi_theta_ARREGION <= ap_const_lv4_0;
    m_axi_theta_ARSIZE <= ap_const_lv3_0;
    m_axi_theta_ARUSER <= ap_const_lv1_0;
    m_axi_theta_ARVALID <= ap_const_logic_0;
    m_axi_theta_AWADDR <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWADDR;
    m_axi_theta_AWBURST <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWBURST;
    m_axi_theta_AWCACHE <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWCACHE;
    m_axi_theta_AWID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWID;
    m_axi_theta_AWLEN <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWLEN;
    m_axi_theta_AWLOCK <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWLOCK;
    m_axi_theta_AWPROT <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWPROT;
    m_axi_theta_AWQOS <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWQOS;
    m_axi_theta_AWREGION <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWREGION;
    m_axi_theta_AWSIZE <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWSIZE;
    m_axi_theta_AWUSER <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWUSER;

    m_axi_theta_AWVALID_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_theta_AWVALID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_AWVALID;
        else 
            m_axi_theta_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_theta_BREADY_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_theta_BREADY <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_BREADY;
        else 
            m_axi_theta_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_theta_RREADY <= ap_const_logic_0;
    m_axi_theta_WDATA <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WDATA;
    m_axi_theta_WID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WID;
    m_axi_theta_WLAST <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WLAST;
    m_axi_theta_WSTRB <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WSTRB;
    m_axi_theta_WUSER <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WUSER;

    m_axi_theta_WVALID_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_theta_WVALID <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_m_axi_theta_WVALID;
        else 
            m_axi_theta_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mat_dil_b_data338_read_assign_proc : process(grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_mat_dil_b_data338_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mat_dil_b_data338_read <= grp_xfHoughLines_0_1024_1024_0_1_2_1_6u_3u_32_483_0_180_s_fu_74_mat_dil_b_data338_read;
        else 
            mat_dil_b_data338_read <= ap_const_logic_0;
        end if; 
    end process;


    outputrho_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputrho_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputrho_blk_n <= outputrho_empty_n;
        else 
            outputrho_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outputrho_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputrho_empty_n, outputtheta_empty_n)
    begin
        if ((not(((outputrho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (outputtheta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputrho_read <= ap_const_logic_1;
        else 
            outputrho_read <= ap_const_logic_0;
        end if; 
    end process;


    outputtheta_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputtheta_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputtheta_blk_n <= outputtheta_empty_n;
        else 
            outputtheta_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outputtheta_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputrho_empty_n, outputtheta_empty_n)
    begin
        if ((not(((outputrho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (outputtheta_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputtheta_read <= ap_const_logic_1;
        else 
            outputtheta_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln260_1_fu_92_p1 <= p_read1(12 - 1 downto 0);
    trunc_ln260_fu_88_p1 <= p_read(12 - 1 downto 0);
end behav;
