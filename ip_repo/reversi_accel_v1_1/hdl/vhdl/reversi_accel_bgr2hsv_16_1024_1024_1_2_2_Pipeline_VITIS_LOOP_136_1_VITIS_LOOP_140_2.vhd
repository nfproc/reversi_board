-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_bgr2hsv_16_1024_1024_1_2_2_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_140_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mat_blur_data324_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    mat_blur_data324_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mat_blur_data324_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mat_blur_data324_empty_n : IN STD_LOGIC;
    mat_blur_data324_read : OUT STD_LOGIC;
    mat_hsv_data325_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    mat_hsv_data325_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    mat_hsv_data325_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    mat_hsv_data325_full_n : IN STD_LOGIC;
    mat_hsv_data325_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of reversi_accel_bgr2hsv_16_1024_1024_1_2_2_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_140_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_FF000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011111111000000000000";
    constant ap_const_lv32_7F800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001111111100000000000";
    constant ap_const_lv32_55000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001010101000000000000";
    constant ap_const_lv32_3FC00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000111111110000000000";
    constant ap_const_lv32_33000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000110011000000000000";
    constant ap_const_lv32_2A800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000101010100000000000";
    constant ap_const_lv32_246DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100100011011011011";
    constant ap_const_lv32_1FE00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011111111000000000";
    constant ap_const_lv32_1C555 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011100010101010101";
    constant ap_const_lv32_19800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011001100000000000";
    constant ap_const_lv32_172E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010111001011101001";
    constant ap_const_lv32_15400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010101010000000000";
    constant ap_const_lv32_139D9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010011100111011001";
    constant ap_const_lv32_1236E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010010001101101110";
    constant ap_const_lv32_11000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010001000000000000";
    constant ap_const_lv32_FF00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111111100000000";
    constant ap_const_lv32_F000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111000000000000";
    constant ap_const_lv32_E2AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001110001010101011";
    constant ap_const_lv32_D6BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001101011010111101";
    constant ap_const_lv32_CC00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001100110000000000";
    constant ap_const_lv32_C249 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001100001001001001";
    constant ap_const_lv32_B974 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011100101110100";
    constant ap_const_lv32_B164 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011000101100100";
    constant ap_const_lv32_AA00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010101000000000";
    constant ap_const_lv32_A333 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010001100110011";
    constant ap_const_lv32_9CEC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001001110011101100";
    constant ap_const_lv32_971C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001001011100011100";
    constant ap_const_lv32_91B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001001000110110111";
    constant ap_const_lv32_8CB1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000110010110001";
    constant ap_const_lv32_8800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000100000000000";
    constant ap_const_lv32_839D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000001110011101";
    constant ap_const_lv32_7F80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111111110000000";
    constant ap_const_lv32_7BA3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111101110100011";
    constant ap_const_lv32_7800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111100000000000";
    constant ap_const_lv32_7492 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111010010010010";
    constant ap_const_lv32_7155 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111000101010101";
    constant ap_const_lv32_6E45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110111001000101";
    constant ap_const_lv32_6B5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110101101011110";
    constant ap_const_lv32_689E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110100010011110";
    constant ap_const_lv32_6600 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110011000000000";
    constant ap_const_lv32_6383 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110001110000011";
    constant ap_const_lv32_6125 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110000100100101";
    constant ap_const_lv32_5EE2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101111011100010";
    constant ap_const_lv32_5CBA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101110010111010";
    constant ap_const_lv32_5AAB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101101010101011";
    constant ap_const_lv32_58B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101100010110010";
    constant ap_const_lv32_56CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101011011001111";
    constant ap_const_lv32_5500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101010100000000";
    constant ap_const_lv32_5344 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101001101000100";
    constant ap_const_lv32_519A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101000110011010";
    constant ap_const_lv32_5000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101000000000000";
    constant ap_const_lv32_4E76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100111001110110";
    constant ap_const_lv32_4CFB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100110011111011";
    constant ap_const_lv32_4B8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100101110001110";
    constant ap_const_lv32_4A2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100101000101111";
    constant ap_const_lv32_48DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100100011011011";
    constant ap_const_lv32_4794 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100011110010100";
    constant ap_const_lv32_4658 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100011001011000";
    constant ap_const_lv32_4527 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100010100100111";
    constant ap_const_lv32_4400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100010000000000";
    constant ap_const_lv32_42E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100001011100011";
    constant ap_const_lv32_41CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000111001110";
    constant ap_const_lv32_40C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000011000011";
    constant ap_const_lv32_3FC0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011111111000000";
    constant ap_const_lv32_3EC5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011111011000101";
    constant ap_const_lv32_3DD1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011110111010001";
    constant ap_const_lv32_3CE5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011110011100101";
    constant ap_const_lv32_3C00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011110000000000";
    constant ap_const_lv32_3B21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011101100100001";
    constant ap_const_lv32_3A49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011101001001001";
    constant ap_const_lv32_3977 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011100101110111";
    constant ap_const_lv32_38AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011100010101011";
    constant ap_const_lv32_37E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011011111100100";
    constant ap_const_lv32_3723 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011011100100011";
    constant ap_const_lv32_3666 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011011001100110";
    constant ap_const_lv32_35AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011010110101111";
    constant ap_const_lv32_34FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011010011111101";
    constant ap_const_lv32_344F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011010001001111";
    constant ap_const_lv32_33A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011001110100101";
    constant ap_const_lv32_3300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011001100000000";
    constant ap_const_lv32_325F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011001001011111";
    constant ap_const_lv32_31C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000111000010";
    constant ap_const_lv32_3128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000100101000";
    constant ap_const_lv32_3092 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000010010010";
    constant ap_const_lv32_3000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011000000000000";
    constant ap_const_lv32_2F71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010111101110001";
    constant ap_const_lv32_2EE6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010111011100110";
    constant ap_const_lv32_2E5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010111001011101";
    constant ap_const_lv32_2DD8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010110111011000";
    constant ap_const_lv32_2D55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010110101010101";
    constant ap_const_lv32_2CD6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010110011010110";
    constant ap_const_lv32_2C59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010110001011001";
    constant ap_const_lv32_2BDF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010101111011111";
    constant ap_const_lv32_2B67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010101101100111";
    constant ap_const_lv32_2AF3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010101011110011";
    constant ap_const_lv32_2A80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010101010000000";
    constant ap_const_lv32_2A10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010101000010000";
    constant ap_const_lv32_29A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010100110100010";
    constant ap_const_lv32_2936 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010100100110110";
    constant ap_const_lv32_28CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010100011001101";
    constant ap_const_lv32_2865 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010100001100101";
    constant ap_const_lv32_2800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010100000000000";
    constant ap_const_lv32_279D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011110011101";
    constant ap_const_lv32_273B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100111011";
    constant ap_const_lv32_26DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011011011011";
    constant ap_const_lv32_267E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011001111110";
    constant ap_const_lv32_2621 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011000100001";
    constant ap_const_lv32_25C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010111000111";
    constant ap_const_lv32_256E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010101101110";
    constant ap_const_lv32_2517 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010100010111";
    constant ap_const_lv32_24C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010011000010";
    constant ap_const_lv32_246E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010001101110";
    constant ap_const_lv32_241B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010000011011";
    constant ap_const_lv32_23CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010001111001010";
    constant ap_const_lv32_237A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010001101111010";
    constant ap_const_lv32_232C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010001100101100";
    constant ap_const_lv32_22DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010001011011111";
    constant ap_const_lv32_2294 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010001010010100";
    constant ap_const_lv32_2249 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010001001001001";
    constant ap_const_lv32_2200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010001000000000";
    constant ap_const_lv32_21B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000110111000";
    constant ap_const_lv32_2171 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000101110001";
    constant ap_const_lv32_212C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000100101100";
    constant ap_const_lv32_20E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000011100111";
    constant ap_const_lv32_20A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000010100100";
    constant ap_const_lv32_2062 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000001100010";
    constant ap_const_lv32_2020 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000100000";
    constant ap_const_lv32_1FE0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111111100000";
    constant ap_const_lv32_1FA1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111110100001";
    constant ap_const_lv32_1F62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111101100010";
    constant ap_const_lv32_1F25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111100100101";
    constant ap_const_lv32_1EE9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111011101001";
    constant ap_const_lv32_1EAD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111010101101";
    constant ap_const_lv32_1E73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111001110011";
    constant ap_const_lv32_1E39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111000111001";
    constant ap_const_lv32_1E00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001111000000000";
    constant ap_const_lv32_1DC8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110111001000";
    constant ap_const_lv32_1D91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110110010001";
    constant ap_const_lv32_1D5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110101011010";
    constant ap_const_lv32_1D25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110100100101";
    constant ap_const_lv32_1CF0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110011110000";
    constant ap_const_lv32_1CBB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110010111011";
    constant ap_const_lv32_1C88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110010001000";
    constant ap_const_lv32_1C55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110001010101";
    constant ap_const_lv32_1C23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110000100011";
    constant ap_const_lv32_1BF2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101111110010";
    constant ap_const_lv32_1BC1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101111000001";
    constant ap_const_lv32_1B91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101110010001";
    constant ap_const_lv32_1B62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101101100010";
    constant ap_const_lv32_1B33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101100110011";
    constant ap_const_lv32_1B05 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101100000101";
    constant ap_const_lv32_1AD8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101011011000";
    constant ap_const_lv32_1AAB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101010101011";
    constant ap_const_lv32_1A7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101001111110";
    constant ap_const_lv32_1A53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101001010011";
    constant ap_const_lv32_1A27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101000100111";
    constant ap_const_lv32_19FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100111111101";
    constant ap_const_lv32_19D3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100111010011";
    constant ap_const_lv32_19A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100110101001";
    constant ap_const_lv32_1980 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100110000000";
    constant ap_const_lv32_1957 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100101010111";
    constant ap_const_lv32_192F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100100101111";
    constant ap_const_lv32_1908 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100100001000";
    constant ap_const_lv32_18E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100011100001";
    constant ap_const_lv32_18BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100010111010";
    constant ap_const_lv32_1894 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100010010100";
    constant ap_const_lv32_186E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100001101110";
    constant ap_const_lv32_1849 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100001001001";
    constant ap_const_lv32_1824 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100000100100";
    constant ap_const_lv32_1800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100000000000";
    constant ap_const_lv32_17DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011111011100";
    constant ap_const_lv32_17B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011110111001";
    constant ap_const_lv32_1795 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011110010101";
    constant ap_const_lv32_1773 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011101110011";
    constant ap_const_lv32_1750 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011101010000";
    constant ap_const_lv32_172F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011100101111";
    constant ap_const_lv32_170D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011100001101";
    constant ap_const_lv32_16EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011011101100";
    constant ap_const_lv32_16CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011011001011";
    constant ap_const_lv32_16AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011010101011";
    constant ap_const_lv32_168B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011010001011";
    constant ap_const_lv32_166B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011001101011";
    constant ap_const_lv32_164C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011001001100";
    constant ap_const_lv32_162D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011000101101";
    constant ap_const_lv32_160E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011000001110";
    constant ap_const_lv32_15EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010111101111";
    constant ap_const_lv32_15D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010111010001";
    constant ap_const_lv32_15B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010110110100";
    constant ap_const_lv32_1596 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010110010110";
    constant ap_const_lv32_1579 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010101111001";
    constant ap_const_lv32_155C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010101011100";
    constant ap_const_lv32_1540 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010101000000";
    constant ap_const_lv32_1524 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010100100100";
    constant ap_const_lv32_1508 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010100001000";
    constant ap_const_lv32_14EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010011101100";
    constant ap_const_lv32_14D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010011010001";
    constant ap_const_lv32_14B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010010110110";
    constant ap_const_lv32_149B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010010011011";
    constant ap_const_lv32_1481 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010010000001";
    constant ap_const_lv32_1466 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010001100110";
    constant ap_const_lv32_144C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010001001100";
    constant ap_const_lv32_1433 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010000110011";
    constant ap_const_lv32_1419 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010000011001";
    constant ap_const_lv32_1400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010000000000";
    constant ap_const_lv32_13E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001111100111";
    constant ap_const_lv32_13CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001111001110";
    constant ap_const_lv32_13B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001110110110";
    constant ap_const_lv32_139E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001110011110";
    constant ap_const_lv32_1386 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001110000110";
    constant ap_const_lv32_136E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001101101110";
    constant ap_const_lv32_1356 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001101010110";
    constant ap_const_lv32_133F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001100111111";
    constant ap_const_lv32_1328 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001100101000";
    constant ap_const_lv32_1311 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001100010001";
    constant ap_const_lv32_12FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001011111010";
    constant ap_const_lv32_12E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001011100100";
    constant ap_const_lv32_12CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001011001101";
    constant ap_const_lv32_12B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001010110111";
    constant ap_const_lv32_12A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001010100001";
    constant ap_const_lv32_128C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001010001100";
    constant ap_const_lv32_1276 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001001110110";
    constant ap_const_lv32_1261 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001001100001";
    constant ap_const_lv32_124C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001001001100";
    constant ap_const_lv32_1237 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001000110111";
    constant ap_const_lv32_1222 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001000100010";
    constant ap_const_lv32_120E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001000001110";
    constant ap_const_lv32_11F9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000111111001";
    constant ap_const_lv32_11E5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000111100101";
    constant ap_const_lv32_11D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000111010001";
    constant ap_const_lv32_11BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000110111101";
    constant ap_const_lv32_11AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000110101010";
    constant ap_const_lv32_1196 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000110010110";
    constant ap_const_lv32_1183 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000110000011";
    constant ap_const_lv32_1170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000101110000";
    constant ap_const_lv32_115D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000101011101";
    constant ap_const_lv32_114A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000101001010";
    constant ap_const_lv32_1137 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000100110111";
    constant ap_const_lv32_1125 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000100100101";
    constant ap_const_lv32_1112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000100010010";
    constant ap_const_lv32_1100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000100000000";
    constant ap_const_lv32_10EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000011101110";
    constant ap_const_lv32_10DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000011011100";
    constant ap_const_lv32_10CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000011001010";
    constant ap_const_lv32_10B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000010111001";
    constant ap_const_lv32_10A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000010100111";
    constant ap_const_lv32_1096 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000010010110";
    constant ap_const_lv32_1085 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000010000101";
    constant ap_const_lv32_1074 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000001110100";
    constant ap_const_lv32_1063 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000001100011";
    constant ap_const_lv32_1052 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000001010010";
    constant ap_const_lv32_1041 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000001000001";
    constant ap_const_lv32_1031 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000110001";
    constant ap_const_lv32_1020 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000100000";
    constant ap_const_lv32_1010 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000010000";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1E000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011110000000000000";
    constant ap_const_lv32_A000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010000000000000";
    constant ap_const_lv32_6000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000110000000000000";
    constant ap_const_lv32_4492 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100010010010010";
    constant ap_const_lv32_3555 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011010101010101";
    constant ap_const_lv32_2BA3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010101110100011";
    constant ap_const_lv32_24EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010011101100";
    constant ap_const_lv32_2000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_const_lv32_1C3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001110000111100";
    constant ap_const_lv32_1943 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100101000011";
    constant ap_const_lv32_16DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011011011011";
    constant ap_const_lv32_14DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001010011011111";
    constant ap_const_lv32_1333 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001100110011";
    constant ap_const_lv32_11C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000111000111";
    constant ap_const_lv32_108D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000010001101";
    constant ap_const_lv32_F7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111101111100";
    constant ap_const_lv32_F00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111100000000";
    constant ap_const_lv32_E8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111010001100";
    constant ap_const_lv32_E1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000111000011110";
    constant ap_const_lv32_DB7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110110110111";
    constant ap_const_lv32_D55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110101010101";
    constant ap_const_lv32_CF9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110011111001";
    constant ap_const_lv32_CA2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110010100010";
    constant ap_const_lv32_C4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110001001111";
    constant ap_const_lv32_C00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110000000000";
    constant ap_const_lv32_BB5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101110110101";
    constant ap_const_lv32_B6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101101101110";
    constant ap_const_lv32_B2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101100101010";
    constant ap_const_lv32_AE9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101011101001";
    constant ap_const_lv32_AAB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101010101011";
    constant ap_const_lv32_A6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101001101111";
    constant ap_const_lv32_A36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101000110110";
    constant ap_const_lv32_A00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101000000000";
    constant ap_const_lv32_9CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100111001100";
    constant ap_const_lv32_99A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100110011010";
    constant ap_const_lv32_969 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100101101001";
    constant ap_const_lv32_93B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100100111011";
    constant ap_const_lv32_90E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100100001110";
    constant ap_const_lv32_8E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100011100100";
    constant ap_const_lv32_8BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100010111010";
    constant ap_const_lv32_892 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100010010010";
    constant ap_const_lv32_86C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100001101100";
    constant ap_const_lv32_847 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100001000111";
    constant ap_const_lv32_823 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000100011";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv32_7DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011111011110";
    constant ap_const_lv32_7BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011110111110";
    constant ap_const_lv32_79E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011110011110";
    constant ap_const_lv32_780 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011110000000";
    constant ap_const_lv32_762 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011101100010";
    constant ap_const_lv32_746 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011101000110";
    constant ap_const_lv32_72A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011100101010";
    constant ap_const_lv32_70F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011100001111";
    constant ap_const_lv32_6F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011011110101";
    constant ap_const_lv32_6DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011011011011";
    constant ap_const_lv32_6C3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011011000011";
    constant ap_const_lv32_6AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011010101011";
    constant ap_const_lv32_693 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011010010011";
    constant ap_const_lv32_67D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011001111101";
    constant ap_const_lv32_666 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011001100110";
    constant ap_const_lv32_651 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011001010001";
    constant ap_const_lv32_63C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000111100";
    constant ap_const_lv32_627 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000100111";
    constant ap_const_lv32_613 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000010011";
    constant ap_const_lv32_600 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000000000";
    constant ap_const_lv32_5ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111101101";
    constant ap_const_lv32_5DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111011011";
    constant ap_const_lv32_5C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111001000";
    constant ap_const_lv32_5B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010110110111";
    constant ap_const_lv32_5A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010110100110";
    constant ap_const_lv32_595 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010110010101";
    constant ap_const_lv32_584 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010110000100";
    constant ap_const_lv32_574 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101110100";
    constant ap_const_lv32_565 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101100101";
    constant ap_const_lv32_555 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101010101";
    constant ap_const_lv32_546 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101000110";
    constant ap_const_lv32_538 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100111000";
    constant ap_const_lv32_529 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100101001";
    constant ap_const_lv32_51B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100011011";
    constant ap_const_lv32_50D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100001101";
    constant ap_const_lv32_500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100000000";
    constant ap_const_lv32_4F3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011110011";
    constant ap_const_lv32_4E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011100110";
    constant ap_const_lv32_4D9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011011001";
    constant ap_const_lv32_4CD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011001101";
    constant ap_const_lv32_4C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011000001";
    constant ap_const_lv32_4B5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010110101";
    constant ap_const_lv32_4A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010101001";
    constant ap_const_lv32_49E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010011110";
    constant ap_const_lv32_492 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010010010";
    constant ap_const_lv32_487 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010000111";
    constant ap_const_lv32_47C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001111100";
    constant ap_const_lv32_472 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001110010";
    constant ap_const_lv32_467 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001100111";
    constant ap_const_lv32_45D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001011101";
    constant ap_const_lv32_453 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001010011";
    constant ap_const_lv32_449 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001001001";
    constant ap_const_lv32_43F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000111111";
    constant ap_const_lv32_436 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000110110";
    constant ap_const_lv32_42D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000101101";
    constant ap_const_lv32_423 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000100011";
    constant ap_const_lv32_41A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000011010";
    constant ap_const_lv32_411 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000010001";
    constant ap_const_lv32_409 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000001001";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_3F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111000";
    constant ap_const_lv32_3EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101111";
    constant ap_const_lv32_3E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100111";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv32_3D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111010111";
    constant ap_const_lv32_3CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111001111";
    constant ap_const_lv32_3C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111001000";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111001";
    constant ap_const_lv32_3B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110110001";
    constant ap_const_lv32_3AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110101010";
    constant ap_const_lv32_3A3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100011";
    constant ap_const_lv32_39C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011100";
    constant ap_const_lv32_395 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110010101";
    constant ap_const_lv32_38E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110001110";
    constant ap_const_lv32_388 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110001000";
    constant ap_const_lv32_381 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000001";
    constant ap_const_lv32_37A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111010";
    constant ap_const_lv32_374 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101110100";
    constant ap_const_lv32_36E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101101110";
    constant ap_const_lv32_367 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100111";
    constant ap_const_lv32_361 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100001";
    constant ap_const_lv32_35B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011011";
    constant ap_const_lv32_355 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101010101";
    constant ap_const_lv32_34F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101001111";
    constant ap_const_lv32_34A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101001010";
    constant ap_const_lv32_344 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000100";
    constant ap_const_lv32_33E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111110";
    constant ap_const_lv32_339 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111001";
    constant ap_const_lv32_333 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110011";
    constant ap_const_lv32_32E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101110";
    constant ap_const_lv32_328 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101000";
    constant ap_const_lv32_323 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100011";
    constant ap_const_lv32_31E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011110";
    constant ap_const_lv32_319 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011001";
    constant ap_const_lv32_314 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010100";
    constant ap_const_lv32_30F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001111";
    constant ap_const_lv32_30A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001010";
    constant ap_const_lv32_305 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000101";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_2FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111011";
    constant ap_const_lv32_2F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110111";
    constant ap_const_lv32_2F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110010";
    constant ap_const_lv32_2ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101101";
    constant ap_const_lv32_2E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101001";
    constant ap_const_lv32_2E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100100";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011011";
    constant ap_const_lv32_2D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010111";
    constant ap_const_lv32_2D3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010011";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv32_2CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001010";
    constant ap_const_lv32_2C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000110";
    constant ap_const_lv32_2C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000010";
    constant ap_const_lv32_2BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111110";
    constant ap_const_lv32_2BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111010";
    constant ap_const_lv32_2B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110110";
    constant ap_const_lv32_2B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110010";
    constant ap_const_lv32_2AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101110";
    constant ap_const_lv32_2AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101011";
    constant ap_const_lv32_2A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100111";
    constant ap_const_lv32_2A3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100011";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_29C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011100";
    constant ap_const_lv32_298 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011000";
    constant ap_const_lv32_295 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010101";
    constant ap_const_lv32_291 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010001";
    constant ap_const_lv32_28E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001110";
    constant ap_const_lv32_28A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001010";
    constant ap_const_lv32_287 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000111";
    constant ap_const_lv32_283 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000011";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_27D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111101";
    constant ap_const_lv32_279 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111001";
    constant ap_const_lv32_276 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110110";
    constant ap_const_lv32_273 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110011";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_26D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101101";
    constant ap_const_lv32_269 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101001";
    constant ap_const_lv32_266 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100110";
    constant ap_const_lv32_263 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100011";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_25D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011101";
    constant ap_const_lv32_25A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011010";
    constant ap_const_lv32_257 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010111";
    constant ap_const_lv32_255 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010101";
    constant ap_const_lv32_252 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010010";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_24C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001100";
    constant ap_const_lv32_249 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001001";
    constant ap_const_lv32_246 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000110";
    constant ap_const_lv32_244 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000100";
    constant ap_const_lv32_241 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000001";
    constant ap_const_lv32_23E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111110";
    constant ap_const_lv32_23C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111100";
    constant ap_const_lv32_239 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111001";
    constant ap_const_lv32_236 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110110";
    constant ap_const_lv32_234 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110100";
    constant ap_const_lv32_231 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110001";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_22C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101100";
    constant ap_const_lv32_22A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101010";
    constant ap_const_lv32_227 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100111";
    constant ap_const_lv32_225 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100101";
    constant ap_const_lv32_222 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100010";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_21D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011101";
    constant ap_const_lv32_21B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011011";
    constant ap_const_lv32_219 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011001";
    constant ap_const_lv32_216 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010110";
    constant ap_const_lv32_214 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010100";
    constant ap_const_lv32_212 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010010";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_20D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001101";
    constant ap_const_lv32_20B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001011";
    constant ap_const_lv32_209 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001001";
    constant ap_const_lv32_206 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000110";
    constant ap_const_lv32_204 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000100";
    constant ap_const_lv32_202 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000010";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_1FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111110";
    constant ap_const_lv32_1FC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111100";
    constant ap_const_lv32_1FA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111010";
    constant ap_const_lv32_1F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111000";
    constant ap_const_lv32_1F6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110110";
    constant ap_const_lv32_1F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110100";
    constant ap_const_lv32_1F1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110001";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101101";
    constant ap_const_lv32_1EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101100";
    constant ap_const_lv32_1EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101010";
    constant ap_const_lv32_1E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101000";
    constant ap_const_lv32_1E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100110";
    constant ap_const_lv32_1E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100100";
    constant ap_const_lv32_1E2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_800 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln136_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce0 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce1 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce2 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce3 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mat_blur_data324_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mat_hsv_data325_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal b_V_fu_1194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_2633 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_2633_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_2633_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal b_V_reg_2633_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_2640 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_2640_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_2640_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal g_V_reg_2640_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_2646 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_2646_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_2646_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_2646_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln130_fu_1218_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_reg_2652 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_reg_2652_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_reg_2652_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_reg_2652_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_reg_2652_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1542_fu_1221_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1542_reg_2660 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1542_reg_2660_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1542_reg_2660_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1542_reg_2660_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1542_reg_2660_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_reg_2672 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_reg_2672_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_3_fu_1245_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal v_3_reg_2677 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_1_fu_1265_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln130_1_reg_2687 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1542_1_fu_1268_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1542_1_reg_2692 : STD_LOGIC_VECTOR (9 downto 0);
    signal vmin_V_fu_1288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal vmin_V_reg_2702 : STD_LOGIC_VECTOR (7 downto 0);
    signal vmin_V_reg_2702_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_fu_1297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal v_reg_2708 : STD_LOGIC_VECTOR (9 downto 0);
    signal v_reg_2708_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln232_13_fu_1305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_13_reg_2713 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_13_reg_2713_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln232_fu_1330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_2724 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_2724_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_2724_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_2724_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_2724_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_reg_2724_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal vr_fu_1335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vr_reg_2730 : STD_LOGIC_VECTOR (0 downto 0);
    signal vr_reg_2730_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_reg_2736 : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_reg_2736_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal diff_V_fu_1354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal diff_V_reg_2742 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_fu_2023_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_reg_2760 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_2029_p258 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2765 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln166_reg_2775 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln169_fu_2585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln169_reg_2780 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_2785 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln587_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_121_fu_1260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln587_fu_1283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_122_fu_1320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_fu_1098 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln136_fu_1183_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ret_V_17_fu_1224_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1541_fu_1230_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln155_fu_1241_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_19_fu_1250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_8_fu_1254_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_18_fu_1271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_1277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln156_fu_1293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln232_fu_1302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_20_fu_1308_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_10_fu_1314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln232_6_fu_1325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1065_fu_1340_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln232_fu_1349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_3_fu_1373_p258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_21_fu_1897_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln133_fu_1359_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_14_fu_1901_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln165_fu_1911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_15_fu_1924_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_1932_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln165_fu_1939_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln165_fu_1928_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln165_fu_1943_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln133_1_fu_1366_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln165_fu_1949_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln165_1_fu_1959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_16_fu_1972_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln165_1_fu_1980_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln165_1_fu_1987_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln165_2_fu_1976_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln165_1_fu_1991_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1542_1_fu_1964_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln165_1_fu_1997_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln165_3_fu_2003_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln165_1_fu_1955_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln165_2_fu_2007_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1542_fu_1916_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln165_2_fu_2013_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln165_4_fu_2019_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1543_fu_1907_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln166_fu_2554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_2559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln167_fu_2577_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_1_fu_2567_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_fu_2591_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_2608_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_2608_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_2608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2608_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2549_ce : STD_LOGIC;
    signal grp_fu_2608_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_2608_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_mux_25610_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        din101_WIDTH : INTEGER;
        din102_WIDTH : INTEGER;
        din103_WIDTH : INTEGER;
        din104_WIDTH : INTEGER;
        din105_WIDTH : INTEGER;
        din106_WIDTH : INTEGER;
        din107_WIDTH : INTEGER;
        din108_WIDTH : INTEGER;
        din109_WIDTH : INTEGER;
        din110_WIDTH : INTEGER;
        din111_WIDTH : INTEGER;
        din112_WIDTH : INTEGER;
        din113_WIDTH : INTEGER;
        din114_WIDTH : INTEGER;
        din115_WIDTH : INTEGER;
        din116_WIDTH : INTEGER;
        din117_WIDTH : INTEGER;
        din118_WIDTH : INTEGER;
        din119_WIDTH : INTEGER;
        din120_WIDTH : INTEGER;
        din121_WIDTH : INTEGER;
        din122_WIDTH : INTEGER;
        din123_WIDTH : INTEGER;
        din124_WIDTH : INTEGER;
        din125_WIDTH : INTEGER;
        din126_WIDTH : INTEGER;
        din127_WIDTH : INTEGER;
        din128_WIDTH : INTEGER;
        din129_WIDTH : INTEGER;
        din130_WIDTH : INTEGER;
        din131_WIDTH : INTEGER;
        din132_WIDTH : INTEGER;
        din133_WIDTH : INTEGER;
        din134_WIDTH : INTEGER;
        din135_WIDTH : INTEGER;
        din136_WIDTH : INTEGER;
        din137_WIDTH : INTEGER;
        din138_WIDTH : INTEGER;
        din139_WIDTH : INTEGER;
        din140_WIDTH : INTEGER;
        din141_WIDTH : INTEGER;
        din142_WIDTH : INTEGER;
        din143_WIDTH : INTEGER;
        din144_WIDTH : INTEGER;
        din145_WIDTH : INTEGER;
        din146_WIDTH : INTEGER;
        din147_WIDTH : INTEGER;
        din148_WIDTH : INTEGER;
        din149_WIDTH : INTEGER;
        din150_WIDTH : INTEGER;
        din151_WIDTH : INTEGER;
        din152_WIDTH : INTEGER;
        din153_WIDTH : INTEGER;
        din154_WIDTH : INTEGER;
        din155_WIDTH : INTEGER;
        din156_WIDTH : INTEGER;
        din157_WIDTH : INTEGER;
        din158_WIDTH : INTEGER;
        din159_WIDTH : INTEGER;
        din160_WIDTH : INTEGER;
        din161_WIDTH : INTEGER;
        din162_WIDTH : INTEGER;
        din163_WIDTH : INTEGER;
        din164_WIDTH : INTEGER;
        din165_WIDTH : INTEGER;
        din166_WIDTH : INTEGER;
        din167_WIDTH : INTEGER;
        din168_WIDTH : INTEGER;
        din169_WIDTH : INTEGER;
        din170_WIDTH : INTEGER;
        din171_WIDTH : INTEGER;
        din172_WIDTH : INTEGER;
        din173_WIDTH : INTEGER;
        din174_WIDTH : INTEGER;
        din175_WIDTH : INTEGER;
        din176_WIDTH : INTEGER;
        din177_WIDTH : INTEGER;
        din178_WIDTH : INTEGER;
        din179_WIDTH : INTEGER;
        din180_WIDTH : INTEGER;
        din181_WIDTH : INTEGER;
        din182_WIDTH : INTEGER;
        din183_WIDTH : INTEGER;
        din184_WIDTH : INTEGER;
        din185_WIDTH : INTEGER;
        din186_WIDTH : INTEGER;
        din187_WIDTH : INTEGER;
        din188_WIDTH : INTEGER;
        din189_WIDTH : INTEGER;
        din190_WIDTH : INTEGER;
        din191_WIDTH : INTEGER;
        din192_WIDTH : INTEGER;
        din193_WIDTH : INTEGER;
        din194_WIDTH : INTEGER;
        din195_WIDTH : INTEGER;
        din196_WIDTH : INTEGER;
        din197_WIDTH : INTEGER;
        din198_WIDTH : INTEGER;
        din199_WIDTH : INTEGER;
        din200_WIDTH : INTEGER;
        din201_WIDTH : INTEGER;
        din202_WIDTH : INTEGER;
        din203_WIDTH : INTEGER;
        din204_WIDTH : INTEGER;
        din205_WIDTH : INTEGER;
        din206_WIDTH : INTEGER;
        din207_WIDTH : INTEGER;
        din208_WIDTH : INTEGER;
        din209_WIDTH : INTEGER;
        din210_WIDTH : INTEGER;
        din211_WIDTH : INTEGER;
        din212_WIDTH : INTEGER;
        din213_WIDTH : INTEGER;
        din214_WIDTH : INTEGER;
        din215_WIDTH : INTEGER;
        din216_WIDTH : INTEGER;
        din217_WIDTH : INTEGER;
        din218_WIDTH : INTEGER;
        din219_WIDTH : INTEGER;
        din220_WIDTH : INTEGER;
        din221_WIDTH : INTEGER;
        din222_WIDTH : INTEGER;
        din223_WIDTH : INTEGER;
        din224_WIDTH : INTEGER;
        din225_WIDTH : INTEGER;
        din226_WIDTH : INTEGER;
        din227_WIDTH : INTEGER;
        din228_WIDTH : INTEGER;
        din229_WIDTH : INTEGER;
        din230_WIDTH : INTEGER;
        din231_WIDTH : INTEGER;
        din232_WIDTH : INTEGER;
        din233_WIDTH : INTEGER;
        din234_WIDTH : INTEGER;
        din235_WIDTH : INTEGER;
        din236_WIDTH : INTEGER;
        din237_WIDTH : INTEGER;
        din238_WIDTH : INTEGER;
        din239_WIDTH : INTEGER;
        din240_WIDTH : INTEGER;
        din241_WIDTH : INTEGER;
        din242_WIDTH : INTEGER;
        din243_WIDTH : INTEGER;
        din244_WIDTH : INTEGER;
        din245_WIDTH : INTEGER;
        din246_WIDTH : INTEGER;
        din247_WIDTH : INTEGER;
        din248_WIDTH : INTEGER;
        din249_WIDTH : INTEGER;
        din250_WIDTH : INTEGER;
        din251_WIDTH : INTEGER;
        din252_WIDTH : INTEGER;
        din253_WIDTH : INTEGER;
        din254_WIDTH : INTEGER;
        din255_WIDTH : INTEGER;
        din256_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (31 downto 0);
        din65 : IN STD_LOGIC_VECTOR (31 downto 0);
        din66 : IN STD_LOGIC_VECTOR (31 downto 0);
        din67 : IN STD_LOGIC_VECTOR (31 downto 0);
        din68 : IN STD_LOGIC_VECTOR (31 downto 0);
        din69 : IN STD_LOGIC_VECTOR (31 downto 0);
        din70 : IN STD_LOGIC_VECTOR (31 downto 0);
        din71 : IN STD_LOGIC_VECTOR (31 downto 0);
        din72 : IN STD_LOGIC_VECTOR (31 downto 0);
        din73 : IN STD_LOGIC_VECTOR (31 downto 0);
        din74 : IN STD_LOGIC_VECTOR (31 downto 0);
        din75 : IN STD_LOGIC_VECTOR (31 downto 0);
        din76 : IN STD_LOGIC_VECTOR (31 downto 0);
        din77 : IN STD_LOGIC_VECTOR (31 downto 0);
        din78 : IN STD_LOGIC_VECTOR (31 downto 0);
        din79 : IN STD_LOGIC_VECTOR (31 downto 0);
        din80 : IN STD_LOGIC_VECTOR (31 downto 0);
        din81 : IN STD_LOGIC_VECTOR (31 downto 0);
        din82 : IN STD_LOGIC_VECTOR (31 downto 0);
        din83 : IN STD_LOGIC_VECTOR (31 downto 0);
        din84 : IN STD_LOGIC_VECTOR (31 downto 0);
        din85 : IN STD_LOGIC_VECTOR (31 downto 0);
        din86 : IN STD_LOGIC_VECTOR (31 downto 0);
        din87 : IN STD_LOGIC_VECTOR (31 downto 0);
        din88 : IN STD_LOGIC_VECTOR (31 downto 0);
        din89 : IN STD_LOGIC_VECTOR (31 downto 0);
        din90 : IN STD_LOGIC_VECTOR (31 downto 0);
        din91 : IN STD_LOGIC_VECTOR (31 downto 0);
        din92 : IN STD_LOGIC_VECTOR (31 downto 0);
        din93 : IN STD_LOGIC_VECTOR (31 downto 0);
        din94 : IN STD_LOGIC_VECTOR (31 downto 0);
        din95 : IN STD_LOGIC_VECTOR (31 downto 0);
        din96 : IN STD_LOGIC_VECTOR (31 downto 0);
        din97 : IN STD_LOGIC_VECTOR (31 downto 0);
        din98 : IN STD_LOGIC_VECTOR (31 downto 0);
        din99 : IN STD_LOGIC_VECTOR (31 downto 0);
        din100 : IN STD_LOGIC_VECTOR (31 downto 0);
        din101 : IN STD_LOGIC_VECTOR (31 downto 0);
        din102 : IN STD_LOGIC_VECTOR (31 downto 0);
        din103 : IN STD_LOGIC_VECTOR (31 downto 0);
        din104 : IN STD_LOGIC_VECTOR (31 downto 0);
        din105 : IN STD_LOGIC_VECTOR (31 downto 0);
        din106 : IN STD_LOGIC_VECTOR (31 downto 0);
        din107 : IN STD_LOGIC_VECTOR (31 downto 0);
        din108 : IN STD_LOGIC_VECTOR (31 downto 0);
        din109 : IN STD_LOGIC_VECTOR (31 downto 0);
        din110 : IN STD_LOGIC_VECTOR (31 downto 0);
        din111 : IN STD_LOGIC_VECTOR (31 downto 0);
        din112 : IN STD_LOGIC_VECTOR (31 downto 0);
        din113 : IN STD_LOGIC_VECTOR (31 downto 0);
        din114 : IN STD_LOGIC_VECTOR (31 downto 0);
        din115 : IN STD_LOGIC_VECTOR (31 downto 0);
        din116 : IN STD_LOGIC_VECTOR (31 downto 0);
        din117 : IN STD_LOGIC_VECTOR (31 downto 0);
        din118 : IN STD_LOGIC_VECTOR (31 downto 0);
        din119 : IN STD_LOGIC_VECTOR (31 downto 0);
        din120 : IN STD_LOGIC_VECTOR (31 downto 0);
        din121 : IN STD_LOGIC_VECTOR (31 downto 0);
        din122 : IN STD_LOGIC_VECTOR (31 downto 0);
        din123 : IN STD_LOGIC_VECTOR (31 downto 0);
        din124 : IN STD_LOGIC_VECTOR (31 downto 0);
        din125 : IN STD_LOGIC_VECTOR (31 downto 0);
        din126 : IN STD_LOGIC_VECTOR (31 downto 0);
        din127 : IN STD_LOGIC_VECTOR (31 downto 0);
        din128 : IN STD_LOGIC_VECTOR (31 downto 0);
        din129 : IN STD_LOGIC_VECTOR (31 downto 0);
        din130 : IN STD_LOGIC_VECTOR (31 downto 0);
        din131 : IN STD_LOGIC_VECTOR (31 downto 0);
        din132 : IN STD_LOGIC_VECTOR (31 downto 0);
        din133 : IN STD_LOGIC_VECTOR (31 downto 0);
        din134 : IN STD_LOGIC_VECTOR (31 downto 0);
        din135 : IN STD_LOGIC_VECTOR (31 downto 0);
        din136 : IN STD_LOGIC_VECTOR (31 downto 0);
        din137 : IN STD_LOGIC_VECTOR (31 downto 0);
        din138 : IN STD_LOGIC_VECTOR (31 downto 0);
        din139 : IN STD_LOGIC_VECTOR (31 downto 0);
        din140 : IN STD_LOGIC_VECTOR (31 downto 0);
        din141 : IN STD_LOGIC_VECTOR (31 downto 0);
        din142 : IN STD_LOGIC_VECTOR (31 downto 0);
        din143 : IN STD_LOGIC_VECTOR (31 downto 0);
        din144 : IN STD_LOGIC_VECTOR (31 downto 0);
        din145 : IN STD_LOGIC_VECTOR (31 downto 0);
        din146 : IN STD_LOGIC_VECTOR (31 downto 0);
        din147 : IN STD_LOGIC_VECTOR (31 downto 0);
        din148 : IN STD_LOGIC_VECTOR (31 downto 0);
        din149 : IN STD_LOGIC_VECTOR (31 downto 0);
        din150 : IN STD_LOGIC_VECTOR (31 downto 0);
        din151 : IN STD_LOGIC_VECTOR (31 downto 0);
        din152 : IN STD_LOGIC_VECTOR (31 downto 0);
        din153 : IN STD_LOGIC_VECTOR (31 downto 0);
        din154 : IN STD_LOGIC_VECTOR (31 downto 0);
        din155 : IN STD_LOGIC_VECTOR (31 downto 0);
        din156 : IN STD_LOGIC_VECTOR (31 downto 0);
        din157 : IN STD_LOGIC_VECTOR (31 downto 0);
        din158 : IN STD_LOGIC_VECTOR (31 downto 0);
        din159 : IN STD_LOGIC_VECTOR (31 downto 0);
        din160 : IN STD_LOGIC_VECTOR (31 downto 0);
        din161 : IN STD_LOGIC_VECTOR (31 downto 0);
        din162 : IN STD_LOGIC_VECTOR (31 downto 0);
        din163 : IN STD_LOGIC_VECTOR (31 downto 0);
        din164 : IN STD_LOGIC_VECTOR (31 downto 0);
        din165 : IN STD_LOGIC_VECTOR (31 downto 0);
        din166 : IN STD_LOGIC_VECTOR (31 downto 0);
        din167 : IN STD_LOGIC_VECTOR (31 downto 0);
        din168 : IN STD_LOGIC_VECTOR (31 downto 0);
        din169 : IN STD_LOGIC_VECTOR (31 downto 0);
        din170 : IN STD_LOGIC_VECTOR (31 downto 0);
        din171 : IN STD_LOGIC_VECTOR (31 downto 0);
        din172 : IN STD_LOGIC_VECTOR (31 downto 0);
        din173 : IN STD_LOGIC_VECTOR (31 downto 0);
        din174 : IN STD_LOGIC_VECTOR (31 downto 0);
        din175 : IN STD_LOGIC_VECTOR (31 downto 0);
        din176 : IN STD_LOGIC_VECTOR (31 downto 0);
        din177 : IN STD_LOGIC_VECTOR (31 downto 0);
        din178 : IN STD_LOGIC_VECTOR (31 downto 0);
        din179 : IN STD_LOGIC_VECTOR (31 downto 0);
        din180 : IN STD_LOGIC_VECTOR (31 downto 0);
        din181 : IN STD_LOGIC_VECTOR (31 downto 0);
        din182 : IN STD_LOGIC_VECTOR (31 downto 0);
        din183 : IN STD_LOGIC_VECTOR (31 downto 0);
        din184 : IN STD_LOGIC_VECTOR (31 downto 0);
        din185 : IN STD_LOGIC_VECTOR (31 downto 0);
        din186 : IN STD_LOGIC_VECTOR (31 downto 0);
        din187 : IN STD_LOGIC_VECTOR (31 downto 0);
        din188 : IN STD_LOGIC_VECTOR (31 downto 0);
        din189 : IN STD_LOGIC_VECTOR (31 downto 0);
        din190 : IN STD_LOGIC_VECTOR (31 downto 0);
        din191 : IN STD_LOGIC_VECTOR (31 downto 0);
        din192 : IN STD_LOGIC_VECTOR (31 downto 0);
        din193 : IN STD_LOGIC_VECTOR (31 downto 0);
        din194 : IN STD_LOGIC_VECTOR (31 downto 0);
        din195 : IN STD_LOGIC_VECTOR (31 downto 0);
        din196 : IN STD_LOGIC_VECTOR (31 downto 0);
        din197 : IN STD_LOGIC_VECTOR (31 downto 0);
        din198 : IN STD_LOGIC_VECTOR (31 downto 0);
        din199 : IN STD_LOGIC_VECTOR (31 downto 0);
        din200 : IN STD_LOGIC_VECTOR (31 downto 0);
        din201 : IN STD_LOGIC_VECTOR (31 downto 0);
        din202 : IN STD_LOGIC_VECTOR (31 downto 0);
        din203 : IN STD_LOGIC_VECTOR (31 downto 0);
        din204 : IN STD_LOGIC_VECTOR (31 downto 0);
        din205 : IN STD_LOGIC_VECTOR (31 downto 0);
        din206 : IN STD_LOGIC_VECTOR (31 downto 0);
        din207 : IN STD_LOGIC_VECTOR (31 downto 0);
        din208 : IN STD_LOGIC_VECTOR (31 downto 0);
        din209 : IN STD_LOGIC_VECTOR (31 downto 0);
        din210 : IN STD_LOGIC_VECTOR (31 downto 0);
        din211 : IN STD_LOGIC_VECTOR (31 downto 0);
        din212 : IN STD_LOGIC_VECTOR (31 downto 0);
        din213 : IN STD_LOGIC_VECTOR (31 downto 0);
        din214 : IN STD_LOGIC_VECTOR (31 downto 0);
        din215 : IN STD_LOGIC_VECTOR (31 downto 0);
        din216 : IN STD_LOGIC_VECTOR (31 downto 0);
        din217 : IN STD_LOGIC_VECTOR (31 downto 0);
        din218 : IN STD_LOGIC_VECTOR (31 downto 0);
        din219 : IN STD_LOGIC_VECTOR (31 downto 0);
        din220 : IN STD_LOGIC_VECTOR (31 downto 0);
        din221 : IN STD_LOGIC_VECTOR (31 downto 0);
        din222 : IN STD_LOGIC_VECTOR (31 downto 0);
        din223 : IN STD_LOGIC_VECTOR (31 downto 0);
        din224 : IN STD_LOGIC_VECTOR (31 downto 0);
        din225 : IN STD_LOGIC_VECTOR (31 downto 0);
        din226 : IN STD_LOGIC_VECTOR (31 downto 0);
        din227 : IN STD_LOGIC_VECTOR (31 downto 0);
        din228 : IN STD_LOGIC_VECTOR (31 downto 0);
        din229 : IN STD_LOGIC_VECTOR (31 downto 0);
        din230 : IN STD_LOGIC_VECTOR (31 downto 0);
        din231 : IN STD_LOGIC_VECTOR (31 downto 0);
        din232 : IN STD_LOGIC_VECTOR (31 downto 0);
        din233 : IN STD_LOGIC_VECTOR (31 downto 0);
        din234 : IN STD_LOGIC_VECTOR (31 downto 0);
        din235 : IN STD_LOGIC_VECTOR (31 downto 0);
        din236 : IN STD_LOGIC_VECTOR (31 downto 0);
        din237 : IN STD_LOGIC_VECTOR (31 downto 0);
        din238 : IN STD_LOGIC_VECTOR (31 downto 0);
        din239 : IN STD_LOGIC_VECTOR (31 downto 0);
        din240 : IN STD_LOGIC_VECTOR (31 downto 0);
        din241 : IN STD_LOGIC_VECTOR (31 downto 0);
        din242 : IN STD_LOGIC_VECTOR (31 downto 0);
        din243 : IN STD_LOGIC_VECTOR (31 downto 0);
        din244 : IN STD_LOGIC_VECTOR (31 downto 0);
        din245 : IN STD_LOGIC_VECTOR (31 downto 0);
        din246 : IN STD_LOGIC_VECTOR (31 downto 0);
        din247 : IN STD_LOGIC_VECTOR (31 downto 0);
        din248 : IN STD_LOGIC_VECTOR (31 downto 0);
        din249 : IN STD_LOGIC_VECTOR (31 downto 0);
        din250 : IN STD_LOGIC_VECTOR (31 downto 0);
        din251 : IN STD_LOGIC_VECTOR (31 downto 0);
        din252 : IN STD_LOGIC_VECTOR (31 downto 0);
        din253 : IN STD_LOGIC_VECTOR (31 downto 0);
        din254 : IN STD_LOGIC_VECTOR (31 downto 0);
        din255 : IN STD_LOGIC_VECTOR (31 downto 0);
        din256 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reversi_accel_mux_2568_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        din101_WIDTH : INTEGER;
        din102_WIDTH : INTEGER;
        din103_WIDTH : INTEGER;
        din104_WIDTH : INTEGER;
        din105_WIDTH : INTEGER;
        din106_WIDTH : INTEGER;
        din107_WIDTH : INTEGER;
        din108_WIDTH : INTEGER;
        din109_WIDTH : INTEGER;
        din110_WIDTH : INTEGER;
        din111_WIDTH : INTEGER;
        din112_WIDTH : INTEGER;
        din113_WIDTH : INTEGER;
        din114_WIDTH : INTEGER;
        din115_WIDTH : INTEGER;
        din116_WIDTH : INTEGER;
        din117_WIDTH : INTEGER;
        din118_WIDTH : INTEGER;
        din119_WIDTH : INTEGER;
        din120_WIDTH : INTEGER;
        din121_WIDTH : INTEGER;
        din122_WIDTH : INTEGER;
        din123_WIDTH : INTEGER;
        din124_WIDTH : INTEGER;
        din125_WIDTH : INTEGER;
        din126_WIDTH : INTEGER;
        din127_WIDTH : INTEGER;
        din128_WIDTH : INTEGER;
        din129_WIDTH : INTEGER;
        din130_WIDTH : INTEGER;
        din131_WIDTH : INTEGER;
        din132_WIDTH : INTEGER;
        din133_WIDTH : INTEGER;
        din134_WIDTH : INTEGER;
        din135_WIDTH : INTEGER;
        din136_WIDTH : INTEGER;
        din137_WIDTH : INTEGER;
        din138_WIDTH : INTEGER;
        din139_WIDTH : INTEGER;
        din140_WIDTH : INTEGER;
        din141_WIDTH : INTEGER;
        din142_WIDTH : INTEGER;
        din143_WIDTH : INTEGER;
        din144_WIDTH : INTEGER;
        din145_WIDTH : INTEGER;
        din146_WIDTH : INTEGER;
        din147_WIDTH : INTEGER;
        din148_WIDTH : INTEGER;
        din149_WIDTH : INTEGER;
        din150_WIDTH : INTEGER;
        din151_WIDTH : INTEGER;
        din152_WIDTH : INTEGER;
        din153_WIDTH : INTEGER;
        din154_WIDTH : INTEGER;
        din155_WIDTH : INTEGER;
        din156_WIDTH : INTEGER;
        din157_WIDTH : INTEGER;
        din158_WIDTH : INTEGER;
        din159_WIDTH : INTEGER;
        din160_WIDTH : INTEGER;
        din161_WIDTH : INTEGER;
        din162_WIDTH : INTEGER;
        din163_WIDTH : INTEGER;
        din164_WIDTH : INTEGER;
        din165_WIDTH : INTEGER;
        din166_WIDTH : INTEGER;
        din167_WIDTH : INTEGER;
        din168_WIDTH : INTEGER;
        din169_WIDTH : INTEGER;
        din170_WIDTH : INTEGER;
        din171_WIDTH : INTEGER;
        din172_WIDTH : INTEGER;
        din173_WIDTH : INTEGER;
        din174_WIDTH : INTEGER;
        din175_WIDTH : INTEGER;
        din176_WIDTH : INTEGER;
        din177_WIDTH : INTEGER;
        din178_WIDTH : INTEGER;
        din179_WIDTH : INTEGER;
        din180_WIDTH : INTEGER;
        din181_WIDTH : INTEGER;
        din182_WIDTH : INTEGER;
        din183_WIDTH : INTEGER;
        din184_WIDTH : INTEGER;
        din185_WIDTH : INTEGER;
        din186_WIDTH : INTEGER;
        din187_WIDTH : INTEGER;
        din188_WIDTH : INTEGER;
        din189_WIDTH : INTEGER;
        din190_WIDTH : INTEGER;
        din191_WIDTH : INTEGER;
        din192_WIDTH : INTEGER;
        din193_WIDTH : INTEGER;
        din194_WIDTH : INTEGER;
        din195_WIDTH : INTEGER;
        din196_WIDTH : INTEGER;
        din197_WIDTH : INTEGER;
        din198_WIDTH : INTEGER;
        din199_WIDTH : INTEGER;
        din200_WIDTH : INTEGER;
        din201_WIDTH : INTEGER;
        din202_WIDTH : INTEGER;
        din203_WIDTH : INTEGER;
        din204_WIDTH : INTEGER;
        din205_WIDTH : INTEGER;
        din206_WIDTH : INTEGER;
        din207_WIDTH : INTEGER;
        din208_WIDTH : INTEGER;
        din209_WIDTH : INTEGER;
        din210_WIDTH : INTEGER;
        din211_WIDTH : INTEGER;
        din212_WIDTH : INTEGER;
        din213_WIDTH : INTEGER;
        din214_WIDTH : INTEGER;
        din215_WIDTH : INTEGER;
        din216_WIDTH : INTEGER;
        din217_WIDTH : INTEGER;
        din218_WIDTH : INTEGER;
        din219_WIDTH : INTEGER;
        din220_WIDTH : INTEGER;
        din221_WIDTH : INTEGER;
        din222_WIDTH : INTEGER;
        din223_WIDTH : INTEGER;
        din224_WIDTH : INTEGER;
        din225_WIDTH : INTEGER;
        din226_WIDTH : INTEGER;
        din227_WIDTH : INTEGER;
        din228_WIDTH : INTEGER;
        din229_WIDTH : INTEGER;
        din230_WIDTH : INTEGER;
        din231_WIDTH : INTEGER;
        din232_WIDTH : INTEGER;
        din233_WIDTH : INTEGER;
        din234_WIDTH : INTEGER;
        din235_WIDTH : INTEGER;
        din236_WIDTH : INTEGER;
        din237_WIDTH : INTEGER;
        din238_WIDTH : INTEGER;
        din239_WIDTH : INTEGER;
        din240_WIDTH : INTEGER;
        din241_WIDTH : INTEGER;
        din242_WIDTH : INTEGER;
        din243_WIDTH : INTEGER;
        din244_WIDTH : INTEGER;
        din245_WIDTH : INTEGER;
        din246_WIDTH : INTEGER;
        din247_WIDTH : INTEGER;
        din248_WIDTH : INTEGER;
        din249_WIDTH : INTEGER;
        din250_WIDTH : INTEGER;
        din251_WIDTH : INTEGER;
        din252_WIDTH : INTEGER;
        din253_WIDTH : INTEGER;
        din254_WIDTH : INTEGER;
        din255_WIDTH : INTEGER;
        din256_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (31 downto 0);
        din65 : IN STD_LOGIC_VECTOR (31 downto 0);
        din66 : IN STD_LOGIC_VECTOR (31 downto 0);
        din67 : IN STD_LOGIC_VECTOR (31 downto 0);
        din68 : IN STD_LOGIC_VECTOR (31 downto 0);
        din69 : IN STD_LOGIC_VECTOR (31 downto 0);
        din70 : IN STD_LOGIC_VECTOR (31 downto 0);
        din71 : IN STD_LOGIC_VECTOR (31 downto 0);
        din72 : IN STD_LOGIC_VECTOR (31 downto 0);
        din73 : IN STD_LOGIC_VECTOR (31 downto 0);
        din74 : IN STD_LOGIC_VECTOR (31 downto 0);
        din75 : IN STD_LOGIC_VECTOR (31 downto 0);
        din76 : IN STD_LOGIC_VECTOR (31 downto 0);
        din77 : IN STD_LOGIC_VECTOR (31 downto 0);
        din78 : IN STD_LOGIC_VECTOR (31 downto 0);
        din79 : IN STD_LOGIC_VECTOR (31 downto 0);
        din80 : IN STD_LOGIC_VECTOR (31 downto 0);
        din81 : IN STD_LOGIC_VECTOR (31 downto 0);
        din82 : IN STD_LOGIC_VECTOR (31 downto 0);
        din83 : IN STD_LOGIC_VECTOR (31 downto 0);
        din84 : IN STD_LOGIC_VECTOR (31 downto 0);
        din85 : IN STD_LOGIC_VECTOR (31 downto 0);
        din86 : IN STD_LOGIC_VECTOR (31 downto 0);
        din87 : IN STD_LOGIC_VECTOR (31 downto 0);
        din88 : IN STD_LOGIC_VECTOR (31 downto 0);
        din89 : IN STD_LOGIC_VECTOR (31 downto 0);
        din90 : IN STD_LOGIC_VECTOR (31 downto 0);
        din91 : IN STD_LOGIC_VECTOR (31 downto 0);
        din92 : IN STD_LOGIC_VECTOR (31 downto 0);
        din93 : IN STD_LOGIC_VECTOR (31 downto 0);
        din94 : IN STD_LOGIC_VECTOR (31 downto 0);
        din95 : IN STD_LOGIC_VECTOR (31 downto 0);
        din96 : IN STD_LOGIC_VECTOR (31 downto 0);
        din97 : IN STD_LOGIC_VECTOR (31 downto 0);
        din98 : IN STD_LOGIC_VECTOR (31 downto 0);
        din99 : IN STD_LOGIC_VECTOR (31 downto 0);
        din100 : IN STD_LOGIC_VECTOR (31 downto 0);
        din101 : IN STD_LOGIC_VECTOR (31 downto 0);
        din102 : IN STD_LOGIC_VECTOR (31 downto 0);
        din103 : IN STD_LOGIC_VECTOR (31 downto 0);
        din104 : IN STD_LOGIC_VECTOR (31 downto 0);
        din105 : IN STD_LOGIC_VECTOR (31 downto 0);
        din106 : IN STD_LOGIC_VECTOR (31 downto 0);
        din107 : IN STD_LOGIC_VECTOR (31 downto 0);
        din108 : IN STD_LOGIC_VECTOR (31 downto 0);
        din109 : IN STD_LOGIC_VECTOR (31 downto 0);
        din110 : IN STD_LOGIC_VECTOR (31 downto 0);
        din111 : IN STD_LOGIC_VECTOR (31 downto 0);
        din112 : IN STD_LOGIC_VECTOR (31 downto 0);
        din113 : IN STD_LOGIC_VECTOR (31 downto 0);
        din114 : IN STD_LOGIC_VECTOR (31 downto 0);
        din115 : IN STD_LOGIC_VECTOR (31 downto 0);
        din116 : IN STD_LOGIC_VECTOR (31 downto 0);
        din117 : IN STD_LOGIC_VECTOR (31 downto 0);
        din118 : IN STD_LOGIC_VECTOR (31 downto 0);
        din119 : IN STD_LOGIC_VECTOR (31 downto 0);
        din120 : IN STD_LOGIC_VECTOR (31 downto 0);
        din121 : IN STD_LOGIC_VECTOR (31 downto 0);
        din122 : IN STD_LOGIC_VECTOR (31 downto 0);
        din123 : IN STD_LOGIC_VECTOR (31 downto 0);
        din124 : IN STD_LOGIC_VECTOR (31 downto 0);
        din125 : IN STD_LOGIC_VECTOR (31 downto 0);
        din126 : IN STD_LOGIC_VECTOR (31 downto 0);
        din127 : IN STD_LOGIC_VECTOR (31 downto 0);
        din128 : IN STD_LOGIC_VECTOR (31 downto 0);
        din129 : IN STD_LOGIC_VECTOR (31 downto 0);
        din130 : IN STD_LOGIC_VECTOR (31 downto 0);
        din131 : IN STD_LOGIC_VECTOR (31 downto 0);
        din132 : IN STD_LOGIC_VECTOR (31 downto 0);
        din133 : IN STD_LOGIC_VECTOR (31 downto 0);
        din134 : IN STD_LOGIC_VECTOR (31 downto 0);
        din135 : IN STD_LOGIC_VECTOR (31 downto 0);
        din136 : IN STD_LOGIC_VECTOR (31 downto 0);
        din137 : IN STD_LOGIC_VECTOR (31 downto 0);
        din138 : IN STD_LOGIC_VECTOR (31 downto 0);
        din139 : IN STD_LOGIC_VECTOR (31 downto 0);
        din140 : IN STD_LOGIC_VECTOR (31 downto 0);
        din141 : IN STD_LOGIC_VECTOR (31 downto 0);
        din142 : IN STD_LOGIC_VECTOR (31 downto 0);
        din143 : IN STD_LOGIC_VECTOR (31 downto 0);
        din144 : IN STD_LOGIC_VECTOR (31 downto 0);
        din145 : IN STD_LOGIC_VECTOR (31 downto 0);
        din146 : IN STD_LOGIC_VECTOR (31 downto 0);
        din147 : IN STD_LOGIC_VECTOR (31 downto 0);
        din148 : IN STD_LOGIC_VECTOR (31 downto 0);
        din149 : IN STD_LOGIC_VECTOR (31 downto 0);
        din150 : IN STD_LOGIC_VECTOR (31 downto 0);
        din151 : IN STD_LOGIC_VECTOR (31 downto 0);
        din152 : IN STD_LOGIC_VECTOR (31 downto 0);
        din153 : IN STD_LOGIC_VECTOR (31 downto 0);
        din154 : IN STD_LOGIC_VECTOR (31 downto 0);
        din155 : IN STD_LOGIC_VECTOR (31 downto 0);
        din156 : IN STD_LOGIC_VECTOR (31 downto 0);
        din157 : IN STD_LOGIC_VECTOR (31 downto 0);
        din158 : IN STD_LOGIC_VECTOR (31 downto 0);
        din159 : IN STD_LOGIC_VECTOR (31 downto 0);
        din160 : IN STD_LOGIC_VECTOR (31 downto 0);
        din161 : IN STD_LOGIC_VECTOR (31 downto 0);
        din162 : IN STD_LOGIC_VECTOR (31 downto 0);
        din163 : IN STD_LOGIC_VECTOR (31 downto 0);
        din164 : IN STD_LOGIC_VECTOR (31 downto 0);
        din165 : IN STD_LOGIC_VECTOR (31 downto 0);
        din166 : IN STD_LOGIC_VECTOR (31 downto 0);
        din167 : IN STD_LOGIC_VECTOR (31 downto 0);
        din168 : IN STD_LOGIC_VECTOR (31 downto 0);
        din169 : IN STD_LOGIC_VECTOR (31 downto 0);
        din170 : IN STD_LOGIC_VECTOR (31 downto 0);
        din171 : IN STD_LOGIC_VECTOR (31 downto 0);
        din172 : IN STD_LOGIC_VECTOR (31 downto 0);
        din173 : IN STD_LOGIC_VECTOR (31 downto 0);
        din174 : IN STD_LOGIC_VECTOR (31 downto 0);
        din175 : IN STD_LOGIC_VECTOR (31 downto 0);
        din176 : IN STD_LOGIC_VECTOR (31 downto 0);
        din177 : IN STD_LOGIC_VECTOR (31 downto 0);
        din178 : IN STD_LOGIC_VECTOR (31 downto 0);
        din179 : IN STD_LOGIC_VECTOR (31 downto 0);
        din180 : IN STD_LOGIC_VECTOR (31 downto 0);
        din181 : IN STD_LOGIC_VECTOR (31 downto 0);
        din182 : IN STD_LOGIC_VECTOR (31 downto 0);
        din183 : IN STD_LOGIC_VECTOR (31 downto 0);
        din184 : IN STD_LOGIC_VECTOR (31 downto 0);
        din185 : IN STD_LOGIC_VECTOR (31 downto 0);
        din186 : IN STD_LOGIC_VECTOR (31 downto 0);
        din187 : IN STD_LOGIC_VECTOR (31 downto 0);
        din188 : IN STD_LOGIC_VECTOR (31 downto 0);
        din189 : IN STD_LOGIC_VECTOR (31 downto 0);
        din190 : IN STD_LOGIC_VECTOR (31 downto 0);
        din191 : IN STD_LOGIC_VECTOR (31 downto 0);
        din192 : IN STD_LOGIC_VECTOR (31 downto 0);
        din193 : IN STD_LOGIC_VECTOR (31 downto 0);
        din194 : IN STD_LOGIC_VECTOR (31 downto 0);
        din195 : IN STD_LOGIC_VECTOR (31 downto 0);
        din196 : IN STD_LOGIC_VECTOR (31 downto 0);
        din197 : IN STD_LOGIC_VECTOR (31 downto 0);
        din198 : IN STD_LOGIC_VECTOR (31 downto 0);
        din199 : IN STD_LOGIC_VECTOR (31 downto 0);
        din200 : IN STD_LOGIC_VECTOR (31 downto 0);
        din201 : IN STD_LOGIC_VECTOR (31 downto 0);
        din202 : IN STD_LOGIC_VECTOR (31 downto 0);
        din203 : IN STD_LOGIC_VECTOR (31 downto 0);
        din204 : IN STD_LOGIC_VECTOR (31 downto 0);
        din205 : IN STD_LOGIC_VECTOR (31 downto 0);
        din206 : IN STD_LOGIC_VECTOR (31 downto 0);
        din207 : IN STD_LOGIC_VECTOR (31 downto 0);
        din208 : IN STD_LOGIC_VECTOR (31 downto 0);
        din209 : IN STD_LOGIC_VECTOR (31 downto 0);
        din210 : IN STD_LOGIC_VECTOR (31 downto 0);
        din211 : IN STD_LOGIC_VECTOR (31 downto 0);
        din212 : IN STD_LOGIC_VECTOR (31 downto 0);
        din213 : IN STD_LOGIC_VECTOR (31 downto 0);
        din214 : IN STD_LOGIC_VECTOR (31 downto 0);
        din215 : IN STD_LOGIC_VECTOR (31 downto 0);
        din216 : IN STD_LOGIC_VECTOR (31 downto 0);
        din217 : IN STD_LOGIC_VECTOR (31 downto 0);
        din218 : IN STD_LOGIC_VECTOR (31 downto 0);
        din219 : IN STD_LOGIC_VECTOR (31 downto 0);
        din220 : IN STD_LOGIC_VECTOR (31 downto 0);
        din221 : IN STD_LOGIC_VECTOR (31 downto 0);
        din222 : IN STD_LOGIC_VECTOR (31 downto 0);
        din223 : IN STD_LOGIC_VECTOR (31 downto 0);
        din224 : IN STD_LOGIC_VECTOR (31 downto 0);
        din225 : IN STD_LOGIC_VECTOR (31 downto 0);
        din226 : IN STD_LOGIC_VECTOR (31 downto 0);
        din227 : IN STD_LOGIC_VECTOR (31 downto 0);
        din228 : IN STD_LOGIC_VECTOR (31 downto 0);
        din229 : IN STD_LOGIC_VECTOR (31 downto 0);
        din230 : IN STD_LOGIC_VECTOR (31 downto 0);
        din231 : IN STD_LOGIC_VECTOR (31 downto 0);
        din232 : IN STD_LOGIC_VECTOR (31 downto 0);
        din233 : IN STD_LOGIC_VECTOR (31 downto 0);
        din234 : IN STD_LOGIC_VECTOR (31 downto 0);
        din235 : IN STD_LOGIC_VECTOR (31 downto 0);
        din236 : IN STD_LOGIC_VECTOR (31 downto 0);
        din237 : IN STD_LOGIC_VECTOR (31 downto 0);
        din238 : IN STD_LOGIC_VECTOR (31 downto 0);
        din239 : IN STD_LOGIC_VECTOR (31 downto 0);
        din240 : IN STD_LOGIC_VECTOR (31 downto 0);
        din241 : IN STD_LOGIC_VECTOR (31 downto 0);
        din242 : IN STD_LOGIC_VECTOR (31 downto 0);
        din243 : IN STD_LOGIC_VECTOR (31 downto 0);
        din244 : IN STD_LOGIC_VECTOR (31 downto 0);
        din245 : IN STD_LOGIC_VECTOR (31 downto 0);
        din246 : IN STD_LOGIC_VECTOR (31 downto 0);
        din247 : IN STD_LOGIC_VECTOR (31 downto 0);
        din248 : IN STD_LOGIC_VECTOR (31 downto 0);
        din249 : IN STD_LOGIC_VECTOR (31 downto 0);
        din250 : IN STD_LOGIC_VECTOR (31 downto 0);
        din251 : IN STD_LOGIC_VECTOR (31 downto 0);
        din252 : IN STD_LOGIC_VECTOR (31 downto 0);
        din253 : IN STD_LOGIC_VECTOR (31 downto 0);
        din254 : IN STD_LOGIC_VECTOR (31 downto 0);
        din255 : IN STD_LOGIC_VECTOR (31 downto 0);
        din256 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reversi_accel_mul_32s_14s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reversi_accel_mac_muladd_20s_8ns_12ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component reversi_accel_bgr2hsv_16_1024_1024_1_2_2_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_140_2_xf_cv_idEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reversi_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    xf_cv_icvSaturate8u_cv_U : component reversi_accel_bgr2hsv_16_1024_1024_1_2_2_Pipeline_VITIS_LOOP_136_1_VITIS_LOOP_140_2_xf_cv_idEe
    generic map (
        DataWidth => 8,
        AddressRange => 769,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xf_cv_icvSaturate8u_cv_address0,
        ce0 => xf_cv_icvSaturate8u_cv_ce0,
        q0 => xf_cv_icvSaturate8u_cv_q0,
        address1 => xf_cv_icvSaturate8u_cv_address1,
        ce1 => xf_cv_icvSaturate8u_cv_ce1,
        q1 => xf_cv_icvSaturate8u_cv_q1,
        address2 => xf_cv_icvSaturate8u_cv_address2,
        ce2 => xf_cv_icvSaturate8u_cv_ce2,
        q2 => xf_cv_icvSaturate8u_cv_q2,
        address3 => xf_cv_icvSaturate8u_cv_address3,
        ce3 => xf_cv_icvSaturate8u_cv_ce3,
        q3 => xf_cv_icvSaturate8u_cv_q3);

    mux_25610_32_1_1_U174 : component reversi_accel_mux_25610_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 32,
        din65_WIDTH => 32,
        din66_WIDTH => 32,
        din67_WIDTH => 32,
        din68_WIDTH => 32,
        din69_WIDTH => 32,
        din70_WIDTH => 32,
        din71_WIDTH => 32,
        din72_WIDTH => 32,
        din73_WIDTH => 32,
        din74_WIDTH => 32,
        din75_WIDTH => 32,
        din76_WIDTH => 32,
        din77_WIDTH => 32,
        din78_WIDTH => 32,
        din79_WIDTH => 32,
        din80_WIDTH => 32,
        din81_WIDTH => 32,
        din82_WIDTH => 32,
        din83_WIDTH => 32,
        din84_WIDTH => 32,
        din85_WIDTH => 32,
        din86_WIDTH => 32,
        din87_WIDTH => 32,
        din88_WIDTH => 32,
        din89_WIDTH => 32,
        din90_WIDTH => 32,
        din91_WIDTH => 32,
        din92_WIDTH => 32,
        din93_WIDTH => 32,
        din94_WIDTH => 32,
        din95_WIDTH => 32,
        din96_WIDTH => 32,
        din97_WIDTH => 32,
        din98_WIDTH => 32,
        din99_WIDTH => 32,
        din100_WIDTH => 32,
        din101_WIDTH => 32,
        din102_WIDTH => 32,
        din103_WIDTH => 32,
        din104_WIDTH => 32,
        din105_WIDTH => 32,
        din106_WIDTH => 32,
        din107_WIDTH => 32,
        din108_WIDTH => 32,
        din109_WIDTH => 32,
        din110_WIDTH => 32,
        din111_WIDTH => 32,
        din112_WIDTH => 32,
        din113_WIDTH => 32,
        din114_WIDTH => 32,
        din115_WIDTH => 32,
        din116_WIDTH => 32,
        din117_WIDTH => 32,
        din118_WIDTH => 32,
        din119_WIDTH => 32,
        din120_WIDTH => 32,
        din121_WIDTH => 32,
        din122_WIDTH => 32,
        din123_WIDTH => 32,
        din124_WIDTH => 32,
        din125_WIDTH => 32,
        din126_WIDTH => 32,
        din127_WIDTH => 32,
        din128_WIDTH => 32,
        din129_WIDTH => 32,
        din130_WIDTH => 32,
        din131_WIDTH => 32,
        din132_WIDTH => 32,
        din133_WIDTH => 32,
        din134_WIDTH => 32,
        din135_WIDTH => 32,
        din136_WIDTH => 32,
        din137_WIDTH => 32,
        din138_WIDTH => 32,
        din139_WIDTH => 32,
        din140_WIDTH => 32,
        din141_WIDTH => 32,
        din142_WIDTH => 32,
        din143_WIDTH => 32,
        din144_WIDTH => 32,
        din145_WIDTH => 32,
        din146_WIDTH => 32,
        din147_WIDTH => 32,
        din148_WIDTH => 32,
        din149_WIDTH => 32,
        din150_WIDTH => 32,
        din151_WIDTH => 32,
        din152_WIDTH => 32,
        din153_WIDTH => 32,
        din154_WIDTH => 32,
        din155_WIDTH => 32,
        din156_WIDTH => 32,
        din157_WIDTH => 32,
        din158_WIDTH => 32,
        din159_WIDTH => 32,
        din160_WIDTH => 32,
        din161_WIDTH => 32,
        din162_WIDTH => 32,
        din163_WIDTH => 32,
        din164_WIDTH => 32,
        din165_WIDTH => 32,
        din166_WIDTH => 32,
        din167_WIDTH => 32,
        din168_WIDTH => 32,
        din169_WIDTH => 32,
        din170_WIDTH => 32,
        din171_WIDTH => 32,
        din172_WIDTH => 32,
        din173_WIDTH => 32,
        din174_WIDTH => 32,
        din175_WIDTH => 32,
        din176_WIDTH => 32,
        din177_WIDTH => 32,
        din178_WIDTH => 32,
        din179_WIDTH => 32,
        din180_WIDTH => 32,
        din181_WIDTH => 32,
        din182_WIDTH => 32,
        din183_WIDTH => 32,
        din184_WIDTH => 32,
        din185_WIDTH => 32,
        din186_WIDTH => 32,
        din187_WIDTH => 32,
        din188_WIDTH => 32,
        din189_WIDTH => 32,
        din190_WIDTH => 32,
        din191_WIDTH => 32,
        din192_WIDTH => 32,
        din193_WIDTH => 32,
        din194_WIDTH => 32,
        din195_WIDTH => 32,
        din196_WIDTH => 32,
        din197_WIDTH => 32,
        din198_WIDTH => 32,
        din199_WIDTH => 32,
        din200_WIDTH => 32,
        din201_WIDTH => 32,
        din202_WIDTH => 32,
        din203_WIDTH => 32,
        din204_WIDTH => 32,
        din205_WIDTH => 32,
        din206_WIDTH => 32,
        din207_WIDTH => 32,
        din208_WIDTH => 32,
        din209_WIDTH => 32,
        din210_WIDTH => 32,
        din211_WIDTH => 32,
        din212_WIDTH => 32,
        din213_WIDTH => 32,
        din214_WIDTH => 32,
        din215_WIDTH => 32,
        din216_WIDTH => 32,
        din217_WIDTH => 32,
        din218_WIDTH => 32,
        din219_WIDTH => 32,
        din220_WIDTH => 32,
        din221_WIDTH => 32,
        din222_WIDTH => 32,
        din223_WIDTH => 32,
        din224_WIDTH => 32,
        din225_WIDTH => 32,
        din226_WIDTH => 32,
        din227_WIDTH => 32,
        din228_WIDTH => 32,
        din229_WIDTH => 32,
        din230_WIDTH => 32,
        din231_WIDTH => 32,
        din232_WIDTH => 32,
        din233_WIDTH => 32,
        din234_WIDTH => 32,
        din235_WIDTH => 32,
        din236_WIDTH => 32,
        din237_WIDTH => 32,
        din238_WIDTH => 32,
        din239_WIDTH => 32,
        din240_WIDTH => 32,
        din241_WIDTH => 32,
        din242_WIDTH => 32,
        din243_WIDTH => 32,
        din244_WIDTH => 32,
        din245_WIDTH => 32,
        din246_WIDTH => 32,
        din247_WIDTH => 32,
        din248_WIDTH => 32,
        din249_WIDTH => 32,
        din250_WIDTH => 32,
        din251_WIDTH => 32,
        din252_WIDTH => 32,
        din253_WIDTH => 32,
        din254_WIDTH => 32,
        din255_WIDTH => 32,
        din256_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_FF000,
        din2 => ap_const_lv32_7F800,
        din3 => ap_const_lv32_55000,
        din4 => ap_const_lv32_3FC00,
        din5 => ap_const_lv32_33000,
        din6 => ap_const_lv32_2A800,
        din7 => ap_const_lv32_246DB,
        din8 => ap_const_lv32_1FE00,
        din9 => ap_const_lv32_1C555,
        din10 => ap_const_lv32_19800,
        din11 => ap_const_lv32_172E9,
        din12 => ap_const_lv32_15400,
        din13 => ap_const_lv32_139D9,
        din14 => ap_const_lv32_1236E,
        din15 => ap_const_lv32_11000,
        din16 => ap_const_lv32_FF00,
        din17 => ap_const_lv32_F000,
        din18 => ap_const_lv32_E2AB,
        din19 => ap_const_lv32_D6BD,
        din20 => ap_const_lv32_CC00,
        din21 => ap_const_lv32_C249,
        din22 => ap_const_lv32_B974,
        din23 => ap_const_lv32_B164,
        din24 => ap_const_lv32_AA00,
        din25 => ap_const_lv32_A333,
        din26 => ap_const_lv32_9CEC,
        din27 => ap_const_lv32_971C,
        din28 => ap_const_lv32_91B7,
        din29 => ap_const_lv32_8CB1,
        din30 => ap_const_lv32_8800,
        din31 => ap_const_lv32_839D,
        din32 => ap_const_lv32_7F80,
        din33 => ap_const_lv32_7BA3,
        din34 => ap_const_lv32_7800,
        din35 => ap_const_lv32_7492,
        din36 => ap_const_lv32_7155,
        din37 => ap_const_lv32_6E45,
        din38 => ap_const_lv32_6B5E,
        din39 => ap_const_lv32_689E,
        din40 => ap_const_lv32_6600,
        din41 => ap_const_lv32_6383,
        din42 => ap_const_lv32_6125,
        din43 => ap_const_lv32_5EE2,
        din44 => ap_const_lv32_5CBA,
        din45 => ap_const_lv32_5AAB,
        din46 => ap_const_lv32_58B2,
        din47 => ap_const_lv32_56CF,
        din48 => ap_const_lv32_5500,
        din49 => ap_const_lv32_5344,
        din50 => ap_const_lv32_519A,
        din51 => ap_const_lv32_5000,
        din52 => ap_const_lv32_4E76,
        din53 => ap_const_lv32_4CFB,
        din54 => ap_const_lv32_4B8E,
        din55 => ap_const_lv32_4A2F,
        din56 => ap_const_lv32_48DB,
        din57 => ap_const_lv32_4794,
        din58 => ap_const_lv32_4658,
        din59 => ap_const_lv32_4527,
        din60 => ap_const_lv32_4400,
        din61 => ap_const_lv32_42E3,
        din62 => ap_const_lv32_41CE,
        din63 => ap_const_lv32_40C3,
        din64 => ap_const_lv32_3FC0,
        din65 => ap_const_lv32_3EC5,
        din66 => ap_const_lv32_3DD1,
        din67 => ap_const_lv32_3CE5,
        din68 => ap_const_lv32_3C00,
        din69 => ap_const_lv32_3B21,
        din70 => ap_const_lv32_3A49,
        din71 => ap_const_lv32_3977,
        din72 => ap_const_lv32_38AB,
        din73 => ap_const_lv32_37E4,
        din74 => ap_const_lv32_3723,
        din75 => ap_const_lv32_3666,
        din76 => ap_const_lv32_35AF,
        din77 => ap_const_lv32_34FD,
        din78 => ap_const_lv32_344F,
        din79 => ap_const_lv32_33A5,
        din80 => ap_const_lv32_3300,
        din81 => ap_const_lv32_325F,
        din82 => ap_const_lv32_31C2,
        din83 => ap_const_lv32_3128,
        din84 => ap_const_lv32_3092,
        din85 => ap_const_lv32_3000,
        din86 => ap_const_lv32_2F71,
        din87 => ap_const_lv32_2EE6,
        din88 => ap_const_lv32_2E5D,
        din89 => ap_const_lv32_2DD8,
        din90 => ap_const_lv32_2D55,
        din91 => ap_const_lv32_2CD6,
        din92 => ap_const_lv32_2C59,
        din93 => ap_const_lv32_2BDF,
        din94 => ap_const_lv32_2B67,
        din95 => ap_const_lv32_2AF3,
        din96 => ap_const_lv32_2A80,
        din97 => ap_const_lv32_2A10,
        din98 => ap_const_lv32_29A2,
        din99 => ap_const_lv32_2936,
        din100 => ap_const_lv32_28CD,
        din101 => ap_const_lv32_2865,
        din102 => ap_const_lv32_2800,
        din103 => ap_const_lv32_279D,
        din104 => ap_const_lv32_273B,
        din105 => ap_const_lv32_26DB,
        din106 => ap_const_lv32_267E,
        din107 => ap_const_lv32_2621,
        din108 => ap_const_lv32_25C7,
        din109 => ap_const_lv32_256E,
        din110 => ap_const_lv32_2517,
        din111 => ap_const_lv32_24C2,
        din112 => ap_const_lv32_246E,
        din113 => ap_const_lv32_241B,
        din114 => ap_const_lv32_23CA,
        din115 => ap_const_lv32_237A,
        din116 => ap_const_lv32_232C,
        din117 => ap_const_lv32_22DF,
        din118 => ap_const_lv32_2294,
        din119 => ap_const_lv32_2249,
        din120 => ap_const_lv32_2200,
        din121 => ap_const_lv32_21B8,
        din122 => ap_const_lv32_2171,
        din123 => ap_const_lv32_212C,
        din124 => ap_const_lv32_20E7,
        din125 => ap_const_lv32_20A4,
        din126 => ap_const_lv32_2062,
        din127 => ap_const_lv32_2020,
        din128 => ap_const_lv32_1FE0,
        din129 => ap_const_lv32_1FA1,
        din130 => ap_const_lv32_1F62,
        din131 => ap_const_lv32_1F25,
        din132 => ap_const_lv32_1EE9,
        din133 => ap_const_lv32_1EAD,
        din134 => ap_const_lv32_1E73,
        din135 => ap_const_lv32_1E39,
        din136 => ap_const_lv32_1E00,
        din137 => ap_const_lv32_1DC8,
        din138 => ap_const_lv32_1D91,
        din139 => ap_const_lv32_1D5A,
        din140 => ap_const_lv32_1D25,
        din141 => ap_const_lv32_1CF0,
        din142 => ap_const_lv32_1CBB,
        din143 => ap_const_lv32_1C88,
        din144 => ap_const_lv32_1C55,
        din145 => ap_const_lv32_1C23,
        din146 => ap_const_lv32_1BF2,
        din147 => ap_const_lv32_1BC1,
        din148 => ap_const_lv32_1B91,
        din149 => ap_const_lv32_1B62,
        din150 => ap_const_lv32_1B33,
        din151 => ap_const_lv32_1B05,
        din152 => ap_const_lv32_1AD8,
        din153 => ap_const_lv32_1AAB,
        din154 => ap_const_lv32_1A7E,
        din155 => ap_const_lv32_1A53,
        din156 => ap_const_lv32_1A27,
        din157 => ap_const_lv32_19FD,
        din158 => ap_const_lv32_19D3,
        din159 => ap_const_lv32_19A9,
        din160 => ap_const_lv32_1980,
        din161 => ap_const_lv32_1957,
        din162 => ap_const_lv32_192F,
        din163 => ap_const_lv32_1908,
        din164 => ap_const_lv32_18E1,
        din165 => ap_const_lv32_18BA,
        din166 => ap_const_lv32_1894,
        din167 => ap_const_lv32_186E,
        din168 => ap_const_lv32_1849,
        din169 => ap_const_lv32_1824,
        din170 => ap_const_lv32_1800,
        din171 => ap_const_lv32_17DC,
        din172 => ap_const_lv32_17B9,
        din173 => ap_const_lv32_1795,
        din174 => ap_const_lv32_1773,
        din175 => ap_const_lv32_1750,
        din176 => ap_const_lv32_172F,
        din177 => ap_const_lv32_170D,
        din178 => ap_const_lv32_16EC,
        din179 => ap_const_lv32_16CB,
        din180 => ap_const_lv32_16AB,
        din181 => ap_const_lv32_168B,
        din182 => ap_const_lv32_166B,
        din183 => ap_const_lv32_164C,
        din184 => ap_const_lv32_162D,
        din185 => ap_const_lv32_160E,
        din186 => ap_const_lv32_15EF,
        din187 => ap_const_lv32_15D1,
        din188 => ap_const_lv32_15B4,
        din189 => ap_const_lv32_1596,
        din190 => ap_const_lv32_1579,
        din191 => ap_const_lv32_155C,
        din192 => ap_const_lv32_1540,
        din193 => ap_const_lv32_1524,
        din194 => ap_const_lv32_1508,
        din195 => ap_const_lv32_14EC,
        din196 => ap_const_lv32_14D1,
        din197 => ap_const_lv32_14B6,
        din198 => ap_const_lv32_149B,
        din199 => ap_const_lv32_1481,
        din200 => ap_const_lv32_1466,
        din201 => ap_const_lv32_144C,
        din202 => ap_const_lv32_1433,
        din203 => ap_const_lv32_1419,
        din204 => ap_const_lv32_1400,
        din205 => ap_const_lv32_13E7,
        din206 => ap_const_lv32_13CE,
        din207 => ap_const_lv32_13B6,
        din208 => ap_const_lv32_139E,
        din209 => ap_const_lv32_1386,
        din210 => ap_const_lv32_136E,
        din211 => ap_const_lv32_1356,
        din212 => ap_const_lv32_133F,
        din213 => ap_const_lv32_1328,
        din214 => ap_const_lv32_1311,
        din215 => ap_const_lv32_12FA,
        din216 => ap_const_lv32_12E4,
        din217 => ap_const_lv32_12CD,
        din218 => ap_const_lv32_12B7,
        din219 => ap_const_lv32_12A1,
        din220 => ap_const_lv32_128C,
        din221 => ap_const_lv32_1276,
        din222 => ap_const_lv32_1261,
        din223 => ap_const_lv32_124C,
        din224 => ap_const_lv32_1237,
        din225 => ap_const_lv32_1222,
        din226 => ap_const_lv32_120E,
        din227 => ap_const_lv32_11F9,
        din228 => ap_const_lv32_11E5,
        din229 => ap_const_lv32_11D1,
        din230 => ap_const_lv32_11BD,
        din231 => ap_const_lv32_11AA,
        din232 => ap_const_lv32_1196,
        din233 => ap_const_lv32_1183,
        din234 => ap_const_lv32_1170,
        din235 => ap_const_lv32_115D,
        din236 => ap_const_lv32_114A,
        din237 => ap_const_lv32_1137,
        din238 => ap_const_lv32_1125,
        din239 => ap_const_lv32_1112,
        din240 => ap_const_lv32_1100,
        din241 => ap_const_lv32_10EE,
        din242 => ap_const_lv32_10DC,
        din243 => ap_const_lv32_10CA,
        din244 => ap_const_lv32_10B9,
        din245 => ap_const_lv32_10A7,
        din246 => ap_const_lv32_1096,
        din247 => ap_const_lv32_1085,
        din248 => ap_const_lv32_1074,
        din249 => ap_const_lv32_1063,
        din250 => ap_const_lv32_1052,
        din251 => ap_const_lv32_1041,
        din252 => ap_const_lv32_1031,
        din253 => ap_const_lv32_1020,
        din254 => ap_const_lv32_1010,
        din255 => ap_const_lv32_1000,
        din256 => v_reg_2708_pp0_iter7_reg,
        dout => rhs_V_3_fu_1373_p258);

    mux_2568_32_1_1_U175 : component reversi_accel_mux_2568_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 32,
        din65_WIDTH => 32,
        din66_WIDTH => 32,
        din67_WIDTH => 32,
        din68_WIDTH => 32,
        din69_WIDTH => 32,
        din70_WIDTH => 32,
        din71_WIDTH => 32,
        din72_WIDTH => 32,
        din73_WIDTH => 32,
        din74_WIDTH => 32,
        din75_WIDTH => 32,
        din76_WIDTH => 32,
        din77_WIDTH => 32,
        din78_WIDTH => 32,
        din79_WIDTH => 32,
        din80_WIDTH => 32,
        din81_WIDTH => 32,
        din82_WIDTH => 32,
        din83_WIDTH => 32,
        din84_WIDTH => 32,
        din85_WIDTH => 32,
        din86_WIDTH => 32,
        din87_WIDTH => 32,
        din88_WIDTH => 32,
        din89_WIDTH => 32,
        din90_WIDTH => 32,
        din91_WIDTH => 32,
        din92_WIDTH => 32,
        din93_WIDTH => 32,
        din94_WIDTH => 32,
        din95_WIDTH => 32,
        din96_WIDTH => 32,
        din97_WIDTH => 32,
        din98_WIDTH => 32,
        din99_WIDTH => 32,
        din100_WIDTH => 32,
        din101_WIDTH => 32,
        din102_WIDTH => 32,
        din103_WIDTH => 32,
        din104_WIDTH => 32,
        din105_WIDTH => 32,
        din106_WIDTH => 32,
        din107_WIDTH => 32,
        din108_WIDTH => 32,
        din109_WIDTH => 32,
        din110_WIDTH => 32,
        din111_WIDTH => 32,
        din112_WIDTH => 32,
        din113_WIDTH => 32,
        din114_WIDTH => 32,
        din115_WIDTH => 32,
        din116_WIDTH => 32,
        din117_WIDTH => 32,
        din118_WIDTH => 32,
        din119_WIDTH => 32,
        din120_WIDTH => 32,
        din121_WIDTH => 32,
        din122_WIDTH => 32,
        din123_WIDTH => 32,
        din124_WIDTH => 32,
        din125_WIDTH => 32,
        din126_WIDTH => 32,
        din127_WIDTH => 32,
        din128_WIDTH => 32,
        din129_WIDTH => 32,
        din130_WIDTH => 32,
        din131_WIDTH => 32,
        din132_WIDTH => 32,
        din133_WIDTH => 32,
        din134_WIDTH => 32,
        din135_WIDTH => 32,
        din136_WIDTH => 32,
        din137_WIDTH => 32,
        din138_WIDTH => 32,
        din139_WIDTH => 32,
        din140_WIDTH => 32,
        din141_WIDTH => 32,
        din142_WIDTH => 32,
        din143_WIDTH => 32,
        din144_WIDTH => 32,
        din145_WIDTH => 32,
        din146_WIDTH => 32,
        din147_WIDTH => 32,
        din148_WIDTH => 32,
        din149_WIDTH => 32,
        din150_WIDTH => 32,
        din151_WIDTH => 32,
        din152_WIDTH => 32,
        din153_WIDTH => 32,
        din154_WIDTH => 32,
        din155_WIDTH => 32,
        din156_WIDTH => 32,
        din157_WIDTH => 32,
        din158_WIDTH => 32,
        din159_WIDTH => 32,
        din160_WIDTH => 32,
        din161_WIDTH => 32,
        din162_WIDTH => 32,
        din163_WIDTH => 32,
        din164_WIDTH => 32,
        din165_WIDTH => 32,
        din166_WIDTH => 32,
        din167_WIDTH => 32,
        din168_WIDTH => 32,
        din169_WIDTH => 32,
        din170_WIDTH => 32,
        din171_WIDTH => 32,
        din172_WIDTH => 32,
        din173_WIDTH => 32,
        din174_WIDTH => 32,
        din175_WIDTH => 32,
        din176_WIDTH => 32,
        din177_WIDTH => 32,
        din178_WIDTH => 32,
        din179_WIDTH => 32,
        din180_WIDTH => 32,
        din181_WIDTH => 32,
        din182_WIDTH => 32,
        din183_WIDTH => 32,
        din184_WIDTH => 32,
        din185_WIDTH => 32,
        din186_WIDTH => 32,
        din187_WIDTH => 32,
        din188_WIDTH => 32,
        din189_WIDTH => 32,
        din190_WIDTH => 32,
        din191_WIDTH => 32,
        din192_WIDTH => 32,
        din193_WIDTH => 32,
        din194_WIDTH => 32,
        din195_WIDTH => 32,
        din196_WIDTH => 32,
        din197_WIDTH => 32,
        din198_WIDTH => 32,
        din199_WIDTH => 32,
        din200_WIDTH => 32,
        din201_WIDTH => 32,
        din202_WIDTH => 32,
        din203_WIDTH => 32,
        din204_WIDTH => 32,
        din205_WIDTH => 32,
        din206_WIDTH => 32,
        din207_WIDTH => 32,
        din208_WIDTH => 32,
        din209_WIDTH => 32,
        din210_WIDTH => 32,
        din211_WIDTH => 32,
        din212_WIDTH => 32,
        din213_WIDTH => 32,
        din214_WIDTH => 32,
        din215_WIDTH => 32,
        din216_WIDTH => 32,
        din217_WIDTH => 32,
        din218_WIDTH => 32,
        din219_WIDTH => 32,
        din220_WIDTH => 32,
        din221_WIDTH => 32,
        din222_WIDTH => 32,
        din223_WIDTH => 32,
        din224_WIDTH => 32,
        din225_WIDTH => 32,
        din226_WIDTH => 32,
        din227_WIDTH => 32,
        din228_WIDTH => 32,
        din229_WIDTH => 32,
        din230_WIDTH => 32,
        din231_WIDTH => 32,
        din232_WIDTH => 32,
        din233_WIDTH => 32,
        din234_WIDTH => 32,
        din235_WIDTH => 32,
        din236_WIDTH => 32,
        din237_WIDTH => 32,
        din238_WIDTH => 32,
        din239_WIDTH => 32,
        din240_WIDTH => 32,
        din241_WIDTH => 32,
        din242_WIDTH => 32,
        din243_WIDTH => 32,
        din244_WIDTH => 32,
        din245_WIDTH => 32,
        din246_WIDTH => 32,
        din247_WIDTH => 32,
        din248_WIDTH => 32,
        din249_WIDTH => 32,
        din250_WIDTH => 32,
        din251_WIDTH => 32,
        din252_WIDTH => 32,
        din253_WIDTH => 32,
        din254_WIDTH => 32,
        din255_WIDTH => 32,
        din256_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_1E000,
        din2 => ap_const_lv32_F000,
        din3 => ap_const_lv32_A000,
        din4 => ap_const_lv32_7800,
        din5 => ap_const_lv32_6000,
        din6 => ap_const_lv32_5000,
        din7 => ap_const_lv32_4492,
        din8 => ap_const_lv32_3C00,
        din9 => ap_const_lv32_3555,
        din10 => ap_const_lv32_3000,
        din11 => ap_const_lv32_2BA3,
        din12 => ap_const_lv32_2800,
        din13 => ap_const_lv32_24EC,
        din14 => ap_const_lv32_2249,
        din15 => ap_const_lv32_2000,
        din16 => ap_const_lv32_1E00,
        din17 => ap_const_lv32_1C3C,
        din18 => ap_const_lv32_1AAB,
        din19 => ap_const_lv32_1943,
        din20 => ap_const_lv32_1800,
        din21 => ap_const_lv32_16DB,
        din22 => ap_const_lv32_15D1,
        din23 => ap_const_lv32_14DF,
        din24 => ap_const_lv32_1400,
        din25 => ap_const_lv32_1333,
        din26 => ap_const_lv32_1276,
        din27 => ap_const_lv32_11C7,
        din28 => ap_const_lv32_1125,
        din29 => ap_const_lv32_108D,
        din30 => ap_const_lv32_1000,
        din31 => ap_const_lv32_F7C,
        din32 => ap_const_lv32_F00,
        din33 => ap_const_lv32_E8C,
        din34 => ap_const_lv32_E1E,
        din35 => ap_const_lv32_DB7,
        din36 => ap_const_lv32_D55,
        din37 => ap_const_lv32_CF9,
        din38 => ap_const_lv32_CA2,
        din39 => ap_const_lv32_C4F,
        din40 => ap_const_lv32_C00,
        din41 => ap_const_lv32_BB5,
        din42 => ap_const_lv32_B6E,
        din43 => ap_const_lv32_B2A,
        din44 => ap_const_lv32_AE9,
        din45 => ap_const_lv32_AAB,
        din46 => ap_const_lv32_A6F,
        din47 => ap_const_lv32_A36,
        din48 => ap_const_lv32_A00,
        din49 => ap_const_lv32_9CC,
        din50 => ap_const_lv32_99A,
        din51 => ap_const_lv32_969,
        din52 => ap_const_lv32_93B,
        din53 => ap_const_lv32_90E,
        din54 => ap_const_lv32_8E4,
        din55 => ap_const_lv32_8BA,
        din56 => ap_const_lv32_892,
        din57 => ap_const_lv32_86C,
        din58 => ap_const_lv32_847,
        din59 => ap_const_lv32_823,
        din60 => ap_const_lv32_800,
        din61 => ap_const_lv32_7DE,
        din62 => ap_const_lv32_7BE,
        din63 => ap_const_lv32_79E,
        din64 => ap_const_lv32_780,
        din65 => ap_const_lv32_762,
        din66 => ap_const_lv32_746,
        din67 => ap_const_lv32_72A,
        din68 => ap_const_lv32_70F,
        din69 => ap_const_lv32_6F5,
        din70 => ap_const_lv32_6DB,
        din71 => ap_const_lv32_6C3,
        din72 => ap_const_lv32_6AB,
        din73 => ap_const_lv32_693,
        din74 => ap_const_lv32_67D,
        din75 => ap_const_lv32_666,
        din76 => ap_const_lv32_651,
        din77 => ap_const_lv32_63C,
        din78 => ap_const_lv32_627,
        din79 => ap_const_lv32_613,
        din80 => ap_const_lv32_600,
        din81 => ap_const_lv32_5ED,
        din82 => ap_const_lv32_5DB,
        din83 => ap_const_lv32_5C8,
        din84 => ap_const_lv32_5B7,
        din85 => ap_const_lv32_5A6,
        din86 => ap_const_lv32_595,
        din87 => ap_const_lv32_584,
        din88 => ap_const_lv32_574,
        din89 => ap_const_lv32_565,
        din90 => ap_const_lv32_555,
        din91 => ap_const_lv32_546,
        din92 => ap_const_lv32_538,
        din93 => ap_const_lv32_529,
        din94 => ap_const_lv32_51B,
        din95 => ap_const_lv32_50D,
        din96 => ap_const_lv32_500,
        din97 => ap_const_lv32_4F3,
        din98 => ap_const_lv32_4E6,
        din99 => ap_const_lv32_4D9,
        din100 => ap_const_lv32_4CD,
        din101 => ap_const_lv32_4C1,
        din102 => ap_const_lv32_4B5,
        din103 => ap_const_lv32_4A9,
        din104 => ap_const_lv32_49E,
        din105 => ap_const_lv32_492,
        din106 => ap_const_lv32_487,
        din107 => ap_const_lv32_47C,
        din108 => ap_const_lv32_472,
        din109 => ap_const_lv32_467,
        din110 => ap_const_lv32_45D,
        din111 => ap_const_lv32_453,
        din112 => ap_const_lv32_449,
        din113 => ap_const_lv32_43F,
        din114 => ap_const_lv32_436,
        din115 => ap_const_lv32_42D,
        din116 => ap_const_lv32_423,
        din117 => ap_const_lv32_41A,
        din118 => ap_const_lv32_411,
        din119 => ap_const_lv32_409,
        din120 => ap_const_lv32_400,
        din121 => ap_const_lv32_3F8,
        din122 => ap_const_lv32_3EF,
        din123 => ap_const_lv32_3E7,
        din124 => ap_const_lv32_3DF,
        din125 => ap_const_lv32_3D7,
        din126 => ap_const_lv32_3CF,
        din127 => ap_const_lv32_3C8,
        din128 => ap_const_lv32_3C0,
        din129 => ap_const_lv32_3B9,
        din130 => ap_const_lv32_3B1,
        din131 => ap_const_lv32_3AA,
        din132 => ap_const_lv32_3A3,
        din133 => ap_const_lv32_39C,
        din134 => ap_const_lv32_395,
        din135 => ap_const_lv32_38E,
        din136 => ap_const_lv32_388,
        din137 => ap_const_lv32_381,
        din138 => ap_const_lv32_37A,
        din139 => ap_const_lv32_374,
        din140 => ap_const_lv32_36E,
        din141 => ap_const_lv32_367,
        din142 => ap_const_lv32_361,
        din143 => ap_const_lv32_35B,
        din144 => ap_const_lv32_355,
        din145 => ap_const_lv32_34F,
        din146 => ap_const_lv32_34A,
        din147 => ap_const_lv32_344,
        din148 => ap_const_lv32_33E,
        din149 => ap_const_lv32_339,
        din150 => ap_const_lv32_333,
        din151 => ap_const_lv32_32E,
        din152 => ap_const_lv32_328,
        din153 => ap_const_lv32_323,
        din154 => ap_const_lv32_31E,
        din155 => ap_const_lv32_319,
        din156 => ap_const_lv32_314,
        din157 => ap_const_lv32_30F,
        din158 => ap_const_lv32_30A,
        din159 => ap_const_lv32_305,
        din160 => ap_const_lv32_300,
        din161 => ap_const_lv32_2FB,
        din162 => ap_const_lv32_2F7,
        din163 => ap_const_lv32_2F2,
        din164 => ap_const_lv32_2ED,
        din165 => ap_const_lv32_2E9,
        din166 => ap_const_lv32_2E4,
        din167 => ap_const_lv32_2E0,
        din168 => ap_const_lv32_2DB,
        din169 => ap_const_lv32_2D7,
        din170 => ap_const_lv32_2D3,
        din171 => ap_const_lv32_2CF,
        din172 => ap_const_lv32_2CA,
        din173 => ap_const_lv32_2C6,
        din174 => ap_const_lv32_2C2,
        din175 => ap_const_lv32_2BE,
        din176 => ap_const_lv32_2BA,
        din177 => ap_const_lv32_2B6,
        din178 => ap_const_lv32_2B2,
        din179 => ap_const_lv32_2AE,
        din180 => ap_const_lv32_2AB,
        din181 => ap_const_lv32_2A7,
        din182 => ap_const_lv32_2A3,
        din183 => ap_const_lv32_29F,
        din184 => ap_const_lv32_29C,
        din185 => ap_const_lv32_298,
        din186 => ap_const_lv32_295,
        din187 => ap_const_lv32_291,
        din188 => ap_const_lv32_28E,
        din189 => ap_const_lv32_28A,
        din190 => ap_const_lv32_287,
        din191 => ap_const_lv32_283,
        din192 => ap_const_lv32_280,
        din193 => ap_const_lv32_27D,
        din194 => ap_const_lv32_279,
        din195 => ap_const_lv32_276,
        din196 => ap_const_lv32_273,
        din197 => ap_const_lv32_270,
        din198 => ap_const_lv32_26D,
        din199 => ap_const_lv32_269,
        din200 => ap_const_lv32_266,
        din201 => ap_const_lv32_263,
        din202 => ap_const_lv32_260,
        din203 => ap_const_lv32_25D,
        din204 => ap_const_lv32_25A,
        din205 => ap_const_lv32_257,
        din206 => ap_const_lv32_255,
        din207 => ap_const_lv32_252,
        din208 => ap_const_lv32_24F,
        din209 => ap_const_lv32_24C,
        din210 => ap_const_lv32_249,
        din211 => ap_const_lv32_246,
        din212 => ap_const_lv32_244,
        din213 => ap_const_lv32_241,
        din214 => ap_const_lv32_23E,
        din215 => ap_const_lv32_23C,
        din216 => ap_const_lv32_239,
        din217 => ap_const_lv32_236,
        din218 => ap_const_lv32_234,
        din219 => ap_const_lv32_231,
        din220 => ap_const_lv32_22F,
        din221 => ap_const_lv32_22C,
        din222 => ap_const_lv32_22A,
        din223 => ap_const_lv32_227,
        din224 => ap_const_lv32_225,
        din225 => ap_const_lv32_222,
        din226 => ap_const_lv32_220,
        din227 => ap_const_lv32_21D,
        din228 => ap_const_lv32_21B,
        din229 => ap_const_lv32_219,
        din230 => ap_const_lv32_216,
        din231 => ap_const_lv32_214,
        din232 => ap_const_lv32_212,
        din233 => ap_const_lv32_20F,
        din234 => ap_const_lv32_20D,
        din235 => ap_const_lv32_20B,
        din236 => ap_const_lv32_209,
        din237 => ap_const_lv32_206,
        din238 => ap_const_lv32_204,
        din239 => ap_const_lv32_202,
        din240 => ap_const_lv32_200,
        din241 => ap_const_lv32_1FE,
        din242 => ap_const_lv32_1FC,
        din243 => ap_const_lv32_1FA,
        din244 => ap_const_lv32_1F8,
        din245 => ap_const_lv32_1F6,
        din246 => ap_const_lv32_1F4,
        din247 => ap_const_lv32_1F1,
        din248 => ap_const_lv32_1EF,
        din249 => ap_const_lv32_1ED,
        din250 => ap_const_lv32_1EC,
        din251 => ap_const_lv32_1EA,
        din252 => ap_const_lv32_1E8,
        din253 => ap_const_lv32_1E6,
        din254 => ap_const_lv32_1E4,
        din255 => ap_const_lv32_1E2,
        din256 => diff_V_reg_2742,
        dout => tmp_fu_2029_p258);

    mul_32s_14s_32_2_1_U176 : component reversi_accel_mul_32s_14s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 14,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_2765,
        din1 => h_reg_2760,
        ce => grp_fu_2549_ce,
        dout => grp_fu_2549_p2);

    mac_muladd_20s_8ns_12ns_20_4_1_U177 : component reversi_accel_mac_muladd_20s_8ns_12ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2608_p0,
        din1 => grp_fu_2608_p1,
        din2 => grp_fu_2608_p2,
        ce => grp_fu_2608_ce,
        dout => grp_fu_2608_p3);

    flow_control_loop_pipe_sequential_init_U : component reversi_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_1098_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_1098 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln136_fu_1178_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_1098 <= add_ln136_fu_1183_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln169_reg_2780 <= add_ln169_fu_2585_p2;
                add_ln232_reg_2724 <= add_ln232_fu_1330_p2;
                add_ln232_reg_2724_pp0_iter10_reg <= add_ln232_reg_2724_pp0_iter9_reg;
                add_ln232_reg_2724_pp0_iter11_reg <= add_ln232_reg_2724_pp0_iter10_reg;
                add_ln232_reg_2724_pp0_iter7_reg <= add_ln232_reg_2724;
                add_ln232_reg_2724_pp0_iter8_reg <= add_ln232_reg_2724_pp0_iter7_reg;
                add_ln232_reg_2724_pp0_iter9_reg <= add_ln232_reg_2724_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                b_V_reg_2633 <= b_V_fu_1194_p1;
                b_V_reg_2633_pp0_iter3_reg <= b_V_reg_2633;
                b_V_reg_2633_pp0_iter4_reg <= b_V_reg_2633_pp0_iter3_reg;
                b_V_reg_2633_pp0_iter5_reg <= b_V_reg_2633_pp0_iter4_reg;
                diff_V_reg_2742 <= diff_V_fu_1354_p2;
                g_V_reg_2640 <= mat_blur_data324_dout(15 downto 8);
                g_V_reg_2640_pp0_iter3_reg <= g_V_reg_2640;
                g_V_reg_2640_pp0_iter4_reg <= g_V_reg_2640_pp0_iter3_reg;
                g_V_reg_2640_pp0_iter5_reg <= g_V_reg_2640_pp0_iter4_reg;
                h_reg_2760 <= h_fu_2023_p2;
                mul_ln166_reg_2775 <= grp_fu_2549_p2;
                r_V_reg_2646 <= mat_blur_data324_dout(23 downto 16);
                r_V_reg_2646_pp0_iter3_reg <= r_V_reg_2646;
                r_V_reg_2646_pp0_iter4_reg <= r_V_reg_2646_pp0_iter3_reg;
                r_V_reg_2646_pp0_iter5_reg <= r_V_reg_2646_pp0_iter4_reg;
                tmp_reg_2765 <= tmp_fu_2029_p258;
                trunc_ln5_reg_2785 <= trunc_ln5_fu_2591_p1(19 downto 12);
                v_3_reg_2677 <= v_3_fu_1245_p2;
                v_reg_2708 <= v_fu_1297_p2;
                v_reg_2708_pp0_iter7_reg <= v_reg_2708;
                vg_reg_2736 <= vg_fu_1343_p2;
                vg_reg_2736_pp0_iter7_reg <= vg_reg_2736;
                vmin_V_reg_2702 <= vmin_V_fu_1288_p2;
                vmin_V_reg_2702_pp0_iter6_reg <= vmin_V_reg_2702;
                vr_reg_2730 <= vr_fu_1335_p2;
                vr_reg_2730_pp0_iter7_reg <= vr_reg_2730;
                xf_cv_icvSaturate8u_cv_load_reg_2672_pp0_iter5_reg <= xf_cv_icvSaturate8u_cv_load_reg_2672;
                    zext_ln130_1_reg_2687(8 downto 0) <= zext_ln130_1_fu_1265_p1(8 downto 0);
                    zext_ln130_reg_2652(7 downto 0) <= zext_ln130_fu_1218_p1(7 downto 0);
                    zext_ln130_reg_2652_pp0_iter4_reg(7 downto 0) <= zext_ln130_reg_2652(7 downto 0);
                    zext_ln130_reg_2652_pp0_iter5_reg(7 downto 0) <= zext_ln130_reg_2652_pp0_iter4_reg(7 downto 0);
                    zext_ln130_reg_2652_pp0_iter6_reg(7 downto 0) <= zext_ln130_reg_2652_pp0_iter5_reg(7 downto 0);
                    zext_ln130_reg_2652_pp0_iter7_reg(7 downto 0) <= zext_ln130_reg_2652_pp0_iter6_reg(7 downto 0);
                    zext_ln1542_1_reg_2692(7 downto 0) <= zext_ln1542_1_fu_1268_p1(7 downto 0);
                    zext_ln1542_reg_2660(7 downto 0) <= zext_ln1542_fu_1221_p1(7 downto 0);
                    zext_ln1542_reg_2660_pp0_iter4_reg(7 downto 0) <= zext_ln1542_reg_2660(7 downto 0);
                    zext_ln1542_reg_2660_pp0_iter5_reg(7 downto 0) <= zext_ln1542_reg_2660_pp0_iter4_reg(7 downto 0);
                    zext_ln1542_reg_2660_pp0_iter6_reg(7 downto 0) <= zext_ln1542_reg_2660_pp0_iter5_reg(7 downto 0);
                    zext_ln1542_reg_2660_pp0_iter7_reg(7 downto 0) <= zext_ln1542_reg_2660_pp0_iter6_reg(7 downto 0);
                    zext_ln232_13_reg_2713(7 downto 0) <= zext_ln232_13_fu_1305_p1(7 downto 0);
                    zext_ln232_13_reg_2713_pp0_iter7_reg(7 downto 0) <= zext_ln232_13_reg_2713(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                xf_cv_icvSaturate8u_cv_load_reg_2672 <= xf_cv_icvSaturate8u_cv_q3;
            end if;
        end if;
    end process;
    zext_ln130_reg_2652(8) <= '0';
    zext_ln130_reg_2652_pp0_iter4_reg(8) <= '0';
    zext_ln130_reg_2652_pp0_iter5_reg(8) <= '0';
    zext_ln130_reg_2652_pp0_iter6_reg(8) <= '0';
    zext_ln130_reg_2652_pp0_iter7_reg(8) <= '0';
    zext_ln1542_reg_2660(8) <= '0';
    zext_ln1542_reg_2660_pp0_iter4_reg(8) <= '0';
    zext_ln1542_reg_2660_pp0_iter5_reg(8) <= '0';
    zext_ln1542_reg_2660_pp0_iter6_reg(8) <= '0';
    zext_ln1542_reg_2660_pp0_iter7_reg(8) <= '0';
    zext_ln130_1_reg_2687(9) <= '0';
    zext_ln1542_1_reg_2692(9 downto 8) <= "00";
    zext_ln232_13_reg_2713(8) <= '0';
    zext_ln232_13_reg_2713_pp0_iter7_reg(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln136_fu_1183_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_1098) + unsigned(ap_const_lv64_1));
    add_ln1541_fu_1230_p2 <= std_logic_vector(unsigned(ret_V_17_fu_1224_p2) + unsigned(zext_ln1542_fu_1221_p1));
    add_ln165_1_fu_1991_p2 <= std_logic_vector(unsigned(zext_ln165_1_fu_1987_p1) + unsigned(sext_ln165_2_fu_1976_p1));
    add_ln165_2_fu_2007_p2 <= std_logic_vector(signed(sext_ln165_3_fu_2003_p1) + signed(sext_ln165_1_fu_1955_p1));
    add_ln165_fu_1943_p2 <= std_logic_vector(unsigned(zext_ln165_fu_1939_p1) + unsigned(sext_ln165_fu_1928_p1));
    add_ln166_fu_2554_p2 <= std_logic_vector(unsigned(mul_ln166_reg_2775) + unsigned(ap_const_lv32_800));
    add_ln169_fu_2585_p2 <= std_logic_vector(unsigned(select_ln167_fu_2577_p3) + unsigned(trunc_ln167_1_fu_2567_p4));
    add_ln232_6_fu_1325_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_q1) + unsigned(b_V_reg_2633_pp0_iter5_reg));
    add_ln232_fu_1330_p2 <= std_logic_vector(unsigned(add_ln232_6_fu_1325_p2) + unsigned(xf_cv_icvSaturate8u_cv_load_reg_2672_pp0_iter5_reg));
    and_ln165_1_fu_1997_p2 <= (select_ln1542_1_fu_1964_p3 and add_ln165_1_fu_1991_p2);
    and_ln165_2_fu_2013_p2 <= (select_ln1542_fu_1916_p3 and add_ln165_2_fu_2007_p2);
    and_ln165_fu_1949_p2 <= (select_ln133_1_fu_1366_p3 and add_ln165_fu_1943_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter12, mat_blur_data324_empty_n, mat_hsv_data325_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((mat_hsv_data325_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((mat_blur_data324_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter12, mat_blur_data324_empty_n, mat_hsv_data325_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((mat_hsv_data325_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((mat_blur_data324_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter12, mat_blur_data324_empty_n, mat_hsv_data325_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((mat_hsv_data325_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((mat_blur_data324_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter12_assign_proc : process(mat_hsv_data325_full_n)
    begin
                ap_block_state13_pp0_stage0_iter12 <= (mat_hsv_data325_full_n = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(mat_blur_data324_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (mat_blur_data324_empty_n = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln136_fu_1178_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln136_fu_1178_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    b_V_fu_1194_p1 <= mat_blur_data324_dout(8 - 1 downto 0);
    diff_V_fu_1354_p2 <= std_logic_vector(unsigned(sub_ln232_fu_1349_p2) + unsigned(add_ln232_reg_2724));

    grp_fu_2549_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_2549_ce <= ap_const_logic_1;
        else 
            grp_fu_2549_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_2608_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_2608_ce <= ap_const_logic_1;
        else 
            grp_fu_2608_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2608_p0 <= rhs_V_3_fu_1373_p258(20 - 1 downto 0);
    grp_fu_2608_p1 <= grp_fu_2608_p10(8 - 1 downto 0);
    grp_fu_2608_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(diff_V_reg_2742),20));
    grp_fu_2608_p2 <= ap_const_lv20_800(12 - 1 downto 0);
    h_fu_2023_p2 <= std_logic_vector(signed(sext_ln165_4_fu_2019_p1) + signed(sext_ln1543_fu_1907_p1));
    icmp_ln136_fu_1178_p2 <= "1" when (indvar_flatten_fu_1098 = bound) else "0";

    mat_blur_data324_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, mat_blur_data324_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_blur_data324_blk_n <= mat_blur_data324_empty_n;
        else 
            mat_blur_data324_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mat_blur_data324_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_blur_data324_read <= ap_const_logic_1;
        else 
            mat_blur_data324_read <= ap_const_logic_0;
        end if; 
    end process;


    mat_hsv_data325_blk_n_assign_proc : process(ap_enable_reg_pp0_iter12, mat_hsv_data325_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            mat_hsv_data325_blk_n <= mat_hsv_data325_full_n;
        else 
            mat_hsv_data325_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_hsv_data325_din <= ((add_ln232_reg_2724_pp0_iter11_reg & trunc_ln5_reg_2785) & add_ln169_reg_2780);

    mat_hsv_data325_write_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            mat_hsv_data325_write <= ap_const_logic_1;
        else 
            mat_hsv_data325_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1314_p2 <= (ret_V_20_fu_1308_p2 xor ap_const_lv9_100);
    ret_V_14_fu_1901_p2 <= (select_ln133_fu_1359_p3 and ret_V_21_fu_1897_p2);
    ret_V_15_fu_1924_p2 <= std_logic_vector(unsigned(zext_ln130_reg_2652_pp0_iter7_reg) - unsigned(zext_ln232_13_reg_2713_pp0_iter7_reg));
    ret_V_16_fu_1972_p2 <= std_logic_vector(unsigned(zext_ln232_13_reg_2713_pp0_iter7_reg) - unsigned(zext_ln1542_reg_2660_pp0_iter7_reg));
    ret_V_17_fu_1224_p2 <= std_logic_vector(signed(ap_const_lv9_100) - signed(zext_ln130_fu_1218_p1));
    ret_V_18_fu_1271_p2 <= std_logic_vector(unsigned(zext_ln1542_1_fu_1268_p1) - unsigned(zext_ln130_1_fu_1265_p1));
    ret_V_19_fu_1250_p2 <= std_logic_vector(unsigned(zext_ln130_reg_2652) - unsigned(zext_ln1542_reg_2660));
    ret_V_20_fu_1308_p2 <= std_logic_vector(unsigned(zext_ln232_fu_1302_p1) - unsigned(zext_ln232_13_fu_1305_p1));
    ret_V_21_fu_1897_p2 <= std_logic_vector(unsigned(zext_ln1542_reg_2660_pp0_iter7_reg) - unsigned(zext_ln130_reg_2652_pp0_iter7_reg));
    ret_V_8_fu_1254_p2 <= (ret_V_19_fu_1250_p2 xor ap_const_lv9_100);
    ret_V_fu_1277_p2 <= std_logic_vector(unsigned(ret_V_18_fu_1271_p2) + unsigned(ap_const_lv10_100));
    select_ln133_1_fu_1366_p3 <= 
        ap_const_lv11_7FF when (vg_reg_2736_pp0_iter7_reg(0) = '1') else 
        ap_const_lv11_0;
    select_ln133_fu_1359_p3 <= 
        ap_const_lv9_1FF when (vr_reg_2730_pp0_iter7_reg(0) = '1') else 
        ap_const_lv9_0;
    select_ln1542_1_fu_1964_p3 <= 
        ap_const_lv12_FFF when (xor_ln165_1_fu_1959_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln1542_fu_1916_p3 <= 
        ap_const_lv13_1FFF when (xor_ln165_fu_1911_p2(0) = '1') else 
        ap_const_lv13_0;
    select_ln167_fu_2577_p3 <= 
        ap_const_lv8_B4 when (tmp_21_fu_2559_p3(0) = '1') else 
        ap_const_lv8_0;
        sext_ln1543_fu_1907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_1901_p2),14));

        sext_ln165_1_fu_1955_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln165_fu_1949_p2),13));

        sext_ln165_2_fu_1976_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_16_fu_1972_p2),12));

        sext_ln165_3_fu_2003_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln165_1_fu_1997_p2),13));

        sext_ln165_4_fu_2019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln165_2_fu_2013_p2),14));

        sext_ln165_fu_1928_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_15_fu_1924_p2),11));

        sext_ln587_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_1277_p2),64));

    shl_ln165_1_fu_1980_p3 <= (diff_V_reg_2742 & ap_const_lv2_0);
    shl_ln_fu_1932_p3 <= (diff_V_reg_2742 & ap_const_lv1_0);
    sub_ln232_fu_1349_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_q0) - unsigned(vmin_V_reg_2702_pp0_iter6_reg));
    tmp_21_fu_2559_p3 <= add_ln166_fu_2554_p2(31 downto 31);
    trunc_ln167_1_fu_2567_p4 <= add_ln166_fu_2554_p2(19 downto 12);
    trunc_ln5_fu_2591_p1 <= grp_fu_2608_p3;
    v_3_fu_1245_p2 <= std_logic_vector(unsigned(zext_ln155_fu_1241_p1) + unsigned(zext_ln130_reg_2652));
    v_fu_1297_p2 <= std_logic_vector(unsigned(zext_ln130_1_reg_2687) + unsigned(zext_ln156_fu_1293_p1));
    vg_fu_1343_p2 <= "1" when (v_fu_1297_p2 = zext_ln1065_fu_1340_p1) else "0";
    vmin_V_fu_1288_p2 <= std_logic_vector(unsigned(b_V_reg_2633_pp0_iter4_reg) - unsigned(xf_cv_icvSaturate8u_cv_q2));
    vr_fu_1335_p2 <= "1" when (v_fu_1297_p2 = zext_ln1542_1_reg_2692) else "0";
    xf_cv_icvSaturate8u_cv_address0 <= zext_ln587_122_fu_1320_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address1 <= sext_ln587_fu_1283_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address2 <= zext_ln587_121_fu_1260_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address3 <= zext_ln587_fu_1236_p1(10 - 1 downto 0);

    xf_cv_icvSaturate8u_cv_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln165_1_fu_1959_p2 <= (vg_reg_2736_pp0_iter7_reg xor ap_const_lv1_1);
    xor_ln165_fu_1911_p2 <= (vr_reg_2730_pp0_iter7_reg xor ap_const_lv1_1);
    zext_ln1065_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_reg_2640_pp0_iter5_reg),10));
    zext_ln130_1_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_3_reg_2677),10));
    zext_ln130_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_V_reg_2633),9));
    zext_ln1542_1_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_2646_pp0_iter4_reg),10));
    zext_ln1542_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_V_reg_2640),9));
    zext_ln155_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_q3),9));
    zext_ln156_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_q1),10));
    zext_ln165_1_fu_1987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln165_1_fu_1980_p3),12));
    zext_ln165_fu_1939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1932_p3),11));
    zext_ln232_13_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_2646_pp0_iter5_reg),9));
    zext_ln232_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vmin_V_reg_2702),9));
    zext_ln587_121_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_8_fu_1254_p2),64));
    zext_ln587_122_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_10_fu_1314_p2),64));
    zext_ln587_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1541_fu_1230_p2),64));
end behav;
