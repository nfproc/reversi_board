-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reversi_accel_xfGaussianFilter3x3_Pipeline_VITIS_LOOP_529_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_Val2_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_121_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_122_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_123_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_124_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_Val2_125_reload : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_val1_V_1_out : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_val1_V_1_out_ap_vld : OUT STD_LOGIC;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_din11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_dout0 : IN STD_LOGIC_VECTOR (7 downto 0);
    grp_xFapplygaussian3x3_16_s_fu_560_p_ce : OUT STD_LOGIC );
end;


architecture behav of reversi_accel_xfGaussianFilter3x3_Pipeline_VITIS_LOOP_529_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv24_FF : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000011111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln529_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln529_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_353_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_353_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_353_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_353_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_353_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_353_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_353_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_load_reg_357 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal k_load_reg_357_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal srcbuf10_V_fu_183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf10_V_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf11_V_fu_197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf11_V_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf20_V_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf20_V_reg_372 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf21_V_fu_225_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf21_V_reg_377 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf30_V_fu_239_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf30_V_reg_382 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf31_V_fu_253_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcbuf31_V_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xFapplygaussian3x3_16_s_fu_127_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call21 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call21 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call21 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call21 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call21 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call21 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call21 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call21 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call21 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call21 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp55 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_fu_60 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_s_fu_307_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_fu_164_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_fu_68 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln674_fu_173_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_fu_177_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_1_fu_187_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_1_fu_191_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_2_fu_201_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_2_fu_205_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_3_fu_215_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_3_fu_219_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_4_fu_229_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_4_fu_233_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln674_5_fu_243_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln674_5_fu_247_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln414_fu_276_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln414_fu_279_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln414_fu_285_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln414_1_fu_297_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln414_fu_291_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln414_1_fu_301_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reversi_accel_xFapplygaussian3x3_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        D1 : IN STD_LOGIC_VECTOR (7 downto 0);
        D2 : IN STD_LOGIC_VECTOR (7 downto 0);
        D3 : IN STD_LOGIC_VECTOR (7 downto 0);
        D4 : IN STD_LOGIC_VECTOR (7 downto 0);
        D5 : IN STD_LOGIC_VECTOR (7 downto 0);
        D6 : IN STD_LOGIC_VECTOR (7 downto 0);
        D7 : IN STD_LOGIC_VECTOR (7 downto 0);
        D8 : IN STD_LOGIC_VECTOR (7 downto 0);
        D9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component reversi_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component reversi_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln529_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_64 <= i_2_fu_164_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln529_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_68 <= k_1_fu_257_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_68 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln529_reg_353 <= icmp_ln529_fu_158_p2;
                icmp_ln529_reg_353_pp0_iter1_reg <= icmp_ln529_reg_353;
                k_load_reg_357_pp0_iter1_reg <= k_load_reg_357;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln529_reg_353_pp0_iter2_reg <= icmp_ln529_reg_353_pp0_iter1_reg;
                icmp_ln529_reg_353_pp0_iter3_reg <= icmp_ln529_reg_353_pp0_iter2_reg;
                icmp_ln529_reg_353_pp0_iter4_reg <= icmp_ln529_reg_353_pp0_iter3_reg;
                icmp_ln529_reg_353_pp0_iter5_reg <= icmp_ln529_reg_353_pp0_iter4_reg;
                icmp_ln529_reg_353_pp0_iter6_reg <= icmp_ln529_reg_353_pp0_iter5_reg;
                icmp_ln529_reg_353_pp0_iter7_reg <= icmp_ln529_reg_353_pp0_iter6_reg;
                k_load_reg_357_pp0_iter2_reg <= k_load_reg_357_pp0_iter1_reg;
                k_load_reg_357_pp0_iter3_reg <= k_load_reg_357_pp0_iter2_reg;
                k_load_reg_357_pp0_iter4_reg <= k_load_reg_357_pp0_iter3_reg;
                k_load_reg_357_pp0_iter5_reg <= k_load_reg_357_pp0_iter4_reg;
                k_load_reg_357_pp0_iter6_reg <= k_load_reg_357_pp0_iter5_reg;
                k_load_reg_357_pp0_iter7_reg <= k_load_reg_357_pp0_iter6_reg;
                k_load_reg_357_pp0_iter8_reg <= k_load_reg_357_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln529_fu_158_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                k_load_reg_357 <= ap_sig_allocacmp_k_load;
                srcbuf10_V_reg_362 <= srcbuf10_V_fu_183_p1;
                srcbuf11_V_reg_367 <= srcbuf11_V_fu_197_p1;
                srcbuf20_V_reg_372 <= srcbuf20_V_fu_211_p1;
                srcbuf21_V_reg_377 <= srcbuf21_V_fu_225_p1;
                srcbuf30_V_reg_382 <= srcbuf30_V_fu_239_p1;
                srcbuf31_V_reg_387 <= srcbuf31_V_fu_253_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                p_Val2_s_fu_60 <= p_Result_s_fu_307_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln414_fu_291_p2 <= (xor_ln414_fu_285_p2 and p_Val2_s_fu_60);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln529_fu_158_p2)
    begin
        if (((icmp_ln529_fu_158_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_68;
        end if; 
    end process;


    grp_xFapplygaussian3x3_16_s_fu_127_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp55)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp55) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_xFapplygaussian3x3_16_s_fu_127_ap_ce <= ap_const_logic_1;
        else 
            grp_xFapplygaussian3x3_16_s_fu_127_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_xFapplygaussian3x3_16_s_fu_560_p_ce <= grp_xFapplygaussian3x3_16_s_fu_127_ap_ce;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din1 <= srcbuf10_V_reg_362;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din10 <= p_read;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din11 <= p_read1;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din2 <= srcbuf11_V_reg_367;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din3 <= ap_const_lv8_0;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din4 <= srcbuf20_V_reg_372;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din5 <= srcbuf21_V_reg_377;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din6 <= ap_const_lv8_0;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din7 <= srcbuf30_V_reg_382;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din8 <= srcbuf31_V_reg_387;
    grp_xFapplygaussian3x3_16_s_fu_560_p_din9 <= ap_const_lv8_0;
    i_2_fu_164_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    icmp_ln529_fu_158_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_3) else "0";
    k_1_fu_257_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_load) + unsigned(ap_const_lv5_8));
    lshr_ln674_1_fu_191_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_121_reload),to_integer(unsigned('0' & zext_ln674_1_fu_187_p1(24-1 downto 0)))));
    lshr_ln674_2_fu_205_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_122_reload),to_integer(unsigned('0' & zext_ln674_2_fu_201_p1(24-1 downto 0)))));
    lshr_ln674_3_fu_219_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_123_reload),to_integer(unsigned('0' & zext_ln674_3_fu_215_p1(24-1 downto 0)))));
    lshr_ln674_4_fu_233_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_124_reload),to_integer(unsigned('0' & zext_ln674_4_fu_229_p1(24-1 downto 0)))));
    lshr_ln674_5_fu_247_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_125_reload),to_integer(unsigned('0' & zext_ln674_5_fu_243_p1(24-1 downto 0)))));
    lshr_ln674_fu_177_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_reload),to_integer(unsigned('0' & zext_ln674_fu_173_p1(24-1 downto 0)))));
    out_val1_V_1_out <= p_Val2_s_fu_60;

    out_val1_V_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln529_reg_353_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln529_reg_353_pp0_iter7_reg = ap_const_lv1_1))) then 
            out_val1_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            out_val1_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_307_p2 <= (shl_ln414_1_fu_301_p2 or and_ln414_fu_291_p2);
    shl_ln414_1_fu_301_p2 <= std_logic_vector(shift_left(unsigned(zext_ln414_1_fu_297_p1),to_integer(unsigned('0' & zext_ln414_fu_276_p1(24-1 downto 0)))));
    shl_ln414_fu_279_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FF),to_integer(unsigned('0' & zext_ln414_fu_276_p1(24-1 downto 0)))));
    srcbuf10_V_fu_183_p1 <= lshr_ln674_fu_177_p2(8 - 1 downto 0);
    srcbuf11_V_fu_197_p1 <= lshr_ln674_1_fu_191_p2(8 - 1 downto 0);
    srcbuf20_V_fu_211_p1 <= lshr_ln674_2_fu_205_p2(8 - 1 downto 0);
    srcbuf21_V_fu_225_p1 <= lshr_ln674_3_fu_219_p2(8 - 1 downto 0);
    srcbuf30_V_fu_239_p1 <= lshr_ln674_4_fu_233_p2(8 - 1 downto 0);
    srcbuf31_V_fu_253_p1 <= lshr_ln674_5_fu_247_p2(8 - 1 downto 0);
    xor_ln414_fu_285_p2 <= (shl_ln414_fu_279_p2 xor ap_const_lv24_FFFFFF);
    zext_ln414_1_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_xFapplygaussian3x3_16_s_fu_560_p_dout0),24));
    zext_ln414_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_load_reg_357_pp0_iter8_reg),24));
    zext_ln674_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_load),24));
    zext_ln674_2_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_load),24));
    zext_ln674_3_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_load),24));
    zext_ln674_4_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_load),24));
    zext_ln674_5_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_load),24));
    zext_ln674_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_load),24));
end behav;
